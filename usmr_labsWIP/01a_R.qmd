---
title: "1A: A first look at R & RStudio"
link-citations: yes
params: 
    SHOW_SOLS: TRUE
    TOGGLE: TRUE
---

```{r setup, include=FALSE}
source('assets/setup.R')
library(xaringanExtra)
xaringanExtra::use_panelset()
```

<!-- __Reading time: 15 minutes__   -->

:::lo
This reading:  

- How does R work?
- How do we use the Rstudio interface? 

:::hints
_The best way to learn R is to use it. Try following along with these reading by typing the code into your R script and running them. You will hopefully get the same output as is presented on this page below each bit of code. If you get errors and warnings, don't panic - read them!_  
:::

:::





# R is a calculator


When we first open RStudio, we should see something which looks more or less like the image in @fig-freshr, where there are several little windows. We are going to explore what each of these little windows offer by just diving in and starting to do things. 

```{r}
#| echo: false
#| label: fig-freshr
#| fig-cap: RStudio, freshly opened


knitr::include_graphics("images/installing_intro/freshr.png")
```



Starting in the left-hand window, you'll notice the blue sign <span style="color:blue">\></span>.  
This is where we R code gets _executed_.  
  
Type 2+2, and hit Enter &#8629;.  
You should discover that R is a calculator - R responds by telling us the answer (`r 2+2`).  
  
Let's work through some basic operations (adding, subtracting, etc).
For instance, can you work out what R will give you for each of these operations?  

::: {.panelset}

::: {.panel}
#### Arithmetic operations

|  Code|  |
|:--|:--|
|  `2 + 5`|   |
|  `10 - 4`|  |
| `2 * 5` |   |
| `10 - (2 * 5)` |  |
| `(10 - 2) * 5`  |  |   
| `10 / 2` |  |
| `3^2` | <span style="opacity:0"><br>(the `^` symbol is "to the power of")</span> |

:::
::: {.panel}
#### Show me the output  

|  Code|  Output|
|:--|:--|
|  `2 + 5`|  `r 2+5` |
|  `10 - 4`|  `r 10 - 4` |
| `2 * 5` | `r 2 * 5`  |
| `10 - (2 * 5)` | `r 10 - (2 * 5)`  |
| `(10 - 2) * 5`  | `r (10 - 2) * 5` |   
| `10 / 2` | `r 10 / 2`  |
| `3^2` | `r 3^2`<br>(the `^` symbol is "to the power of") |

:::

:::

:::rtip
__R can get stuck__  

Whenever you see the blue sign <span style="color:blue">\></span>, it means R is ready and waiting for you to provide a command.

If you type `10 +` and press Enter, you'll see that instead of <span style="color:blue">\></span> you are left with <span style="color:blue">\+</span>.
This means that R is waiting for more.  
Either give it more (finish the command), or cancel the command by pressing the Escape key on your keyboard. 
:::


As well as performing arithmetic calculations, we can _ask_ R things for which the answer is TRUE or FALSE, such as "Is 3 less than 5?". If we type `3 < 5` and press Enter, then R should tell us that the statement we gave it is `r 3<5`.  


These computations don't return numbers, but instead return __logical__ values. There are few operators that we need to learn about here:  

+ __Equality/Inequality__: We use the symbols `==` to mean "is equal to", and the symbols `!=` for "is not equal to".  
+ __Less Than/Greater Than__: To determine whether a value is less/greater than another value, we have our typical symbols `<` and `>`. We also have `<=` and `>=` when we want to include "less/greater than _or equal to_".  

We can combine these with `&` for "and", `|` for "or", and `!` for "not", to ask R all sorts of things.  
Try and work out what R should give you for each of these (or try it out yourself!):  

::: {.panelset}

::: {.panel}
#### Logical operations  

|  Code| <span style="opacity:0">Output</span>| 
|:--|:--|
| `3 > 5` | |
| `3 <= 5` | |
| `3 >= 3` | |
| `3 == 5` | |
| `(2 * 5) == 10` | |
| `(2 * 5) != 11` | |
| `(2 == 2) & (3 == 4)` | |
| `(2 == 2) | (3 == 4)` | |
| `(2 == 2) & !(3 == 4)` | <span style="opacity:0">TRUE</span> |

:::
::: {.panel}
#### Show me the output  

|  Code|  Output|
|:--|:--|
| `3 > 5` |  `r 3 > 5` |
| `3 <= 5` | `r 3 <= 5` |
| `3 >= 3` | `r 3 >= 3` |
| `3 == 5` | `r 3 == 5` |
| `(2 * 5) == 10` | `r (2 * 5) == 10` |
| `(2 * 5) != 11` | `r (2 * 5) != 11` |
| `(2 == 2) & (3 == 4)` |  `r (2 == 2) & (3 == 4)` |
| `(2 == 2) | (3 == 4)` |  `r (2 == 2) | (3 == 4)` |
| `(2 == 2) & !(3 == 4)` | `r (2 == 2) & !(3 == 4)` |



:::
    
:::



:::sticky
__FALSE and TRUE as 0 and 1__  

It will become useful to think of these logical values (TRUE and FALSE) as also having intrinsic numeric values of 0 and 1.  
This is how R will treat them if you ask it to do something that requires the values to be numeric. 
For example, the code `TRUE + 3` will return `4`, and `FALSE + 3` will return `3`. 

:::









<div class="divider div-transparent div-dot"></div>

# R has a memory

We can also store things in R's memory, and to do that we just need to give them a name. Type `x <- 5` and press Enter.
  
What has happened? We don't get any answer like we did with calculations such as `2 + 4`. What we've done is stored in R's memory something named `x` which has the value `5`. We can now refer to the name and it will give us the value!  

:::rtip
__Assigning names to things in R__   

The `<-` symbol, pronounced arrow, is what we use to _assign_ a value to a named object:
  
<center>
`name <- value`
</center>  

:::

If we now type `x` and press Enter, it gives us whatever we assigned to the name "x". So it gives us the number 5.  
What is going to happen when we type `x * 3`? It will give us 15!  

If you are working along with us, you might have also noticed that something else happened when we executed the code `x <- 5`. 
The thing we named __x__ with a value of __5__ suddenly appeared in the top-right window. This is known as the __environment__ (@fig-renvir), and it shows everything that we store in R.  

```{r}
#| label: fig-renvir
#| echo: false
#| fig-cap: Assigning names to objects stores them in R's environment.

knitr::include_graphics("images/installing_intro/rassign.png")
```

  
Note, there are a few rules about names in R:  

1. No spaces - spaces _inside_ a name are not allowed (the spaces around the `<-` don't matter):  
    `lucky_number <- 5` &#10004;
    `lucky number <- 5` &#10060;  
    
1. Names must start with a letter:  
    `lucky_number <- 5` &#10004;
    `1lucky_number <- 5` &#10060;  
    
1. Case sensitive:   
    `lucky_number` is different from `Lucky_Number`   
    
1. here is a set of words you can't use as names, including: _if, else, for, in, TRUE, FALSE, NULL, NA, NaN, function_ (Don't worry about remembering these, R will tell you if you make the mistake of trying to name a variable after one of these). 


<div class="divider div-transparent div-dot"></div>

# The Console and The Environment  

What we've done so far has made use of a couple of the different panes that we see in RStudio. When we've been executing R code (e.g. typing `2+5` or `x<-5` and pressing Enter), we've been doing it in the __console__. The console is where all R code gets _executed_. However, as we'll see below, it isn't where all R code gets _written_.  

We've also been learning about how we can store things in R's memory (the __environment__) by assigning a name to them using the `<-` operator. The top-right pane of RStudio shows us the environment, where we can see everything that we have stored in R. Note that this also means we can keep track of what objects we have saved that are available for our use. If we never stored an object named "peppapig", then R will give us an error when we do something like:  
```{r}
#| error: true
2*peppapig
```

Now we have an idea of what the _console_ and the _environment_ are for. If you want a silly analogy, the console is like R's mouth, where we feed it things, and the environment is just its memory, where it remembers what things are what. We can see these in @fig-r4panel2. Note however, that the __console__ has been moved down to the bottom-left, as we are introducing a new pane above it. This is where we move to next. 

```{r}
#| label: fig-r4panel2
#| echo: false
#| fig-cap: "RStudio panes: Code is executed in the console, and objects are stored in the environment."


knitr::include_graphics("images/installing_intro/r4panel2.png")
```


<div class="divider div-transparent div-dot"></div>

# R Scripts and the Editor

What if we want to edit our code?
Whatever we write in the console just disappears upwards. What if we want to change things we did earlier on?  

While the console is where code gets _executed_, it doesn't have to be where code gets _written._. We can write and edit our code in a separate place _before_ we then send it to the console to be executed!!  

The standard place to write and edit things is in an R scipt. We can open one by doing __File > New File > R script__, and a new file will open in the top-left pane of RStudio. The console will be shoved down to the bottom-left.  

In the R script, we can write code. For instance, we might write: 

```{r}
#| eval: false
x <- 210
y <- 15
x / y
```

Notice that nothing happens when we write each line. It's not like writing in the console where R tells us the answers. This is because this code is not yet being executed. We haven't actually fed it to R.  

There are a couple of useful ways we can send the code to R. 

- Position your text-cursor (blinking vertical line) on the line of code we wish to run and press __Ctrl+Enter__ (Windows) or __Cmd+Enter__ (MacOS)  
- Position your text-cursor (blinking vertical line) on the line of code we wish to run and press the "Run" button in the top right of the script. 

When we do this, the line of code will be sent down to the console, where it will be executed, and R will do it's thing.  
For example, if we had sent the line `x <- 210` down to the console, R would then store the number 210 with the name __x__ in our environment (as in @fig-reditor). Additionally, it will move the text-cursor to the next line, so we can just press Ctrl+Enter again to run the next line (and so on.). 
```{r}
#| label: fig-reditor
#| echo: false
#| fig-cap: Code written in the script can be sent down to the console, where it is executed. In this example, the execution of the code stores an object in the environment. 


knitr::include_graphics("images/installing_intro/reditor.png")
```

By writing our code in a file such as an R script _before_ sending it to the console we can __edit__, __save__, and __share__ our code. This makes it so much more useful than just using the console (which is more like writing on scratch paper, where we can't keep anything).  

For instance, let's say we made a mistake earlier, and instead of "x" being `210`, it should have been `211`. Well, we can just edit the script, and re-run it.  

:::rtip
Regularly save your scripts. 

To save an R script that is open, we just 
    
+ File > Save (or __Ctrl+S__) 
+ Locate to the folder where we want to save the file.  
+ give it an appropriate name, and click save.  
    
**NOTE:** When you save R script files, they terminate with a .R extension.

:::

:::frame
**Looking ahead to Rmarkdown**

<!-- ![Artwork by \\@allison_horst.](images/ahorst/rmarkdown_wizards.png){#fig-ahorstrmd} -->

In addition to R scripts, there is another type of document we can create, known as "Rmarkdown".

Rmarkdown documents combine the analytical power of R and the utility of a text-processor. 
We can have one document which contains all of our analysis as well as our written text, and can be _compiled_ into a nicely formatted report. This saves us doing analysis in R and copying results across to Microsoft Word. It ensures our report accurately reflects our analysis. Everything that you're reading now has all been written in Rmarkdown!  

![An example RMarkdown document](images/installing_intro/rmd.png){#fig-rmd1}

**We're going to learn more about Rmarkdown documents and how to write them later on**, but the broad idea is that we can writing normal text interspersed with "code-chunks" (i.e., chunks of code!). RMarkdown documents looks much like an R script, only the code is contained within the grey-boxes, and text is written in between (see @fig-rmd1). RMarkdown documents can then be compiled to create a lovely __.pdf__, __.html__, or __.docx__ file.  
```{r}
#| label: fig-rmd2
#| echo: false
#| fig-cap: "RMarkdown Workflow"
knitr::include_graphics("images/installing_intro/rmdworkflow.png")
```

:::

<div class="divider div-transparent div-dot"></div>

# The Four RStudio Panes
We've now seen almost all the different panes in RStudio:  

<div style="max-width:49%;display:inline-block;vertical-align:top">

+ The __console__ is where R code gets executed
+ The __environment__ is R's memory, you can _assign_ something a name and store it here, and then refer to it by name in your code.
+ The __editor__ is where you can write and edit R code in R scripts and Rmarkdown documents. You can then send this to the console for it to be executed.  

</div>
<div style="max-width:49%;display:inline-block;vertical-align:middle;">
```{r}
#| label: fig-4panes
#| echo: false
#| fig-cap: "The Four Panes of RStudio"
knitr::include_graphics("images/installing_intro/rstudio-panes.png")
```
</div>


We are yet to use the bottom-right window, but this is an easy one to explain. It is where we can see any __plots__ that we create, where we can browse our __files__, and where we can ask R for some __help__ documentation. We'll make more use of this later on, but for now try typing `plot(x = 4, y = 2)` into the console and seeing what happens.  
  
<br>

:::rtip
__Projects and file organisation__  

We're not going to speak too much about this here but one key thing to remember is that R is working _from_ a specific place in your computer. You can find out where by typing `getwd()` into the console.  

An easy way to keep things organised is to set up an "R project". This basically associates a specific folder on your computer with your working in R, and it means it will automatically look for things in that folder.  

We recommend that you start a project for this course (call it something like "usmr"). This will the be project that you open whenever you work on this course (RStudio will usually re-open the previous project you were working on when you closed it).  
With that project open, we suggest that you start a new script for each week, in which you complete your exercises, and which you then _remember to save!_

If you haven't already, we suggest you start an R project by using (in the top menu of RStudio), __File > New Project__ and following the instructions. It will create a folder on your computer somewhere of your choosing, and you will now notice that if you click in the "Files" tab in the bottom right pane of RStudio, you can see the project folder!  

:::








<div class="divider div-transparent div-dot"></div>

# Good Habits  

Along with regular saving of work and organising your files, it will be very useful in the long-run if we get used to always "starting fresh" when we open R.  

We need to start thinking of the code that we write in an R script as a set of consecutive instructions that we can give to R in order to achieve our goal. It's just a blank slate on which we write (in language R understands) "do this. now do this. now do this.. " and so on.  

This means that the script contains all the information needed.  
So we can now:

1. Empty our environment
2. Restart R
3. Run all the code in our script (highlight multiple lines of code to run them all at once)  

and we're back to where we are! This is great for when we make mistakes (we're going to make many many mistakes!), because we can just clear everything, start at the top of our script, and work downwards to figure out what has gone wrong.  

:::rtip
__Tidying up__  

+ To empty our environment, we can click on the little broomstick icon ![](images/installing_intro/rbroom.png).  

+ To restart the R Session (not always necessary, but good practice) in the top menu, we choose __Session > Restart R__ (or press Ctrl+Shift+F10).  

:::


The other very useful thing that we can do in a script is to write comments for ourselves or for others. By starting a line with a `#`, R will know that that entire line is not code, and so it won't try to _do_ anything with it. For instance, if we write these lines in our script, and send them both down to the console, nothing happens for the first line:  

::: {.panelset}

::: {.panel}
#### Comments  

```{r}
# The line below will add 5 to 2. 
2+5
```

:::
::: {.panel}
#### If we forget the `#`

```{r eval=F}
The line below will add 5 to 2. 
2+5
```
<p style="color:red">
Error: unexpected symbol in "The line"
</p>

:::

    
:::



<div class="divider div-transparent div-dot"></div>

# Useful Settings

Below are a couple of our recommended settings for you to change as you begin your journey in R.
After you've changed them, take a 5 minute break before moving on to the next reading.  

:::rtip
__1. Clean environments__  

As you use R more, you will store lots of things with different names. Throughout this course alone, you'll probably name hundreds of different things.
This could quickly get messy within our project.
  
We can make it so that we have a clean environment each time you open RStudio. This will be really handy.


1. In the top menu, click __Tools > Global Options...__
1. Then, _untick_ the box for "Restore .RData into workspace at startup", and change "Save workspace to .RData on exit" to _Never_:

![](images/installing_intro/renvsettings.png)
:::

:::rtip
__2. Wrapping code__  

In the editor, you might end up with a line of code which is really long, but you can make RStudio 'wrap' the line, so that you can see it all, without having to scroll:
```{r eval=FALSE}
x <- 1+2+3+6+3+45+8467+356+8565+34+34+657+6756+456+456+54+3+78+3+3476+8+4+67+456+567+3+34575+45+2+6+9+5+6
```

1. In the top menu, click __Tools > Global Options...__
1. In the left menu of the box, click "Code"
1. _Tick_ the box for "Soft-wrap R source files"
:::


<div class="tocify-extend-page" data-unique="tocify-extend-page" style="height: 0;"></div>




<div class="tocify-extend-page" data-unique="tocify-extend-page" style="height: 0;"></div>
