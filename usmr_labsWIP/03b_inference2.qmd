---
title: "Practical Inference"
link-citations: yes
params: 
    SHOW_SOLS: TRUE
    TOGGLE: TRUE
---


```{r}
#| label: setup
#| include: false
source('assets/setup.R')
library(xaringanExtra)
library(tidyverse)
library(patchwork)
xaringanExtra::use_panelset()
```

:::lo
The best way to learn R is to use it.   
  
Try following along with this reading by typing the code into your R script and running them. You will hopefully get the same output as is presented on this page below each bit of code.  
If you get errors and warnings, don't panic - read them!  
:::


logic of everything we have learned so far is going to apply, but there's something we have been sweeping under the carpet. 

we were using this formula for our standard error: 

SE eq, where sigma

we don't ever _know_ sigma, so we use $s$ instead. 
this is okay when we have a large $n$ and $s$ provides accurate estimate of $\sigma$  

introduce t

fat tails = correction

t sticky

df sticky




when we learned about CIs and p-values, 
we used qnorm to construct confidence intervals (we got 1.96 by usign qnorm to ask qnorm(.025, .975))
we used pnorm to calculate p-values


what would be more appropriate is to, instead of normal dist, use the reference t dist with corresponding df.
qt and pt

rather than using the SE to define the reference dist, we standardise the "how far from null?" bit in terms of SE
t = xbar / se

we can then use pt for p-values
and qt for CIs



```{r}
stroopdata <- read_csv("../../data/stroop.csv")
stroopdata <- 
  stroopdata %>% 
  mutate(
    diff = mismatching - matching
  )

se = sd(stroopdata$diff)/sqrt(nrow(stroopdata))

tstat = mean(stroopdata$diff) / se
tstat

2*pt(tstat, df = 130, lower.tail=FALSE)

mean(stroopdata$diff) + (qt(c(.025, .975), df = 130) * se)

t.test(stroopdata$diff, mu=0)


```

# "t.test"

all this seems like a lot of effort, and you probably won't actually _use_ much of the code from the last two chapters. We can easily conduct many tests without having to manually calculate p-values or manually construct confidence intervals. 

Instead, functions in R do it all for us. 

t.test

different types of t test
we have done a one-sample mean test.
we test whether the mean of a set of values is different from hypothesised value
xbar - mu_0
e.g.


the paired t.test is actually the same thing in disguise, and _actually_, this is what we did all along in the stroop task example. 
to test whether paired variables mean difference is other than zero.
rephrased, test whether mean difference from var1 and var2 is neq 0.

stroopdata diff
stroopdata paired


independent samples





