[
  {
    "objectID": "01_ex.html",
    "href": "01_ex.html",
    "title": "Week 1 Exercises: Intro R",
    "section": "",
    "text": "Pet Data\n\nWe’re going to play with some data on a sample of licensed pets from the city of Seattle, USA. It can be downloaded (or read directly into R) from https://uoepsy.github.io/data/pets_seattle.csv. It contains information on the license ID, year of issue, as well as the species, breeds and weights of each pet. You can find a data dictionary in @tab-petdict\n\n\n\nSeattle Pets: Data dictionary \n\n\nVariable\nDescription\n\n\n\n\nlicense_year\nYear in which license was issued\n\n\nlicense_number\nUnique license ID number\n\n\nanimals_name\nFull name of pet\n\n\nspecies\nSpecies of pet\n\n\nprimary_breed\nPrimary breed of pet\n\n\nsecondary_breed\nSecondary breed of pet\n\n\nweight_kg\nWeight in kilograms\n\n\n\n\n\n\n\nQuestion 1\n\n\nWrite a line of code that reads in the data to your R session. Then examine the dimensions of the dataset, and take a look at the first few lines lines.\n\nHints: You’ll need the read.csv() function. Remember to assign it a name to store it in your environment. 1B #basic-data-wrangling contains an example of reading in data from a URL. You’ll then want to play with functions like dim() and head().\n\n\n\n\n\n Solution \n\n\nWe’re going to call it petdata. Don’t forget the quotation marks around the url (otherwise R will look for an object in your environment called https://..., which isn’t there).\n\npetdata<-read.csv(\"https://uoepsy.github.io/data/pets_seattle.csv\")\ndim(petdata)\n\n[1] 1956    7\n\nhead(petdata)\n\n  license_year license_number  animals_name species         primary_breed\n1         2018      LNS150171        Norman     Dog                 Boxer\n2         2017        LN20666         Henry     Dog          Bichon Frise\n3         2018      LN8000658 Vega Williams     Dog                   Mix\n4         2018       LN730940         Molly     Dog   Australian Shepherd\n5         2016       LN964607         Gremy     Dog Chihuahua, Short Coat\n6         2018      LNS117115        Shadow     Dog   Retriever, Labrador\n  secondary_breed weight_kg\n1             Mix     29.15\n2        Havanese     23.70\n3         Unknown     21.13\n4             Mix     18.70\n5         Terrier     20.36\n6         Unknown     11.51\n\n\n\n\n\n\nQuestion 2\n\n\nWhat are the names of the 47th and the 200th animals in the dataset?\n\nHints: You’ll probably want to make use of the square brackets data[rows, columns].\n\n\n\n\n\n Solution \n\n\nLots of different ways. We can get out the entire rows:\n\npetdata[47,]\n\n   license_year license_number animals_name species       primary_breed\n47         2018      LNS140233     Hooligan     Dog Retriever, Labrador\n   secondary_breed weight_kg\n47         Unknown     12.27\n\npetdata[200,]\n\n    license_year license_number animals_name species      primary_breed\n200         2017       LN584186  Maple Syrup     Cat Domestic Shorthair\n    secondary_breed weight_kg\n200         Unknown      4.66\n\n\nOr we can extract the names only:\n\n# These all do the same\npetdata[c(47,200),\"name\"]\npetdata[c(47,200),3]\npetdata$animals_name[c(47,200)]\n\n\n\n[1] \"Hooligan\"    \"Maple Syrup\"\n\n\nIn the last one, we use the $ to access the animals_name variable. In this case, we don’t need to specify [rows, columns] inside the square brackets, because it’s a single variable - there are no columns.\n\ndataframe[rows, columns]\n\nvariable[entries]\n\n\n\n\n\nQuestion 3\n\n\nSubset the data to only the data for the dogs, and store this object as another named object in your environment. Subset the data to only the data for the cats, and store this object as another named object in your environment.\n\nHints: You’ll want to think about how we access data via asking for those entries that meet a specific condition (see 1B #accessing-by-a-condition)\n\n\n\n\n\n Solution \n\n\nWe can ask “which entries of species variable are equal to ‘Dog’?” by using pet$species==\"Dog\".\nThis will give us a TRUE for each dog, and a FALSE for each non-dog.\nWe can then use this set of TRUEs and FALSEs to access those rows for which it is TRUE in our data:\n\ndogdata <- petdata[petdata$species==\"Dog\", ]\ncatdata <- petdata[petdata$species==\"Cat\", ]\n\n\n\n\n\nQuestion 4\n\n\nFind the name and weight of the heaviest cat, and of the lightest dog.\n\nHints: You could do this using the original data you read in from question 1, or use the subsets you created in question 3. You’ll again want to supply a condition within square brackets. That condition may well have something to do with being equal to the min() or the max() of some variable.\n\n\n\n\n\n Solution \n\n\nWe can use min() and max() to return the minimum and maximum of a variable:\n\nmin(dogdata$weight_kg)\n\n[1] 0.39\n\nmax(catdata$weight_kg)\n\n[1] 5.48\n\n\nWe could then ask for each entry “is this cat’s weight the maximum cat’s weight?” with catdata$weight_kg == max(catdata$weight_kg) and then use that condition to access the rows in our dataset where the weight_kg variable is at its maximum:\n\ncatdata[catdata$weight_kg == max(catdata$weight_kg), ]\n\n    license_year license_number animals_name species      primary_breed\n414         2018      LNS101014       Smokey     Cat Domestic Shorthair\n    secondary_breed weight_kg\n414             Mix      5.48\n\ndogdata[dogdata$weight_kg == min(dogdata$weight_kg), ]\n\n     license_year license_number animals_name species  primary_breed\n1126         2017      LNS139134       Claire     Dog Great Pyrenees\n     secondary_breed weight_kg\n1126         Unknown      0.39\n\n\n\n\n\n\nQuestion 5\n\n\nDoes the data contain only dogs and cats?\n\nHints: Given what you did in question 3, you might be able to answer this by just looking at your environment.\n\n\n\n\n\n Solution \n\n\nIn the environment, we can see that the entire dataset has 1956 observations, the Dog’s data frame has 1322, and the Cat’s has 632.\nSo there are 2 missing!\n\n\n\n\nQuestion 6\n\n\nExtract the entries of the dataset for which the species is neither “Dog” nor “Cat”? What are the names and species of these animals?\n\nHints: This is a slightly complex one. 1B #more-complex-conditions might help you here.\n\n\n\n\n\n Solution \n\n\nWe can ask if something is not a dog by using petdata$species != \"Dog\". But we want the rows where the species is not a dog and it’s not a cat. So it’s two conditions:\n\npetdata[petdata$species != \"Cat\" & petdata$species != \"Dog\", ]\n\n     license_year license_number     animals_name species primary_breed\n1505         2018      LNS147013    Billy the Kid    Goat     Miniature\n1655         2018      LNS132953 Vincent Van Goat    Goat     Miniature\n     secondary_breed weight_kg\n1505         Unknown    103.48\n1655         Unknown     73.96\n\n\nWe could also do this in other ways, such as asking for all the entries which are either “Dog” or “Cat”, and then negating them:\n\npetdata[!(petdata$species == \"Cat\" | petdata$species == \"Dog\"), ]\n\nAnother clever little operator is the %in% operator, which asks whether something is in a set of things. Unfortunately, we can’t use !%in% to mean “not in”, so we need to put the ! right at the start of the condition:\n\npetdata[petdata$species %in% c(\"Cat\",\"Dog\"), ]\n\n     license_year license_number                                 animals_name\n1            2018      LNS150171                                       Norman\n2            2017        LN20666                                        Henry\n3            2018      LN8000658                                Vega Williams\n4            2018       LN730940                                        Molly\n5            2016       LN964607                                        Gremy\n6            2018      LNS117115                                       Shadow\n7            2018      LNS141621                                      Gaspode\n8            2016        LN82467                                         Juno\n9            2018       LN444211                                        Nelly\n10           2018      LNS123412                                  Wallingford\n11           2018       LN444317                                        Narla\n12           2018       LN956537                                       Friday\n13           2018       LN731014                                        Gemma\n14           2017      LNS136927                                         Hawk\n15           2018      LNS142280                                         Lucy\n16           2017       LN820082                                         Keke\n17           2018       LN829593                                        Rusty\n18           2018      LNS140453                                         Bear\n19           2018      LNS119960                                      Charlie\n20           2017      LNS130739                                      Maxwell\n21           2018      LN8002090                                       Madoka\n22           2018      LN8000712                                     Tiberius\n23           2018      LNS135817                                         Jade\n24           2018      LNS116961                                          Boo\n25           2018       LN445210                                      Cricket\n26           2017       LN273434                                      Knowlee\n27           2017      LNS100900                                       Sophie\n28           2018      LN8003462                                      Spencer\n29           2017       LN571784                                        Julie\n30           2018      LNS114782                                      Pumpkin\n31           2018      LNS109674                                   Miss Emily\n32           2018      LN8002207                                       Snerfu\n33           2018      LNS139692                                        Sadie\n34           2018       LN727071                                        Rocky\n35           2018      LNS126133                                       Pepper\n36           2017       LN437192                                         Tati\n37           2018        LN83704                                      Lucille\n38           2018      LNS116225                                       Jonesy\n39           2018      LN8000164                                         Lucy\n40           2018      LNS140445                                         Milo\n41           2018      LNS145495                                        Rowan\n42           2018      LNS135890                                          Zac\n43           2018      LN8001371                                     Kingston\n44           2017        LN85250                                         Pepe\n45           2018      LNS108784                                         Milo\n46           2018      LNS110853                                        Scout\n47           2018      LNS140233                                     Hooligan\n48           2018      LNS142822                                       Mowgli\n49           2018       LN210596                                       Poirot\n50           2018       LN584571                                        Viejo\n51           2018      LNS112770                                       Jeremy\n52           2018        LN82283                                        Gozer\n53           2018       LN586694                                          Max\n54           2018      LNS136912                                       Rupert\n55           2018      LNS141582                                        Misty\n56           2018      LNS147169                                         Sami\n57           2018        LN83858                                        Banjo\n58           2018      LN8001742                                         Reva\n59           2018       LN216519                                   Archimedes\n60           2018      LNS146850                                       Winnie\n61           2017       LN438540                                         Rose\n62           2018       LN436387                                         Teak\n63           2018      LNS135444                                        Benny\n64           2018      LNS116946                                         Dash\n65           2017        LN70054                                         Nina\n66           2018      LN8001311                                        Cedar\n67           2018      LNS145317                                        Ceili\n68           2018      LNS129123                                      Dempsey\n69           2018      LNS139926                                       Gracie\n70           2017      LNS100935                                      Sherman\n71           2017        LN28324                                          Rue\n72           2018       LN133956                                        Woody\n73           2018       LN142557                                       Rachel\n74           2018      LNS102723                                        Molly\n75           2017       LN964733                                       Watson\n76           2018      LNS103640                                         Fare\n77           2018      LN8001682                                       Pepper\n78           2017       LN277198                                       Stewie\n79           2018       LN905176                                     Whiskers\n80           2017       LN128002                                     Percival\n81           2018      LN8000762                                         Luke\n82           2018      LN8003671                                        Clyde\n83           2018      LNS142341                                    Bellatrix\n84           2018      LNS140325                                       Cherry\n85           2018      LNS112676                                         Ouzo\n86           2017      LNS130671                                       Timbus\n87           2017       LN731268                                       Pepper\n88           2018        LN77682                                         Wash\n89           2018      LN8002261                                        Kyuss\n90           2017       LN833095                                         Esme\n91           2017      LNS130231                                        Farah\n92           2018      LNS147519                                       Oliver\n93           2017       LN284855                                      Maxwell\n94           2018      LNS129706                                        Maple\n95           2018      LN8002369                                       Cayman\n96           2018       LN422768                                        Buddy\n97           2017       LN216537                                      Winston\n98           2017       LN442592                                        Belle\n99           2018      LN8001247                                      Barkley\n100          2018      LNS139966                                         Miso\n101          2018       LN138324                                         Miki\n102          2018       LN730563                                         Pepi\n103          2018        LN26346                                         Ruby\n104          2018      LNS133370                                        Alvin\n105          2017      LNS143602                                        Daisy\n106          2018       LN899888                                         Maya\n107          2017       LN280701                                       Archie\n108          2018      LN8001041                                       Anubis\n109          2018       LN895189                                         Kona\n110          2018       LN728471                                       Nellie\n111          2018      LNS103615                                        Louie\n112          2018      LNS147321                                      Calhoun\n113          2018      LNS147771                                       Juneau\n114          2018       LN280772                                        Perry\n115          2018      LNS113579                                         Boon\n116          2017      LNS136307                                      Charlie\n117          2018        LN84313                                          Gus\n118          2018      LN8002192                                        Pixie\n119          2017      LNS128681                                         Ella\n120          2017       LN904131                                        Josie\n121          2018      LNS106846                                     Maxfield\n122          2018       LN950744                                       Maggie\n123          2018      LNS145555                                       Kaneel\n124          2017      LNS126795                                         Maya\n125          2018      LNS144051                                        Fiona\n126          2018      LN8004021                                        Leila\n127          2017      LNS129084                                       Daxter\n128          2018      LN8003295                                         Kilo\n129          2017      LNS130406                                        Lucky\n130          2018      LN8002603                                        Molly\n131          2018      LN8001765                                        Chewy\n132          2018      LNS121913                                         Coda\n133          2018       LN138761                                       Pippin\n134          2016       LN955781                                  Ziggy Sugar\n135          2018      LNS101883                                        Chavo\n136          2017       LN960176                                       Violet\n137          2018      LNS145547                                       Faolan\n138          2017       LN139602                                       Harper\n139          2018      LNS117744                                       Genepi\n140          2018      LNS126568                                    Lula Bell\n141          2018      LN8000838                                        Larry\n142          2016       LN955145                                       Harvey\n143          2017        LN18358                                     Harrison\n144          2018       LN283749                                       Chayse\n145          2018       LN834709                                       Tanner\n146          2018      LNS111725                                         Yeti\n147          2017       LN280752                                        Gordy\n148          2018      LNS141510                                        Laika\n149          2017       LN130223                                        Rosie\n150          2017       LN215894                                       Metabo\n151          2017        LN84553                                          Rex\n152          2017      LNS131549                                       Baxter\n153          2018      LNS145226                                        Chloe\n154          2017      LNS106564                                         Iggy\n155          2018      LN8001156                                         Cleo\n156          2018      LN8000922                                       Prince\n157          2018      LNS132515                                     Juliette\n158          2018      LN8003365                                       Shadow\n159          2018      LNS121925                                      Jackson\n160          2017      LNS129580                                         Keto\n161          2018      LNS140577                                       Dexter\n162          2018       LN581560                                        Ringo\n163          2017      LNS133546                                       Barney\n164          2018      LNS118288                                         Zeus\n165          2018       LN136835                                          Cal\n166          2018       LN217563                                       Murray\n167          2017       LN216645                                       Gidget\n168          2018      LNS132091                                       Clover\n169          2018       LN901876                                        Derby\n170          2018      LNS101667                                      Grommet\n171          2018      LNS144968                                         Lexi\n172          2018      LNS141946                                         Ruby\n173          2017      LNS130860                                         Prim\n174          2018      LNS141301                              Charlie Chaplin\n175          2017       LN960485                                      Phinney\n176          2018       LN731319                                        Oscar\n177          2018      LNS146603                                         Lucy\n178          2018      LNS125611                                        Tommy\n179          2018      LNS115630                                    Gustopher\n180          2017        LN21452                                   Prince Uno\n181          2018      LNS115304                                         Kona\n182          2016      LNS125075                                        Marty\n183          2018       LN216203                                       Digger\n184          2018      LNS150163                                        Semmy\n185          2016      LNS125630                                         Maya\n186          2017       LN576558                                   Gage Louis\n187          2017      LNS102238                                        Junie\n188          2017        LN28068                                         Zoey\n189          2018      LNS132225                                        Pippa\n190          2018      LNS119905                                        Mamie\n191          2017       LN959328                                        Conan\n192          2017      LNS131269                                        Bixby\n193          2017       LN361093                                        Smoky\n194          2017      LNS123084                                      Jasmine\n195          2018      LNS120840                                      Mustard\n196          2018      LNS152199                                       Callie\n197          2018       LN949761                                     Chrissie\n198          2018       LN577820                                        Molly\n199          2016       LN956876                                        Bella\n200          2017       LN584186                                  Maple Syrup\n201          2018      LNS131819                                        Willy\n202          2017      LNS129475                                          Nyx\n203          2018      LNS118889                                      Bubbles\n204          2017      LNS102577                                          Abe\n205          2017       LN833636                                        Mombi\n206          2017      LNS107938                                          Mia\n207          2017       LN349629                                        Orion\n208          2017     LN79347322                                     Mr Darcy\n209          2018      LN8000612                                        Rosie\n210          2018      LN8003497                                       Oliver\n211          2018      LNS139298                                         Milo\n212          2018      LNS121342                                      Isabeau\n213          2018       LN204863                                       Cinder\n214          2018      LNS139573                                         Hoku\n215          2018      LNS142885                                       Sydney\n216          2018      LNS119479                                 Vera Neumann\n217          2018      LNS133774                                        Poppy\n218          2018      LNS104169                                      Mittens\n219          2018      LNS114717                                        Ringa\n220          2017      LNS132653                                    Louisette\n221          2017       LN142766                                         Leon\n222          2018      LNS123357                                       Pillow\n223          2018      LNS110380                                        Akira\n224          2018       LN824013                                      Connera\n225          2017        LN73087                                      Fifille\n226          2018       LN284621                                      Bingley\n227          2018      LNS120839                                 Tootsie Roll\n228          2018      LNS116397                                         Lily\n229          2018       LN204824                                     Penelope\n230          2015       LN573197                                        Sasha\n231          2018      LNS142501                                        India\n232          2018      LNS134424                                           Pi\n233          2018      LNS152250                                         Lolo\n234          2017       LN276755                                       Smilla\n235          2018      LNS134465                                       Petrol\n236          2017      LNS108576                                        Niera\n237          2017      LNS126685                                          Kit\n238          2017      LNS132852                                        Kitty\n239          2018       LN140685                                       Martin\n240          2018      LNS143981                                        Baker\n241          2017       LN356678                                        Mongo\n242          2018      LNS146099                                        Cosmo\n243          2018      LNS117511                                       Buster\n244          2017       LN210106                                         Jiro\n245          2018       LN959549                                         Jiro\n246          2016       LN275576                                      Gazelle\n247          2018      LNS140378                                          Sam\n248          2018      LNS140847                                       Maggie\n249          2018       LN583980                                        Henri\n250          2018      LNS139532                                         Hugo\n251          2018      LNS137484                                       Biggie\n252          2017       LN216906                                      Charlie\n253          2017        LN80124                                        Shilo\n254          2017      LNS138366                                        Nukka\n255          2018      LNS122947                                       Seshen\n256          2018      LN8000493                                         Indy\n257          2018      LNS144670                                  Toby LeRone\n258          2018      LNS114490                                   Snoqualmie\n259          2017       LN725489                                          Mac\n260          2018      LNS146871                                         Zara\n261          2017      LNS127195                                    Wolverine\n262          2018      LNS130502                                    Miss Hiss\n263          2018      LNS134497                                      Charles\n264          2018        LN83042                                   Tommy Girl\n265          2017       LN141869                                    Chewbacca\n266          2017      LNS129073                                       Brutus\n267          2018      LN8000617                                          Joe\n268          2018      LN8000267                                        Louie\n269          2018      LNS130057                                       Robbie\n270          2017      LNS101622                                         Emma\n271          2018      LNS141862                                       Cobalt\n272          2016       LN959935                                       Violet\n273          2018      LNS139806                                      Jasmine\n274          2018       LN727922                                    Luna Nero\n275          2018       LN585912                                         Remy\n276          2018      LNS125855                                         Rita\n277          2017      LNS130298                                      Zamboni\n278          2018      LNS144979                                        Daisy\n279          2018      LNS140262                                         Lily\n280          2018       LN830694                                      Frankie\n281          2017      LNS107648                                   Miss Ellie\n282          2018      LNS131385                                          Pip\n283          2017      LNS132087                                          Foz\n284          2018      LNS128673                                           Bo\n285          2018      LN8004134                                       Maggie\n286          2018       LN731849                                         Bobo\n287          2018       LN828535                                        DInah\n288          2017       LN216673                                         Toby\n289          2017      LNS107797                                     Bluebell\n290          2018       LN216214                                       Rhuben\n291          2018      LN8000160                                       Indigo\n292          2018      LNS141522                                        Melba\n293          2017      LNS108363                                        Agnes\n294          2018      LNS145857                                        Pippa\n295          2017      LNS136434                                       Jasper\n296          2017      LNS109835                                        Josie\n297          2018      LNS107336                                        Sadie\n298          2018      LNS115383                                       Goldie\n299          2018      LN8001665               \"Luci\" Lucia Rosalin Wicksugal\n300          2018       LN140591                                        Diggy\n301          2018       LN202110                                        Duffy\n302          2017      LNS102215                                         King\n303          2017      LNS137022                                        Poppy\n304          2016      LNS119369                                        Scout\n305          2017       LN139742                                        Spike\n306          2018      LNS128676                                        Miles\n307          2018        LN80484                                      Samwise\n308          2018       LN725333                                         Nina\n309          2018      LNS123620                                Triumph Buras\n310          2017       LN444138                                        Gemma\n311          2017      LNS140567                                        Darla\n312          2018      LNS139342                                     Finnegan\n313          2017      LNS138201                                        Dewey\n314          2018      LNS102688                                          Mac\n315          2018       LN355473                                         Lola\n316          2018      LNS142485                                        Sandy\n317          2018      LNS145538                                       Nellie\n318          2017      LNS133820                                     Gretchen\n319          2017       LN280582                                         Moby\n320          2017      LNS136366                                       Trixie\n321          2018      LN8000609                                         Elly\n322          2018      LNS140776                                        Mitzy\n323          2018      LNS146788                                        Penny\n324          2018      LNS141883                                          Leo\n325          2018      LNS142628                                       Grumpy\n326          2017       LN217828                                         Luna\n327          2017       LN349147                                        Linky\n328          2017       LN276629                                         Pogo\n329          2017      LNS107627                                        Hoshi\n330          2018      LNS104107                                       Minnow\n331          2018      LN8004006                                        Zippy\n332          2017       LN123147                                       Harley\n333          2017       LN353161                                       Knives\n334          2017        LN85533                                        Flash\n335          2018        LN83503                                        Myron\n336          2018      LNS142080                                      Andante\n337          2017       LN142544                                         Nala\n338          2018      LNS134426                                        Dolce\n339          2018       LN732462                                     Benjamin\n340          2018      LNS104167                                          Leo\n341          2018       LN833754                                      Charlie\n342          2018       LN896687                                        Minka\n343          2018      LNS100819                                        Sasha\n344          2017      LNS104898                                        Louis\n345          2018      LNS134429                                      Chandra\n346          2018      LNS146492                                       Thomas\n347          2018       LN832550                                        Ollie\n348          2018      LNS139262                                        Azula\n349          2018       LN586309                                     Snuffles\n350          2018       LN273668                                        Sammy\n351          2018       LN273487                                       Oliver\n352          2018       LN434892                                        Sammi\n353          2018       LN282940                                         Lucy\n354          2018      LNS142227                                       Margot\n355          2016        LN82266                                         Gwen\n356          2015       LN560448                                          Lou\n357          2018       LN730949                                       Cassie\n358          2018      LNS130834                                        Jager\n359          2018      LNS131348                                          Sam\n360          2017        LN80904                                       Cowboy\n361          2018      LNS124117                                       Suzy Q\n362          2016      LNS101088                                      Raphael\n363          2018      LNS118149                                        Dinko\n364          2018      LNS141106                                         Jake\n365          2018      LNS146565                                        Cedar\n366          2017      LNS131146                                        Kaehu\n367          2017       LN359737                                       Millie\n368          2018      LNS113638                                       Dobbie\n369          2017        LN86226                                        Abbey\n370          2018      LNS123011                                        Sandy\n371          2018       LN961032                                     Labowski\n372          2017      LNS135983                                       Jasper\n373          2018       LN581864                                    Sampagita\n374          2016      LNS123991                                       Dragon\n375          2018      LNS142137                                        Penny\n376          2018      LNS144134                                       Cassie\n377          2018       LN140041                                        Chloe\n378          2018      LNS146053                                         Dude\n379          2018      LNS119504                                         Juno\n380          2017       LN211206                                       Gracie\n381          2018        LN29770                                        Logan\n382          2018      LNS139892                                       Baxter\n383          2017       LN821150                                        Macho\n384          2017      LNS129433                                    Ferdinand\n385          2017       LN580657                                      Jensina\n386          2018      LNS144151                                         Joey\n387          2018      LN8002945                                       Ginger\n388          2018      LNS139193                                        Benny\n389          2017      LNS139176                                         Jack\n390          2016      LNS125955                                        Josie\n391          2018       LN723787                                         Spud\n392          2018       LN730950                                        Lilly\n393          2018      LN8002975                                      Jackson\n394          2018      LN8003923                                          Eva\n395          2018       LN730678                                         Saru\n396          2018      LN8003170                                          Mia\n397          2018      LNS144012                                        Keibi\n398          2017       LN442650                                      Madison\n399          2017        LN30073                                         Maya\n400          2017       LN358386                                         Maia\n401          2018      LNS118011                                         Yoda\n402          2018       LN731728                                      Jackson\n403          2018      LNS150179                                        Hammy\n404          2017       LN583649                                          Fry\n405          2018      LNS144694                                        Angel\n406          2018       LN138666                                        Heidi\n407          2018       LN433036                                        Klaus\n408          2017      LNS104062                                         Lucy\n409          2018       LN142286                                       Barney\n410          2018       LN732825                                        Woody\n411          2018      LN8003137                                    Valentine\n412          2017       LN204884                                          Nod\n413          2018       LN208443                                        Mitzi\n414          2018      LNS101014                                       Smokey\n415          2018        LN71467                                        Missy\n416          2017      LNS108054                                         Opal\n417          2017      LNS107151                                     Scarlett\n418          2018      LN8003950                                        Herdy\n419          2018      LNS142194                                          Sam\n420          2018      LNS146648                                      Sabrino\n421          2018      LNS140912                                        Shark\n422          2018      LNS144346                                        Henry\n423          2018      LNS139759                                       Smokey\n424          2018      LNS100828                                        Bitsy\n425          2018       LN138601                                        Buddy\n426          2018      LNS140638                                        Goose\n427          2018      LNS134098                                       Finley\n428          2018      LNS145197                                         Oslo\n429          2017       LN584502                                        Bambu\n430          2018       LN831877                                       Bandit\n431          2018      LNS142182                                       Tucker\n432          2017      LNS138711                                          Jam\n433          2017       LN214814                                         Hank\n434          2017       LN216783                                         Zeus\n435          2018      LNS139254                                       Isabel\n436          2017      LNS126063                                        Tukey\n437          2018      LNS113166                                       Snuzzy\n438          2018        LN82485                                        Tilly\n439          2018      LNS141320                                 Theo Renshaw\n440          2018       LN901063                                         Lucy\n441          2018      LN8001879                           Leonardo Jino Kirr\n442          2017      LNS106240                                         Rush\n443          2017       LN958064                                           AJ\n444          2018      LN8003750                                      Arizona\n445          2017       LN444568                                       Wilson\n446          2018      LNS117054                                         Hank\n447          2018      LNS120866                                         Thor\n448          2018      LNS143524                                       Shrimp\n449          2018      LNS129425                                      Maximus\n450          2017       LN141524                                         Luna\n451          2017       LN209512                                         Lucy\n452          2018      LNS139508                                           Jo\n453          2017      LNS135400                                        Sally\n454          2016      LNS139214                                        Ernie\n455          2018      LN8002753                                         Luna\n456          2017        LN25621                                        Zelda\n457          2018      LNS130943                                       Cooper\n458          2018      LNS114050                                       Pepper\n459          2018      LNS118590                                      Griffey\n460          2018      LNS123574                                         Toto\n461          2017      LNS132216                                       Sesame\n462          2018       LN212175                                       Baylee\n463          2018      LNS111013                                      Pickles\n464          2018      LN8002254                                      Patrick\n465          2018       LN138361                                         Jazz\n466          2017       LN901598                                       Kenzel\n467          2018      LNS120641                                        Penny\n468          2018      LNS145251                                       Birdie\n469          2018        LN24123                                        Simon\n470          2018      LNS120123                                       Snoopy\n471          2018      LNS143079                                          Leo\n472          2018      LNS125116                                        Fionn\n473          2018      LNS146814                                        Ziggy\n474          2018      LNS144783                                       Bessie\n475          2018      LNS141986 Little Miss Dublin Maeve of the Emerald Isle\n476          2018       LN719947                                        Abbey\n477          2018      LNS120426                                       Philip\n478          2017      LNS104767                                        Annie\n479          2017       LN279960                                          Jet\n480          2018       LN444285                                       Gunnar\n481          2017      LNS122744                                        Daisy\n482          2018      LNS135478                                         Kato\n483          2017      LNS130453                                        Penny\n484          2017       LN583366                                       Chance\n485          2017       LN731694                                       Olivia\n486          2018      LN8001152                                         Nyah\n487          2018      LNS134133                                       Boomer\n488          2018       LN891265                                      Quattro\n489          2018       LN579094                                         Toby\n490          2018      LNS143534                                       Apollo\n491          2018      LNS120387                                        Maude\n492          2017      LNS130725                                       Harvey\n493          2017       LN732660                                   Girl Scout\n494          2017      LNS127911                                         Kudo\n495          2018      LNS119030                                  Pepper Anne\n496          2018      LN8001098                                         Coya\n497          2018       LN952469                                         Ella\n498          2018      LNS121881                                        Sushi\n499          2018       LN129573                                    Sweet Pea\n500          2018      LNS145124                                      Puzzles\n501          2017       LN350351                                        Lalla\n502          2018        LN19197                                        Rosie\n503          2018      LNS145951                                     Moonbeam\n504          2017       LN133432                                         Cody\n505          2017       LN832705                                   Sweet Anna\n506          2018      LNS152189                                          Ara\n507          2018      LNS112866                                         Chip\n508          2017       LN202885                                         Luca\n509          2018      LNS117480                                         Enzo\n510          2018      LNS145312                                        Moose\n511          2018      LN8001871                                         Zulu\n512          2017       LN136322                                          Tre\n513          2018       LN959919                                     Kilkenny\n514          2018      LNS117908                                         Addy\n515          2016        LN79023                                       Marley\n516          2017       LN141578                                        Penny\n517          2018      LNS149194                                         Oden\n518          2018       LN443161                                    Stockholm\n519          2018      LNS133847                                     Patronus\n520          2018        LN27857                                       Harley\n521          2018      LNS139287                                    The Drake\n522          2018      LNS139063                                        Kenya\n523          2018      LNS127335                                      McKenna\n524          2018      LNS131014                                        Quica\n525          2018       LN279935                                      Molokai\n526          2018      LNS140775                                        Poppy\n527          2018      LNS140471                                          Ipo\n528          2018      LNS126940                                          Sam\n529          2017       LN141879                                        Dozer\n530          2018       LN444790                                       Otello\n531          2017      LNS131461                                       Gracie\n532          2018      LNS141035                             Teddy (Theodore)\n533          2018       LN572064                                      Biscuit\n534          2017       LN961158                                       Marcia\n535          2018        LN28054                                          Amy\n536          2017      LNS127887                                       Pinkie\n537          2018        LN83418                                     Franklin\n538          2017        LN85135                                      Cortado\n539          2018       LN351016                                        Blaze\n540          2018      LN8001282                                        Sassy\n541          2018      LN8002526                                         Leia\n542          2018       LN431030                                         Ming\n543          2017       LN586637                                        Wiley\n544          2018      LNS122246                                         Jynx\n545          2018      LN8002705                                         Ooma\n546          2018      LNS143155                                        Henry\n547          2018      LNS113053                                         Kita\n548          2018      LN8003592                                        Torta\n549          2018      LNS109251                                         Tasi\n550          2018      LNS149106                                       Berlin\n551          2017      LNS135226                                        Lucas\n552          2018      LN8002478                                   Kevin Hart\n553          2018      LNS120319                                        Darby\n554          2018      LNS144759                                        Tyson\n555          2017        LN80918                                        Chloe\n556          2018      LNS147525                                         Toby\n557          2018      LNS134992                                          Ari\n558          2018       LN138098                                      Coconut\n559          2018      LNS141118                                 Lili Marleen\n560          2018      LNS121810                                         Hoot\n561          2018      LNS136105                                       Hobbes\n562          2018      LN8001587                                         Leia\n563          2018      LNS128030                                          Blu\n564          2017      LNS136972                                      Eustice\n565          2018      LNS125834                                       Gaston\n566          2017      LNS131178                                        Tashi\n567          2018      LNS130316                                   Emma Ganin\n568          2018       LN212098                                           PJ\n569          2017      LNS135661                                        Kiddo\n570          2018      LN8000582                                        Rocky\n571          2018      LN8003864                                         Zoey\n572          2018      LNS135304                                         Lucy\n573          2017      LNS118664                                        Bosco\n574          2018      LN8000889                                         Hoku\n575          2018      LNS129647                                         Gigi\n576          2016      LNS125989                                      Charlie\n577          2018      LNS124172                                         Haru\n578          2018       LN138642                                         Kate\n579          2017       LN139632                                        Beemo\n580          2018       LN898799                                      Beckett\n581          2017       LN436868                                  Chumba Bear\n582          2018      LNS106023                                       Oliver\n583          2017      LNS130922                                         Tato\n584          2017      LNS103628                                  Doctor Evil\n585          2017       LN832944                                        Maeby\n586          2018      LNS140877                                        Chula\n587          2018       LN434564                                        Roxie\n588          2017        LN29145                                     Ugnaught\n589          2017      LNS103715                                       Rocket\n590          2018      LNS140777                                        Bella\n591          2017       LN133602                                         Dita\n592          2017      LNS134670                                          Ash\n593          2018      LNS142571                                       Cronut\n594          2018      LNS123704                                        Ollie\n595          2018      LNS149214                                        Cider\n596          2017      LNS128375                                      Tommy T\n597          2016        LN15183                                       Pindar\n598          2017       LN732097                                       Callie\n599          2017      LNS127187                                       Carson\n600          2018      LNS143695                                         Tofu\n601          2018      LNS131780                                         Rasa\n602          2018      LNS120280                                          B&W\n603          2018      LNS146537                                       Sneezy\n604          2018      LNS147010                                      Bentley\n605          2018       LN716305                                       Cowboy\n606          2017      LNS138266                                       Crater\n607          2018      LNS138649                                   BusterBear\n608          2018      LN8000107                                       Baxter\n609          2017       LN900896                                       Oliver\n610          2018       LN835204                                      Madison\n611          2018      LNS114684                                  Tinkerbelle\n612          2018      LNS143316                                         Arlo\n613          2017       LN137583                                        Sadie\n614          2017      LNS132012                                       Tazman\n615          2018      LNS111756                                 Pepper Potts\n616          2018       LN349247                                         Hana\n617          2018      LNS145127                                        Edgar\n618          2017       LN444408                                         Gabi\n619          2017        LN84172                                        Teddy\n620          2017       LN831830                                        Lucky\n621          2018      LN8000239                                 Pablo Lowery\n622          2018      LN8002379                                         Luna\n623          2017      LNS107842                                        Lucky\n624          2017       LN141248                                       Buster\n625          2018        LN78157                                       Franny\n626          2017        LN84608                                        Shaka\n627          2018        LN80008                                        Frank\n628          2018      LNS136964                                           Ri\n629          2018      LNS142073                                        Annie\n630          2018      LNS116788                                         Jake\n631          2018      LN8003269                                        Jones\n632          2017      LNS126893                                         Rory\n633          2017      LNS102538                                       Hailey\n634          2017       LN211075                                       Pippin\n635          2017       LN585071                                    Lulabelle\n636          2018       LN584796                                     June Bug\n637          2018      LNS134031                                       Bishop\n638          2017      LNS128088                                        Kylie\n639          2017       LN435837                                    Cindy Lou\n640          2018       LN141142                                       Maisie\n641          2018       LN206544                                        Raven\n642          2018       LN731510                                         Kafi\n643          2018      LNS135255                                        Chloe\n644          2015       LN585641                                        Trout\n645          2017       LN579562                                     Campbell\n646          2018      LNS142284                                      Mustafa\n647          2018       LN428266                                        Eliza\n648          2018      LNS118997                                         Nova\n649          2018      LNS142415                                       Sophie\n650          2017      LNS136540                                       Leeloo\n651          2018      LN8002037                                       Sebben\n652          2018      LNS141592                                      Georgie\n653          2018      LN8002040                                       Marley\n654          2018      LNS134539                                     Garfield\n655          2018      LNS134461                                           OJ\n656          2018       LN204738                                       Hunter\n657          2017       LN430537                                     Skeletor\n658          2018       LN964240                                      Griffey\n659          2017      LNS104264                                        Posey\n660          2017       LN433410                                        Himhe\n661          2018      LNS101685                                         Juno\n662          2018       LN833257                                       Badger\n663          2018       LN733011                                        Misha\n664          2017      LNS127772                    Sampson (Prince Charming)\n665          2018        LN68092                                         Emma\n666          2018       LN732275                                         Inky\n667          2016       LN953254                                        Benny\n668          2018      LNS146501                               Mack (Frankie)\n669          2017       LN351208                                        Tommy\n670          2016       LN962338                                        Josie\n671          2017      LNS136324                                     Theadora\n672          2018      LNS116352                                        Sucha\n673          2017       LN284885                                       Sophie\n674          2018      LNS125565                                        Atari\n675          2018       LN892002                                       Jellie\n676          2018        LN74399                                        Tiger\n677          2018      LNS140267                                        Balam\n678          2018        LN26352                                      Frankie\n679          2018       LN139672                                    Coco Rose\n680          2018      LNS143784                                         Otto\n681          2018      LNS141672                                         Luna\n682          2017      LNS108114                                        Tripp\n683          2018      LNS134843                                       Harvey\n684          2017       LN580847                                       Jasper\n685          2017       LN951162                                        Pesto\n686          2018      LNS145387                                       Maddie\n687          2018        LN84405                                      No Show\n688          2017        LN64346                                         Sara\n689          2018      LN8001357                                         Baie\n690          2018      LNS143992                                        Cedra\n691          2017       LN580774                                         Kona\n692          2018      LNS121687                                        Mazie\n693          2018      LNS147294                                          Lun\n694          2017        LN29777                                        Simba\n695          2018      LNS127767                                      Coconut\n696          2017       LN139452                                        Daisy\n697          2016      LNS125044                                        Gabby\n698          2018       LN904872                                        Poppy\n699          2018      LNS130430                                        Dobby\n700          2018       LN141131                                        Addie\n701          2018      LNS137807                                     Chauncey\n702          2018       LN432886                                      Butters\n703          2017      LNS137275                                        Molly\n704          2018       LN359251                                    Sophocles\n705          2018       LN576065                                        Rocky\n706          2017      LNS131032                                        Bella\n707          2018      LNS133558                                        Ruger\n708          2018      LNS140793                                       Bowser\n709          2018      LNS143502                                         Solo\n710          2018       LN358160                                        Betty\n711          2018      LNS132369                                       Oliver\n712          2018      LNS146076                                       Stuart\n713          2017        LN81345                                        Oscar\n714          2018       LN904638                                       Dexter\n715          2018       LN585535                                       Mr.Big\n716          2018      LNS144673                                        Sofie\n717          2017       LN831007                                         Fred\n718          2018      LN8001915                                         Lucy\n719          2018       LN729264                                        Tater\n720          2018       LN903527                                          Ace\n721          2018        LN26004                                         Remy\n722          2018        LN76506                                       Stormy\n723          2018       LN281496                              Dennis Bergkamp\n724          2018      LNS141921                                      Harriet\n725          2017       LN830795                                       Tucker\n726          2018       LN902328                                         Hook\n727          2016      LNS119565                                         Coco\n728          2018      LNS145996                                        Bella\n729          2018       LN276475                                         Tara\n730          2017      LNS101228                                          Azi\n731          2018      LN8001029                                       Gustav\n732          2018      LNS137363                                      Waffles\n733          2018      LNS127354                                          Umi\n734          2018      LNS127962                                       Stella\n735          2017      LNS131285                                        Rosie\n736          2018      LNS111552                                       Maizie\n737          2018      LNS119358                                         Kali\n738          2018      LNS139875                                          Kai\n739          2018       LN134402                                         Arlo\n740          2018      LNS124530                                      Frankie\n741          2018      LN8001399                                        Asher\n742          2016       LN207943                                       Bandit\n743          2018       LN443123                                         Hugo\n744          2018       LN440988                                       Pepper\n745          2018       LN138768                                        Mabel\n746          2018       LN572070                                      Carmela\n747          2018      LNS144467                                         Susi\n748          2018       LN358863                                        Bruce\n749          2017       LN585478                                  Huckle Bear\n750          2018      LNS141623                                  Mabel Grace\n751          2018       LN903454                                      Sparrow\n752          2017      LNS105765                                        Bunny\n753          2018       LN729618                                         Nola\n754          2018       LN583492                                        Scout\n755          2017      LNS135676                                   Hazel Moon\n756          2017      LNS134783                                        Qince\n757          2018       LN439678                                        Allie\n758          2018      LNS119574                                        Dante\n759          2018      LNS140614                                        Kiyah\n760          2018       LN439603                                          Oso\n761          2017       LN354866                                       Archie\n762          2018      LNS101276                                        Zorro\n763          2018       LN827493                                       Gracie\n764          2018      LNS105198                                        River\n765          2017       LN140883                                          Bob\n766          2018      LNS118347                                      Winston\n767          2018      LN8004246                                        Olive\n768          2017       LN901159                                         Brio\n769          2018      LNS149120                                      Bentley\n770          2018      LNS116512                                       Nutmeg\n771          2018        LN77277                                        Shane\n772          2018      LNS101629                                Johnny Castle\n773          2018      LNS111247                                       Tobias\n774          2017      LNS133907                                        Dusky\n775          2018       LN732547                                         Puma\n776          2017      LNS125395                                         Kimi\n777          2018      LNS139928                                        Buddy\n778          2018      LNS140149                                         Xena\n779          2018      LNS146611                                        Kitty\n780          2018        LN22140                                         Lucy\n781          2016      LNS122885                                       Cheese\n782          2017       LN140292                                      Ravenna\n783          2018      LN8003031                                        Lemon\n784          2017       LN269259                                       Maggie\n785          2018      LNS140883                                        Mango\n786          2018      LNS139664                                        Salma\n787          2018      LNS147133                            Sassafras (Sassy)\n788          2017       LN715482                                       Cookie\n789          2018      LNS139475                                        Lizzy\n790          2017       LN833254                                      Darling\n791          2018      LNS123952                                       Totoro\n792          2017        LN22576                                          Amy\n793          2018        LN74373                                          Max\n794          2018        LN77172                                         Yuki\n795          2017      LNS100750                                         Lily\n796          2017       LN574170                                       Mahlda\n797          2018      LNS144341                                     Garfield\n798          2017      LNS138475                                    Josephine\n799          2018       LN732446                                     Sunshine\n800          2018        LN75132                                         Diva\n801          2017       LN569669                                         Mimi\n802          2017       LN964823                                       Maggie\n803          2017       LN351058                                     Penelope\n804          2018        LN72725                                        Maeve\n805          2018      LNS119044                                          Mel\n806          2017       LN584560                                       Bastas\n807          2018      LNS119705                                        Eddie\n808          2018      LN8000109                                     Mama Mia\n809          2017        LN22283                                        Tammy\n810          2017       LN730995                                   Gypsy Rose\n811          2018      LNS104413                                  Tinkerbelle\n812          2018      LNS146665                                    Mr. Darcy\n813          2018       LN830865                                   Honey Girl\n814          2018      LNS134568                                         Zeus\n815          2017      LNS134320                                          Pie\n816          2018       LN573064                                       Keaton\n817          2017      LNS134627                                       Gelato\n818          2017       LN954140                                       Nathan\n819          2018      LNS115148                                      Lorelai\n820          2018       LN585271                                     Chauncey\n821          2018      LNS133068                                         Dale\n822          2018       LN728602                                        Albie\n823          2018      LNS147769                                         Remy\n824          2017       LN359941                                        Lilly\n825          2018       LN281569                                  Stella Luna\n826          2018      LNS140345                                       Mollie\n827          2017      LNS105577                                       Marcus\n828          2018      LNS139345                                     Thurston\n829          2018       LN732804                                       Ginger\n830          2018        LN82730                                          Pow\n831          2017       LN356803                                      Beckett\n832          2018      LNS129825                                       Oswald\n833          2018      LNS121347                                       Stella\n834          2017       LN439530                                        Bella\n835          2018      LNS137495                                        Flash\n836          2018      LNS130426                                        Tonka\n837          2018      LNS144642                                       Bailey\n838          2018      LNS142173                                        Olive\n839          2018      LNS144917                                       Devery\n840          2018      LN8002725                                       Scully\n841          2018      LNS143544                                       Stella\n842          2018       LN904348                                        Piper\n843          2017       LN214162                                         Duke\n844          2018       LN439689                                  Betty Davis\n845          2018       LN216381                                         Milo\n846          2018       LN141947                                        Olive\n847          2018       LN733149                                        Lenny\n848          2018      LN8001927                                       Xavier\n849          2018       LN216420                                         Abby\n850          2018       LN207448                                        Angel\n851          2017      LNS131518                                      Griffin\n852          2018        LN26196                                Fishin Larson\n853          2018      LNS106869                                        Nelly\n854          2018      LNS131540                                       Dakota\n855          2018      LNS144749                                         Ivan\n856          2017      LNS106238                                        Lilly\n857          2018      LN8004219                                       Finley\n858          2017        LN23616                                          Mia\n859          2017       LN577432                                       Oliver\n860          2018       LN213921                                        Bella\n861          2018      LNS137559                                        Blair\n862          2017      LNS103330                                      Frankie\n863          2018       LN210509                                        Bella\n864          2017      LNS103085                                       Nellie\n865          2018      LNS118410                                         Kuma\n866          2018      LNS135727                                      Stanley\n867          2018      LNS122445                                      Jackson\n868          2018      LNS112167                                       Oliver\n869          2017      LNS106914                                        Buddy\n870          2018      LNS141607                                        Gizmo\n871          2018      LN8003376                                         Lucy\n872          2017      LNS134138                                         Otis\n873          2016      LNS115690                                       Hoover\n874          2017       LN142403                                       Sparky\n875          2017       LN731676                                         Bear\n876          2018      LN8002685                                        Oscar\n877          2018       LN142174                                          Lil\n878          2018      LNS109825                                      Bentley\n879          2018      LNS117732                                         Luca\n880          2017       LN825789                                        Molly\n881          2017       LN282747                                         Luna\n882          2018      LN8002773                                     Tallulah\n883          2017      LNS135244                                       Hannah\n884          2018      LNS151122                                        Gypsy\n885          2018      LNS149205                                         Tate\n886          2017       LN724228                                       Django\n887          2018      LNS111554                                       Draven\n888          2018      LNS110194                                         Lucy\n889          2018       LN574009                                       Venice\n890          2018       LN353430                                          Pho\n891          2017       LN724212                                         Ella\n892          2017       LN568099                                       Petula\n893          2018       LN215249                                       Ashley\n894          2018       LN897143                                        Trina\n895          2017       LN586586                                          Fyn\n896          2018      LNS149204                                         Skyy\n897          2018      LNS141990                                        Ramon\n898          2018       LN733206                                     Clarisse\n899          2017       LN824358                                        Franz\n900          2018       LN721507                                         Luna\n901          2018       LN268258                                         Zoey\n902          2018      LNS144976                                         Luke\n903          2018      LNS114573                                        Bella\n904          2017      LNS127862                                         Moby\n905          2018       LN273708                                        Atlas\n906          2017       LN893665                                       Sophie\n907          2018       LN574314                                 Little Kitty\n908          2017      LNS106218                                         Lodi\n909          2017      LNS102122                                      Sweetie\n910          2018       LN128319                                        Sadie\n911          2018      LN8004163                                         Jinx\n912          2017      LNS102822                                         Luke\n913          2018      LNS143667                                        BC II\n914          2018       LN724558                                     Garrison\n915          2018       LN730971                                         Lucy\n916          2018      LNS151161                                      Blondie\n917          2018      LNS144793                                        Daisy\n918          2017       LN278036                                         Macy\n919          2018      LN8002358                                         Duck\n920          2018      LNS147432                                       Prissy\n921          2018      LNS151136                                          Bix\n922          2018      LNS131083                                         Ella\n923          2018      LN8004151                                     Skittles\n924          2018      LNS117605                                        Mochi\n925          2018      LNS145798                                       Walter\n926          2017        LN66177                                       Cassie\n927          2018      LNS145024                                       Dagmar\n928          2018      LNS115254                                       Clover\n929          2017      LNS124714                                         Remy\n930          2018       LN833442                                          Jwl\n931          2017        LN83672                                         Bode\n932          2017      LNS123149                                       Dawson\n933          2018      LNS147073                    Kipa Ponce de Leon Bowers\n934          2018      LNS140546                                         Emmy\n935          2018       LN725140                                        Faith\n936          2018      LNS144287                                        Buddy\n937          2018       LN212625                                       Hailey\n938          2017       LN444943                                         Milo\n939          2017       LN831931                                       Baxter\n940          2018       LN202002                                        Dilly\n941          2017       LN359760                                         Otis\n942          2018       LN901755                                    Mabel Joy\n943          2018      LNS121796                                        Emily\n944          2018       LN900893                                       Pippin\n945          2018      LN8001822                                        Mocha\n946          2018      LNS129506                                        Buddy\n947          2018       LN834814                                        Bella\n948          2017        LN24638                                        Jaxon\n949          2017      LNS104897                                       Sophie\n950          2017        LN24287                                         Roxy\n951          2018      LNS128619                                       Donner\n952          2017      LNS138445                                         Jack\n953          2017       LN577326                                       Soleil\n954          2018      LN8000850                                         Odin\n955          2018        LN84026                                   Tikka Bear\n956          2018       LN281815                                         Polo\n957          2018       LN358791                                         Maya\n958          2018      LNS111406                                      Jamison\n959          2017       LN898875                                       Rupert\n960          2018      LNS121088                                      Marilyn\n961          2018      LNS105536                                 Yogi Bingman\n962          2018      LNS122764                                      Georgia\n963          2017       LN216781                                      Madison\n964          2017       LN214096                                       Pashka\n965          2018      LNS146720                                        Logan\n966          2018       LN903342                                         Joey\n967          2018        LN84139                                   Carly Rose\n968          2018       LN279463                                         Lily\n969          2017       LN902810                                         Otto\n970          2017       LN444581                                         Tuli\n971          2018      LNS146615                                         Gavy\n972          2017       LN214684                                        Sunny\n973          2018       LN829696                                         Lilo\n974          2017      LNS135365                                         Joey\n975          2018      LN8002347                                        Rocco\n976          2018      LNS143086                                          Mia\n977          2018      LNS143272                                          Tod\n978          2018       LN214747                                       Chilly\n979          2018       LN959601                                        Miles\n980          2018      LNS145381                                        Zelda\n981          2015       LN898151                                        Lucky\n982          2018      LNS109337                                     Sweetpea\n983          2016       LN142980                                       Bootsy\n984          2018       LN726564                                       Plumpy\n985          2017       LN142899                                        Riley\n986          2017       LN584861                                        Logan\n987          2018      LNS146641                                 Stevie Nicks\n988          2018      LNS145230                                        Olive\n989          2017      LNS138552                                       Cookie\n990          2017       LN213283                                        Mbali\n991          2018       LN217815                                       Maggie\n992          2018      LNS145451                                        Zaiya\n993          2018      LNS124786                                       Oliver\n994          2018      LNS110233                                         Lucy\n995          2018      LNS124525                                         Enzo\n996          2018      LNS121030                                        Simba\n997          2018      LNS128655                                         Echo\n998          2017       LN130219                                      Hershey\n999          2017       LN206942                                        Pearl\n1000         2018      LNS127243                                          Max\n1001         2017      LNS127623                                         Izzy\n1002         2018       LN359134                                          Tux\n1003         2017      LNS132218                                         Jack\n1004         2018      LNS145155                                         Ella\n1005         2018       LN828539                                         Luna\n1006         2017       LN904891                                         Juno\n1007         2018      LNS113432                                         Bane\n1008         2018       LN961231                                        Bugsy\n1009         2018      LNS116761                                       Phoebe\n1010         2018      LNS145214                                           Bo\n1011         2018       LN962062                                        Honey\n1012         2018      LNS117431                                          Ava\n1013         2018       LN431887                                       Kodiak\n1014         2017       LN444472                                        Percy\n1015         2018        LN23239                                       Barney\n1016         2017       LN731173                                         Jaro\n1017         2018       LN443536                                        Teddy\n1018         2018      LNS131627                                         Arlo\n1019         2017       LN438883                                       Willow\n1020         2018       LN131763                      Miss Moneypenny 'Penny'\n1021         2018      LNS145797                                         Olaf\n1022         2017        LN86157                                        Rylee\n1023         2018      LNS144340                                      Rainier\n1024         2018      LN8004136                                       Sophie\n1025         2018      LNS100238                                        Ozzie\n1026         2017       LN830322                                          Pia\n1027         2018      LNS143893                                        Julep\n1028         2018      LNS146551                                       Domino\n1029         2018      LNS143449                                        Petey\n1030         2018       LN583155                                        Sixer\n1031         2018      LNS139301                                     Marshall\n1032         2017      LNS100507                                        Daisy\n1033         2017       LN731879                                        Blitz\n1034         2017       LN731001                                        Daisy\n1035         2017      LNS132061                                         Finn\n1036         2018      LNS143089                                     Ezri Dax\n1037         2017      LNS126194                                        Mabel\n1038         2018      LN8000951                                       Wynnie\n1039         2018       LN442091                               Charlie Tuxedo\n1040         2018      LNS117980                                       Tortie\n1041         2018        LN83415                                         Luna\n1042         2018      LNS142619                                       Athena\n1043         2018      LNS116835                            Billi Sinni-Sappa\n1044         2017       LN209295                                       Shadow\n1045         2018      LN8003501                                        Oscar\n1046         2018      LNS105760                                 Captain Jack\n1047         2017        LN19097                                        Lolly\n1048         2017       LN276594                                         Joey\n1049         2018        LN83259                                       Watson\n1050         2017      LNS105373                                      Charlie\n1051         2018      LN8000016                                    Inky Jinx\n1052         2018      LNS146954                                         Katy\n1053         2018       LN434547                                        Benny\n1054         2017       LN443725                                        Rocco\n1055         2017       LN948374                                       Bailey\n1056         2018       LN273197                                        Ginny\n1057         2018       LN350900                                         Nika\n1058         2018       LN732074                                       Murray\n1059         2017       LN204349                                        Misty\n1060         2017       LN361363                                     Checkers\n1061         2018      LNS137894                                         Elsa\n1062         2017       LN352205                                       Quincy\n1063         2017       LN892108                                        Wyken\n1064         2017       LN817919                                        Gilda\n1065         2017      LNS131439                                         Zeke\n1066         2017      LNS100648                                       Quincy\n1067         2018       LN824689                                       Eammon\n1068         2017       LN282431                                     Meredith\n1069         2018        LN77103                                         Zola\n1070         2018       LN570929                                       Sophia\n1071         2018      LNS143292                                     Ambrosia\n1072         2018      LNS124236                                        Elise\n1073         2017      LNS103519                                     Big Suze\n1074         2018      LN8004018                                          Mew\n1075         2017       LN344900                                        Sasha\n1076         2017       LN825175                                      Tarball\n1077         2017       LN952401                                          Gus\n1078         2018       LN273623                                        Sally\n1079         2017       LN203385                                        Jilly\n1080         2018       LN204771                                       Quincy\n1081         2018       LN429481                                       George\n1082         2018        LN83326                                        Sassy\n1083         2018      LN8001722                                     Princess\n1084         2018       LN215540                                       Splash\n1085         2018       LN832332                                         Marv\n1086         2018       LN833538                                       George\n1087         2018      LNS110281                                        Arbor\n1088         2018      LNS121308                                        Daisy\n1089         2017        LN84357                                       Murphy\n1090         2018      LN8001227                               Comey Roginski\n1091         2017      LNS134097                                        Sissy\n1092         2018       LN961532                                        Tsuki\n1093         2018      LNS140431                                Leeloo Dallas\n1094         2018      LNS148150                                       Jasper\n1095         2018      LN8001353                                         Luke\n1096         2018       LN283995                                        Simba\n1097         2018      LNS122739                                         Remy\n1098         2018      LNS121554                                    Remington\n1099         2018        LN84655                                        Polly\n1100         2018      LNS137602                                       Summer\n1101         2017        LN76796                                      Scrappy\n1102         2018      LN8002748                                       Leeloo\n1103         2017      LNS125196                                        Rocco\n1104         2018      LNS116045                                       Maggie\n1105         2017       LN832988                                         Trek\n1106         2018      LNS116227                                        Junee\n1107         2018       LN957433                                         Dogg\n1108         2018      LN8002669                                         Emma\n1109         2018      LNS120907                                        Otter\n1110         2018      LNS101580                           Roco/Rambo (Angel)\n1111         2018       LN900902                                        Greta\n1112         2018      LNS144334                                        Leela\n1113         2018      LNS146893                                       London\n1114         2017       LN581835                                        Percy\n1115         2018      LNS143762                                         Pogo\n1116         2017       LN444841                                       Jasper\n1117         2018       LN136917                                        Bette\n1118         2018      LNS144855                                      Paisley\n1119         2018      LN8000290                                   Zadie Bobo\n1120         2018       LN899581                                     Brewster\n1121         2017      LNS118693                                         Odie\n1122         2017        LN81404                                        Tomas\n1123         2018      LNS144485                                     Samantha\n1124         2017      LNS138462                                         Chug\n1125         2018      LNS139004                                      Bourbon\n1126         2017      LNS139134                                       Claire\n1127         2018      LNS144022                                      Mumford\n1128         2017      LNS135021                                       Baxter\n1129         2018       LN725428                                        Dolly\n1130         2018       LN277463                                       Shayla\n1131         2016        LN82058                                  Jake Garron\n1132         2017      LNS142390                                      Custard\n1133         2017       LN278825                                        Sadie\n1134         2018      LNS101568                                     Princess\n1135         2017       LN278807                                       Boomer\n1136         2017       LN425685                                          Max\n1137         2017      LNS139143                                        Bosco\n1138         2018      LNS140243                                       La Vie\n1139         2018      LNS128832                                     Patience\n1140         2018       LN135242                                         Rain\n1141         2018      LNS142890                                       Violet\n1142         2017      LNS131376                                        Henry\n1143         2017      LNS101924                                       Potato\n1144         2018       LN443054                                        Livia\n1145         2018       LN215632                                       Hallie\n1146         2018       LN962812                                       Bechay\n1147         2018      LNS116882                                        Moxie\n1148         2018      LNS144096                                        Boris\n1149         2018      LNS130479                                         Rafe\n1150         2017       LN141747                                         Nell\n1151         2018      LNS101900                                        Liela\n1152         2018      LNS145549                                        Indie\n1153         2017       LN827302                                       Lulu 2\n1154         2018      LNS147293                                          Rue\n1155         2017       LN356426                                          Dan\n1156         2018      LNS101520                                       Caliie\n1157         2017       LN582285                                      Captain\n1158         2018      LNS120365                                        Simba\n1159         2018      LNS113413                                          Rex\n1160         2017       LN828788                               Eddie Megatron\n1161         2018      LNS135952                                       Batboy\n1162         2018       LN824428                                  Pantalaimon\n1163         2016        LN28750                                     Benjamin\n1164         2018       LN952139                                      Abigail\n1165         2016        LN22352                                     Brooklyn\n1166         2016      LNS101501                                        Buddy\n1167         2018      LNS142385                                          Max\n1168         2017       LN140148                                      Jasmine\n1169         2017       LN346530                                        Louis\n1170         2017       LN952843                                        Egypt\n1171         2018        LN22645                                         Baby\n1172         2017      LNS131431                                       Cookie\n1173         2017      LNS134352                                  Miss Fluffy\n1174         2018       LN578767                                         Peej\n1175         2018      LNS144537                                     Freckles\n1176         2018      LNS118414                                        Zosia\n1177         2017       LN273888                                       Samuel\n1178         2018       LN445421                                        Linux\n1179         2018      LNS140258                           Adam West Bakenhus\n1180         2018       LN198647                                       Patter\n1181         2017      LNS139149                                         K.T.\n1182         2018      LNS142095                                        Motor\n1183         2017        LN29162                                       Martok\n1184         2017      LNS138047                                         Jake\n1185         2018      LNS143234                                        Bella\n1186         2017      LNS135557                               Princess Daisy\n1187         2017      LNS139045                                       Gatsby\n1188         2018      LNS134978                                        Merle\n1189         2015       LN962407                                       Shadow\n1190         2017      LNS138501                                         Koda\n1191         2018      LNS106177                                        Chloe\n1192         2018       LN206951                                        Molly\n1193         2018       LN828789                                         Milo\n1194         2018      LNS141721                                      Chester\n1195         2018      LNS144842                                           Tj\n1196         2018       LN360482                                      Winston\n1197         2018      LNS103770                                          Oso\n1198         2017       LN139734                                       Edison\n1199         2018      LNS143063                                        Chloe\n1200         2018      LNS140460                                        Juneo\n1201         2017        LN82723                                         Meto\n1202         2017       LN444447                                        Goose\n1203         2018       LN830584                                        Sonic\n1204         2018      LNS143166                                        Atlas\n1205         2018      LNS148201                                        Artie\n1206         2018      LNS145640                                       Maggie\n1207         2018       LN440706                                       Cookie\n1208         2017       LN441081                                        Wafer\n1209         2018      LNS141829                                     Giovanna\n1210         2018       LN729657                                         Ruby\n1211         2017      LNS137737                                        Rosie\n1212         2017       LN584975                                        Selah\n1213         2017      LNS104754                                        Lilly\n1214         2017        LN25905                                        Bella\n1215         2017       LN216874                                        Howie\n1216         2018      LNS138180                                         Maxx\n1217         2017      LNS137738                                         Norm\n1218         2018       LN360330                                        Daisy\n1219         2017       LN280767                                      Gunther\n1220         2018       LN444762                                   Katja Levy\n1221         2018      LNS145441                                         June\n1222         2018      LNS115852                                        Ricky\n1223         2016       LN579243                                        Chunk\n1224         2018      LNS141870                                        Chief\n1225         2018       LN216898                                        Gemma\n1226         2018      LNS110236                                  Jelly Beans\n1227         2018      LNS137471                                       Peanut\n1228         2018      LNS142159                                        Oscar\n1229         2017       LN139708                                          Axl\n1230         2018      LNS144308                                     Benjamin\n1231         2017       LN358704                                        Maple\n1232         2018      LNS144198                           Princess Pristique\n1233         2017       LN957205                                      Bridget\n1234         2017      LNS138650                                       Stella\n1235         2018      LNS145615                                       Sparky\n1236         2018      LNS112227                                        Penny\n1237         2018      LNS145631                                       Gunner\n1238         2018       LN831761                                        Simba\n1239         2018      LNS103321                                         Toby\n1240         2018      LNS152173                                         Kobe\n1241         2018      LNS139462                                         Lucy\n1242         2017       LN833221                                         Ruby\n1243         2017       LN142494                                     Vasilisa\n1244         2018      LNS146510                                         Milo\n1245         2018       LN133437                                 Jada Pinkett\n1246         2018       LN439640                                         Roxy\n1247         2017        LN28758                                      Hakusen\n1248         2018      LNS146465                                 Daniel Tiger\n1249         2018      LNS134416                                         Fenn\n1250         2018      LNS139708                                         Hiro\n1251         2017       LN578976                                      Giorgio\n1252         2017        LN28170                                        Diabl\n1253         2017       LN430997                                         Lucy\n1254         2018       LN430357                                        Frida\n1255         2018      LNS142979                                      La Puma\n1256         2018       LN140438                                         Yeti\n1257         2017       LN345808                                          Eve\n1258         2017       LN268276                                       Murray\n1259         2018      LNS139782                                   Spongecake\n1260         2017       LN142118                                       Teasel\n1261         2018      LNS132843                                       Gennie\n1262         2018      LNS146095                                     Kuromame\n1263         2018       LN282458                                 Clover Pixie\n1264         2017       LN586826                                       Denali\n1265         2018      LNS124829                                        Smaug\n1266         2018       LN822992                                         Yuni\n1267         2017      LNS130485                                        Poppy\n1268         2015         LN9599                                       Ridley\n1269         2018      LN8001254                                       Cooper\n1270         2018      LNS139533                                       Jasper\n1271         2018      LN8001883                                  Zoey Fisher\n1272         2017       LN360022                                        Nacho\n1273         2017      LNS136388                                         Lucy\n1274         2018      LNS145444                                         Maui\n1275         2017       LN137922                                       Tucker\n1276         2018      LN8003472                                      Truffle\n1277         2018      LN8001288                                        Sadie\n1278         2018      LNS115428                       Thatcher Norman Shoval\n1279         2018      LNS118377                                         Blue\n1280         2018      LNS140061                                        Panda\n1281         2018      LNS143055                                  Rudy Norris\n1282         2018      LN8000758                                      Chester\n1283         2018      LN8001805                                         Lili\n1284         2017      LNS120831                                         Toby\n1285         2017      LNS138637                                       Harley\n1286         2018      LNS137954                                        Benny\n1287         2018      LNS109450                                        Mikey\n1288         2018      LNS112412                                        Nieko\n1289         2018      LN8003264                                       Payton\n1290         2018       LN359252                                       Carter\n1291         2018      LN8000608                                         Mori\n1292         2018       LN357684                                     Cromwell\n1293         2018       LN902931                                        Daisy\n1294         2018      LNS145594                                    Murgatrod\n1295         2018      LNS143083                                         Oreo\n1296         2017       LN964031                                          Rin\n1297         2018      LNS134400                                      Natalie\n1298         2017       LN202706                                        Honee\n1299         2017      LNS128386                                        Clive\n1300         2018      LN8000346                                        Talia\n1301         2017       LN282633                                         Mimi\n1302         2018      LNS134362                                Peanut Butter\n1303         2018       LN282870                                        Olive\n1304         2018      LNS142510                                        Spice\n1305         2018      LNS115315                                    Bearegard\n1306         2018      LNS147444                                        Ellie\n1307         2018      LNS106580                                    Buttercup\n1308         2017      LNS136700                                        Sukee\n1309         2017      LNS137720                                        Belle\n1310         2018        LN80017                                        Rowdy\n1311         2017       LN283046                                        Henry\n1312         2017      LNS133325                                          Zoe\n1313         2018      LN8002624                                        Moose\n1314         2017      LNS138327                                        Sonic\n1315         2017      LNS132992                                       Chewie\n1316         2018        LN26319                                        River\n1317         2018      LNS114338                                       Shadow\n1318         2018       LN904239                                       Hobbes\n1319         2017      LNS145733                                         Nala\n1320         2017       LN834358                                        Penny\n1321         2018       LN135176                                         Nani\n1322         2018      LNS143813                                        Ralph\n1323         2018       LN211704                                         Ally\n1324         2018      LNS126041                                        Molly\n1325         2018      LNS101170                                         Otis\n1326         2017      LNS127534                                        Medea\n1327         2018      LNS141353                                       Winnie\n1328         2017       LN141855                                        Penny\n1329         2016      LNS125839                                         Mika\n1330         2017      LNS105174                                        Patch\n1331         2018      LNS145526                                         Twix\n1332         2018       LN217839                                       Prince\n1333         2016      LNS125038                                         Worm\n1334         2018      LNS125629                                         Milo\n1335         2018      LNS142274                                     Hastings\n1336         2017      LNS137857                                         Theo\n1337         2017      LNS106650                                        Floyd\n1338         2018      LNS112264                                      McGrupp\n1339         2018        LN83847                                       Willow\n1340         2018      LNS145269                                        Bella\n1341         2017       LN581112                                         Loki\n1342         2017       LN282271                                        Monty\n1343         2017      LNS134980                                         Loki\n1344         2018      LNS122695                                        Flaco\n1345         2018      LNS141820                                        Honey\n1346         2018      LN8003008                                        Molly\n1347         2017      LNS137997                                         Iris\n1348         2017      LNS130441                                         Koko\n1349         2018      LNS140949                                         Lola\n1350         2018      LNS138955                                         Sati\n1351         2017      LNS137224                                        Nikko\n1352         2018      LN8002980                             Helainora Sophia\n1353         2017       LN215087                                         Roxy\n1354         2018       LN216933                                        Talya\n1355         2017      LNS134707                                         Xena\n1356         2018      LNS132233                                     Franklin\n1357         2018      LNS138434                                     Brewster\n1358         2017      LNS139114                                       DeeDee\n1359         2018      LNS145574                                         Carl\n1360         2017       LN905131                                       Cooper\n1361         2018      LN8003058                                        Layla\n1362         2018      LN8001933                                       Quincy\n1363         2018      LNS114138                                       Shorty\n1364         2018      LNS128867                                       Sierra\n1365         2018       LN216225                                        Kayla\n1366         2017        LN29804                                      Pharoah\n1367         2017      LNS102302                                         June\n1368         2017        LN79509                                         Cora\n1369         2017      LNS105523                                         Kona\n1370         2018      LN8000810                                     Guinness\n1371         2017      LNS131101                                      Gremlin\n1372         2017       LN130842                                         Cleo\n1373         2018      LNS112735                                     Garfield\n1374         2017       LN208195                                         Nell\n1375         2017       LN897989                                        Sissy\n1376         2017      LNS128317                                      Etienne\n1377         2017      LNS130861                                        Kenji\n1378         2018      LNS140483                                        Goose\n1379         2017       LN952488                                        Chloe\n1380         2018        LN77348                                          Mia\n1381         2018      LNS110134                                        Masha\n1382         2017      LNS125327                                         Kavu\n1383         2018       LN586336                                    Chewbacca\n1384         2017      LNS105317                                        Nikki\n1385         2018      LN8000826                                       Stella\n1386         2018        LN83293                                        Kelly\n1387         2018       LN353268                                        Mitzy\n1388         2018      LNS118397                                         Sumo\n1389         2018       LN273836                                        Harry\n1390         2017       LN952487                                         Nena\n1391         2018      LNS121362                                      Charlie\n1392         2018      LNS147456                               Luna Elizabeth\n1393         2017        LN22423                                       Pepper\n1394         2018      LNS147186                                    Croissant\n1395         2017       LN282723                                        Nikki\n1396         2017        LN72811                                        Suika\n1397         2015      LNS106585                                       Daisey\n1398         2018       LN199048                                    Salvadore\n1399         2018      LNS147314                                      Gandalf\n1400         2018      LNS145026                                        Cat 2\n1401         2017      LNS138527                                        Sofie\n1402         2017      LNS136243                                     Williwaw\n1403         2017       LN901162                                         Cody\n1404         2018      LNS147011                                      Charlie\n1405         2017       LN357570                                      Winston\n1406         2018      LNS138932                                       Bonnie\n1407         2018      LNS142016                             Wolfgang (Wolfy)\n1408         2018       LN140360                                       Laszlo\n1409         2018       LN731410                                        Henry\n1410         2018      LNS109645                                         Luca\n1411         2017      LNS129220                                      Freedom\n1412         2018       LN444510                                       Sparky\n1413         2017      LNS130524                                       Harley\n1414         2018      LNS119702                                       Domino\n1415         2018      LNS140210                                         Oreo\n1416         2018      LNS126704                                       Archer\n1417         2017       LN139260                                         Hugo\n1418         2018       LN352641                                         Jody\n1419         2017      LNS127920                                         Liby\n1420         2018      LNS127605                                       Sophie\n1421         2018       LN280359                                       Rainey\n1422         2017        LN27612                                        Duska\n1423         2018      LNS111734                                        Oscar\n1424         2018       LN281765                                        Rocky\n1425         2018      LNS111710                                        Honey\n1426         2018      LNS120067                                       Gunner\n1427         2017      LNS124568                                       Auggie\n1428         2018      LNS144441                                         Skip\n1429         2018       LN835060                                   Stellaluna\n1430         2018       LN721943                                         Edie\n1431         2018      LNS130216                                    Snowflake\n1432         2018       LN575785                                        Wiley\n1433         2018       LN139324                                       Cassie\n1434         2018       LN441845                                      Perkins\n1435         2018      LN8002461                                         Finn\n1436         2017      LNS127002                                       Brandy\n1437         2017       LN280570                                         Toby\n1438         2018      LNS122110                                          Mia\n1439         2017      LNS130870                                       Hagrid\n1440         2018       LN357556                                         Cody\n1441         2017       LN141622                                        Kuper\n1442         2018       LN729077                                        Edgar\n1443         2018      LNS144213                                         Jack\n1444         2017      LNS138619                                         Rita\n1445         2017       LN212808                                         Lola\n1446         2018        LN24824                                      Jackson\n1447         2018      LNS143511                                        Rufio\n1448         2017      LNS108175                                       Deanie\n1449         2018      LNS147000                                       Snooks\n1450         2018      LN8002586                                        Raven\n1451         2018       LN728639                                        Rover\n1452         2017      LNS102845                                          Zoe\n1453         2017      LNS126260                                        Daisy\n1454         2018       LN903484                                      Jameson\n1455         2018       LN584932                                         Lily\n1456         2018      LNS139771                                        Sasha\n1457         2017       LN831077                                       Sophie\n1458         2018      LN8002787                                       Arthur\n1459         2018      LNS102642                                         Lola\n1460         2018       LN357199                                       Shadow\n1461         2018       LN140835                                         Zage\n1462         2017       LN441175                                     Precious\n1463         2018      LNS140635                                        Sunny\n1464         2017      LNS138913                                         Theo\n1465         2018       LN951784                                        Chico\n1466         2018      LN8001787                                Puppy Brother\n1467         2017       LN211172                                  Maggie Rose\n1468         2017       LN957017                                        Banjo\n1469         2018      LNS109709                                  Genji Umali\n1470         2018      LN8002246                                   Gryffindor\n1471         2016      LNS110272                                         Onyx\n1472         2017      LNS128158                                        Cindy\n1473         2017      LNS130019                                        Gemma\n1474         2017       LN137898                                      Sanders\n1475         2018      LN8000567                                        Squid\n1476         2017      LNS133114                                         Edom\n1477         2017        LN73128                                       Muffin\n1478         2018      LN8001800                                        Sally\n1479         2017      LNS101291                                     Poo Ying\n1480         2018      LNS152300                                        Mango\n1481         2018       LN730557                                        Binks\n1482         2018      LN8003899                                         Jake\n1483         2018      LN8003147                                       Reggie\n1484         2017      LNS134309                                        Dolly\n1485         2018      LNS145719                                      Madison\n1486         2018       LN568884                                       Jackie\n1487         2018      LNS143701                                      Jasmine\n1488         2018      LNS119067                                       Elphie\n1489         2017       LN833015                                        Avery\n1490         2017       LN277234                                       Tigger\n1491         2018       LN142129                                        Mocha\n1492         2017      LNS131114              Maxwell Silver Hammerstrom-Guel\n1493         2018       LN730558                                       Smudge\n1494         2018      LN8003902                                       Jasper\n1495         2018      LNS112737                                        Meena\n1496         2018      LNS144202                                          Ray\n1497         2017       LN731383                                         Bemo\n1498         2018       LN962598                                     Thatcher\n1499         2017       LN577911                                        Atari\n1500         2017       LN896211                                       Hannah\n1501         2017       LN949254                                       Stitch\n1502         2018      LN8000445                                        Luigi\n1503         2017      LNS105685                                        Mocha\n1504         2017      LNS133345                                         Ally\n1506         2018       LN727923                                        Tasha\n1507         2018      LNS145837                                      Monster\n1508         2018       LN944960                                     Rocky IV\n1509         2017       LN584070                                       Maggie\n1510         2018      LNS143264                                    Lulabelle\n1511         2017       LN576860                                      Skipper\n1512         2018        LN86261                                         Kuma\n1513         2017      LNS132770                                         Bird\n1514         2018      LNS140235                                         Kona\n1515         2018      LN8003134                                         Arya\n1516         2018      LNS113102                                         Kirk\n1517         2018      LNS140550                                       Farmer\n1518         2018      LNS142134                                       Oxford\n1519         2018      LNS145181                                        Izzie\n1520         2018      LNS128797                                        Bella\n1521         2018       LN960337                                         Luna\n1522         2018      LNS117162                                        Penny\n1523         2018      LNS144685                                        Zooey\n1524         2018      LNS129868                                       Buster\n1525         2018      LNS138449                                         Maxx\n1526         2018      LNS147792                                   Blackberry\n1527         2018       LN134273                                      Spencer\n1528         2018      LNS147123                                    Sonny Lee\n1529         2017      LNS104231                                        Steve\n1530         2018      LNS142348                                          Bob\n1531         2018        LN29933                                      Charlie\n1532         2018       LN725389                                        Ellie\n1533         2018       LN904884                                        Penny\n1534         2018       LN441875                                        Edgar\n1535         2017       LN444830                                        Hanna\n1536         2018       LN137333                                         Finn\n1537         2018      LNS109832                                         Lucy\n1538         2017        LN24007                                        Rocco\n1539         2017        LN25600                                         Lobo\n1540         2017      LNS126781                                      Grommet\n1541         2018      LNS144834                                     Iggy Pup\n1542         2018      LNS138044                                      Bentley\n1543         2018      LNS113809                                         Abby\n1544         2018      LNS132307                                       Rocket\n1545         2018        LN27142                                      Ketchup\n1546         2018      LNS119581                         Scotty Smalls Sweeny\n1547         2018       LN283897                                       Apollo\n1548         2017       LN215802                                         Mina\n1549         2016      LNS124550                                      Puggles\n1550         2017      LNS132664                                        Reyka\n1551         2018      LN8003607                                     Tallulah\n1552         2018      LNS141258                                        Cohen\n1553         2018       LN731194                                         Gigi\n1554         2018       LN137103                                       Punkin\n1555         2018       LN726628                                        Abbie\n1556         2017      LNS130272                                          Pip\n1557         2018      LNS146382                                        Sadie\n1558         2018      LN8000807                                      Charlie\n1559         2018      LNS144835                                     Isabelle\n1560         2018       LN274480                                        Betsy\n1561         2018      LNS120164                                         Lucy\n1562         2018      LN8003880                                         Loka\n1563         2017        LN28606                                        Elsie\n1564         2018      LNS150141                                        Louie\n1565         2018       LN715043                                       Cooper\n1566         2018       LN956951                                       Witten\n1567         2017       LN569968                                        Rocky\n1568         2017        LN22589                                        Penny\n1569         2018      LNS112919                                        Ashia\n1570         2018       LN896716                                         Ruby\n1571         2018       LN129101                                    Lady Chat\n1572         2018      LNS145957                                     Reginald\n1573         2017       LN898454                                      Stinker\n1574         2016        LN22082                   Mattie (formerly Sergeant)\n1575         2017       LN133474                                      Lemieux\n1576         2018      LNS136776                                          Bee\n1577         2018      LNS138026                                         Blue\n1578         2017      LNS104761                                    Allie Cat\n1579         2018      LNS146992                                       Hunter\n1580         2018      LNS140540                            Nomar Garciaparra\n1581         2017      LNS106646                                Max Cat Eyler\n1582         2018      LNS104048                                       Kirito\n1583         2017      LNS127776                                          Eli\n1584         2018       LN823790                                    Uncle Gus\n1585         2015       LN892856                                         Lexy\n1586         2018      LN8003503                                      Schumer\n1587         2018      LNS139393                                       Zander\n1588         2018       LN730467                                        Moxee\n1589         2018      LNS134657                                       Laurel\n1590         2018      LNS139603                                         T.K.\n1591         2016       LN957804                                       Trilby\n1592         2018      LNS129715                                        Susie\n1593         2018       LN722752                                     Freckles\n1594         2017      LNS127805                                       Hudson\n1595         2018       LN728511                                       Maddie\n1596         2018      LNS115225                                         Kuja\n1597         2018       LN217890                                          Joy\n1598         2017      LNS129210                                         Mico\n1599         2018       LN358763                                      Chicken\n1600         2018       LN733258                                      Charlie\n1601         2018      LNS143706                                     Guinness\n1602         2018      LN8001598                                        Bijou\n1603         2018       LN209705                                        Sonny\n1604         2017        LN30023                                        Savvy\n1605         2018       LN441437                                       Potato\n1606         2017       LN132789                                       Baxter\n1607         2018      LNS139201                                         Toby\n1608         2017      LNS117108                                    Honey-Bea\n1609         2018      LNS138081                                     Chiquita\n1610         2018      LNS143881                                        Bella\n1611         2018      LNS105304                                        Bandi\n1612         2018      LNS139777                                        Bubba\n1613         2018       LN961373                                        Midna\n1614         2018      LNS147239                                   Adam Hooch\n1615         2018       LN954872                                        Riley\n1616         2017      LNS130405                                      Sukoshi\n1617         2018       LN441002                                         Blue\n1618         2018      LNS138162                                       Sophie\n1619         2018      LNS128012                                         Luka\n1620         2018      LNS109219                                         Nala\n1621         2017       LN359993                                    Cy Murray\n1622         2018      LNS120095                                          Tad\n1623         2018      LN8000022                                       Xander\n1624         2018      LNS126021                                         Jack\n1625         2018      LNS119537                                         Lucy\n1626         2018      LN8001459                                      Martini\n1627         2018      LNS125714                                        Quark\n1628         2017       LN137770                                        Abbie\n1629         2018      LNS106359                                   Maggie Mae\n1630         2018      LNS135822                                       O*Zone\n1631         2018       LN715708                                        Mango\n1632         2017       LN897332                                       Muffin\n1633         2018      LNS144722                                         Sami\n1634         2017       LN353589                                        Frodo\n1635         2018      LNS145412                                         Fred\n1636         2018       LN896974                                       Squirt\n1637         2017       LN817929                                        Salsa\n1638         2018       LN444880                                     Knuckles\n1639         2018      LNS109218                                   Tinkerbell\n1640         2018      LNS141191                                          Max\n1641         2017       LN361150                                      Charlie\n1642         2018       LN897456                                       Sufjan\n1643         2018      LNS129759                                     June Bug\n1644         2018       LN127256                                        Sushi\n1645         2018      LNS146798                                        Delta\n1646         2018       LN349052                                         Enzo\n1647         2018       LN833417                                    Sylvester\n1648         2018      LNS147712                                      Anthony\n1649         2018      LNS121162                                         Oreo\n1650         2017       LN832743                                      Diamond\n1651         2018      LNS120107                                         Posh\n1652         2018      LNS126338                                   Merseyside\n1653         2018      LNS128711                                        Raina\n1654         2018       LN571386                                        Socks\n1656         2018      LNS119803                                        Dewey\n1657         2018       LN359159                                         Kira\n1658         2018      LN8003017                                        Chewy\n1659         2017      LNS104072                                      Eleanor\n1660         2018       LN137052                                       Aamira\n1661         2017       LN584763                                        Sooie\n1662         2017      LNS133160                                        Penny\n1663         2018      LNS143661                                       Tucker\n1664         2017      LNS126160                                       Pepper\n1665         2018       LN195716                                       Stormy\n1666         2018      LNS110486                                 Eva Godzilla\n1667         2017        LN81432                                        Perry\n1668         2018      LNS143390                                        Rosie\n1669         2018      LNS116898                                      Jeffrey\n1670         2018      LNS111284                                         Jack\n1671         2018      LNS114705                                        Tater\n1672         2017      LNS101091                                       Winnie\n1673         2017      LNS107848                                        Angus\n1674         2017       LN139540                                         Coco\n1675         2018       LN282025                                        Socks\n1676         2018      LNS125353                                        Bones\n1677         2018      LNS139148                                      Gryffin\n1678         2018      LN8003610                                       Bandit\n1679         2017       LN834408                                     Jacques2\n1680         2017       LN444854                                         Chip\n1681         2016      LNS125111                                         Saki\n1682         2018      LNS116942                                       Lakota\n1683         2018      LNS101064                                       Bailey\n1684         2018      LN8000424                                         Ezra\n1685         2018      LNS131011                                      Frasier\n1686         2017        LN79188                                       Aldwyn\n1687         2017       LN355844                                         Ruby\n1688         2018       LN438361                                       Ginger\n1689         2018      LN8000454                               Rena Nofsinger\n1690         2018      LNS105179                                        Kylie\n1691         2017      LNS130196                                     Megatron\n1692         2016      LNS141745                                         Jack\n1693         2017       LN274562                                        Bucky\n1694         2017       LN137703                                          Jay\n1695         2017       LN834616                                       Boomer\n1696         2018      LN8002649                                      Gabbana\n1697         2017       LN436215                                       Rollie\n1698         2018      LN8002131                                         Lexi\n1699         2018      LNS130433                                        Riley\n1700         2017      LNS105932                                       Jackie\n1701         2018      LNS145364                                        Frodo\n1702         2017       LN897212                                           Pi\n1703         2017       LN949532                                       Dexter\n1704         2018      LN8004242                                         Honu\n1705         2017      LNS105352                                         Abby\n1706         2018        LN22176                                      Pandora\n1707         2017        LN74004                                         Tiny\n1708         2016       LN948401                                        Lizzy\n1709         2018       LN954242                                       Cassie\n1710         2018       LN127565                                         Lola\n1711         2017      LNS100309                                          Mab\n1712         2018      LNS120286                                      Siamese\n1713         2018      LNS139623                                          Rin\n1714         2018       LN578076                                       Tucker\n1715         2018      LN8003257                                       Walter\n1716         2017      LNS137809                                       Fawkes\n1717         2018       LN208581                                       Bailey\n1718         2018      LNS148156                                         Lily\n1719         2017       LN215241                                  Lady Snoops\n1720         2018       LN204053                                         Nick\n1721         2017      LNS105267                                        Boris\n1722         2017        LN27145                                     Angelina\n1723         2018      LNS139697                                        Simon\n1724         2017        LN86396                                      Nettles\n1725         2017       LN826914                                       Stella\n1726         2018       LN585422                                         Izzy\n1727         2018      LNS123939                                          Ivy\n1728         2018       LN138311                                       Kaycee\n1729         2017      LNS103533                                     Princess\n1730         2018       LN958481                                     Zephyr B\n1731         2018      LNS101183                                        Babee\n1732         2017      LNS121826                                       George\n1733         2018       LN439938                                        Josie\n1734         2017       LN435652                                       Olivia\n1735         2017       LN898784                                     Finnegan\n1736         2017      LNS133527                                        Daisy\n1737         2017      LNS138605                                        Livia\n1738         2018       LN834742                                     Beatrice\n1739         2017       LN438714                                          Moe\n1740         2017      LNS101802                                        Roman\n1741         2018      LNS144493                                         Lucy\n1742         2018        LN81603                                        Yoshi\n1743         2017      LNS106601                                        Ellie\n1744         2018      LNS143406                                      Jacques\n1745         2017       LN279328                                        Ninja\n1746         2018      LNS127110                                        Beebo\n1747         2018      LN8004150                                          Mac\n1748         2017      LNS135737                                          Rio\n1749         2018      LNS144139                                          Ivy\n1750         2018      LN8003398                                        Nixon\n1751         2017        LN82764                                          Nix\n1752         2018      LNS145800                                         Luca\n1753         2018      LNS146317                                        Daisy\n1754         2018       LN213996                        Muji Hopalong Pancake\n1755         2017       LN139386                                       Baxter\n1756         2018        LN30025                                       Friday\n1757         2018      LNS129934                                         Luke\n1758         2018      LNS140232                                       Nellie\n1759         2017        LN83950                                         June\n1760         2018      LNS143341                                       Auntie\n1761         2018      LNS143466                                        Addie\n1762         2016       LN133111                                Dog Horse El.\n1763         2018      LNS125230                                     Hamilton\n1764         2018      LNS146853                                        Pablo\n1765         2016      LNS119164                                    Snowflake\n1766         2018      LN8000802                                       Biggie\n1767         2017      LNS136955                                        Merle\n1768         2018      LNS109257                                       Minnie\n1769         2018      LNS138598                                       George\n1770         2018      LNS104449                                     Leonidas\n1771         2018      LNS111200                                      Winston\n1772         2017       LN272430                                     Samantha\n1773         2018       LN128543                                        Chibi\n1774         2017       LN952033                                Princess Anne\n1775         2018      LNS141730                                  Lowell Katz\n1776         2018      LNS121761                                           Jr\n1777         2018      LNS112922                                        Chile\n1778         2018       LN954627                                        Bella\n1779         2018       LN281239                                        Ponyo\n1780         2017       LN834364                                       Chacha\n1781         2018      LNS111231                                         Gaia\n1782         2017      LNS103006                                       Maggie\n1783         2018        LN81944                                        Annie\n1784         2018      LNS117873                                  Moti Harvey\n1785         2017      LNS138901                                          Jax\n1786         2017      LNS129402                                       Dexter\n1787         2017       LN731505                                       Hudson\n1788         2017      LNS132359                                       Rooney\n1789         2018       LN904502                                        Gabby\n1790         2018       LN825996                                   Teddy Bear\n1791         2018      LN8000008                                      Cthulhu\n1792         2017       LN142546                                        Freda\n1793         2018      LNS138579                                        Tansy\n1794         2018       LN276929                                      Aaliyah\n1795         2017       LN824180                                        Zorro\n1796         2017        LN28811                                         Dory\n1797         2017       LN134163                                          Lbj\n1798         2018       LN138818                                        Zelda\n1799         2018      LN8000231                                         Levi\n1800         2017      LNS111454                                         Lana\n1801         2017      LNS133860                                          Max\n1802         2017        LN79580                                         Luci\n1803         2017       LN359686                                    Sally Mae\n1804         2017      LNS106366                                        Diego\n1805         2018        LN26994                                       Nanook\n1806         2018       LN731263                                      Empress\n1807         2018       LN443513                                       Nikita\n1808         2017       LN904899                                        Henry\n1809         2017      LNS131312                                         Kubo\n1810         2018      LNS140406                                      Sounder\n1811         2018      LNS146230                                         Ruby\n1812         2017        LN79430                                       Friend\n1813         2018      LNS142836                                       Harper\n1814         2018       LN358038                                   Oliver Max\n1815         2018      LNS140211                                         Luna\n1816         2018       LN137890                                       Athena\n1817         2017      LNS127904                                        Keira\n1818         2017      LNS127192                                   Riley Rose\n1819         2018      LNS136966                                      Gremlie\n1820         2018      LNS142432                                       Trixie\n1821         2018       LN583550                                        Henry\n1822         2017       LN361023                                       Tillie\n1823         2017       LN360510                                        Happy\n1824         2018       LN216410                                         Remy\n1825         2017        LN84038                                    Annabelle\n1826         2018       LN584962                                          Mae\n1827         2018      LNS115857                                         Coal\n1828         2018       LN347482                                          Ned\n1829         2018       LN134082                                      Houdini\n1830         2018      LN8001168                           Moonstone Whistler\n1831         2016        LN73451                                Frank Sinatra\n1832         2018        LN19183                                        Spike\n1833         2017       LN133006                                        Melon\n1834         2018       LN897925                                         Dory\n1835         2017       LN347240                                          Mia\n1836         2018        LN73589                                       Snoopy\n1837         2017      LNS134716                                       Sophie\n1838         2018      LNS108287                                        Kiria\n1839         2017       LN361201                                      Dickens\n1840         2018      LNS128022                                      Artemis\n1841         2018      LN8000908                                         Remy\n1842         2017      LNS130508                                         Tina\n1843         2018      LNS143357                                       Apollo\n1844         2017      LNS133425                                         Kain\n1845         2018      LNS123714                                         Remi\n1846         2018      LNS109223                                    Annabelle\n1847         2018      LNS115509                                       Rawlie\n1848         2018      LNS144716                                          Leo\n1849         2018      LN8002215                                          Key\n1850         2018      LNS140667                                       Soappy\n1851         2017      LNS125005                                    Deaf Jeff\n1852         2018       LN217558                                       Damien\n1853         2017       LN732743                               Bruce Campbell\n1854         2018      LNS145105                                      Cupcake\n1855         2018       LN715343                                          Boo\n1856         2018      LNS144336                                       Sonnet\n1857         2017        LN26763                                         Nalu\n1858         2015       LN964536                                         Rudy\n1859         2018      LN8002102                                       Dexter\n1860         2017      LNS106813                                         Mika\n1861         2017      LNS135395                                         Lexi\n1862         2018      LN8001550                                       Pepper\n1863         2017      LNS132000                                        Aspen\n1864         2018       LN136914                                         Luna\n1865         2018      LNS109690                                      Dorothy\n1866         2018       LN905497                                        Libby\n1867         2018      LNS113796                                         Zuul\n1868         2018      LNS142064                                         Remi\n1869         2018      LNS101926                                     Penelope\n1870         2017      LNS127723                                       Stewie\n1871         2018      LN8000950                                       Kenzee\n1872         2018      LNS139561                                        Macie\n1873         2018      LN8002370                                      Bentley\n1874         2018      LNS146573                                      Georgia\n1875         2017      LNS136376                                        Maple\n1876         2018        LN24441                                        Mocha\n1877         2018       LN359541                                         Aldo\n1878         2017       LN138064                                        Annie\n1879         2018      LNS143111                                       Pippin\n1880         2018      LNS102698                                         Kuma\n1881         2018       LN213964                                          Max\n1882         2018      LNS144234                                       Hailey\n1883         2017       LN141418                                        Linus\n1884         2018      LNS143863                                       Sophie\n1885         2018      LNS113064                                       Muffin\n1886         2017      LNS129787                                        Fritz\n1887         2018      LNS140845                                        Rosie\n1888         2018       LN443297                                       Zennor\n1889         2018      LNS104075                                       Bonnie\n1890         2018       LN960177                                        Jelli\n1891         2018      LNS113276                                        Rosie\n1892         2016        LN22873                                        Molly\n1893         2018       LN216244                                      Jasmine\n1894         2018      LNS139939                                         Ludo\n1895         2017      LNS108592                                         Colt\n1896         2018       LN211677                                        Mango\n1897         2016       LN132101                                       Jordon\n1898         2016        LN24880                                      Charlie\n1899         2018      LNS110653                                       Buster\n1900         2017       LN834695                                      Neville\n1901         2017      LNS126073                                      Bingley\n1902         2018      LNS118615                                       Cooper\n1903         2017      LNS130587                                       Stewie\n1904         2018        LN80564                                        Belle\n1905         2017      LNS132475                                       Cookie\n1906         2018        LN30036                                        Fritz\n1907         2018      LN8000964                                         Iris\n1908         2018      LNS145458                                      Emmylou\n1909         2018      LNS151144                                       Stella\n1910         2017       LN140256                                     Finnegan\n1911         2017       LN582368                                      Charlie\n1912         2017       LN580434                                       Wolfen\n1913         2018       LN905902                                        Lucia\n1914         2017      LNS120344                                      Cheerio\n1915         2018      LN8000295                                       Porter\n1916         2016      LNS101770                                    Tartufalo\n1917         2018        LN23815                                       Pippin\n1918         2018        LN20141                                        Penny\n1919         2018      LNS142990                                       Shadow\n1920         2018      LNS120444                                       Martha\n1921         2017      LNS126458                                     Michelle\n1922         2018       LN896435                                        Middy\n1923         2018       LN824777                                         Huck\n1924         2018      LN8002143                                      Bernice\n1925         2017      LNS134970                                         Luna\n1926         2018       LN204831                                         Macy\n1927         2018       LN350730                                      Beatrix\n1928         2017       LN142046                                       Maizey\n1929         2017       LN198426                                       Zomkio\n1930         2018       LN346553                                       Jessie\n1931         2017      LNS133445                                       Audrey\n1932         2018      LNS100824                                      Pumpkin\n1933         2016      LNS123828                                      Scrappy\n1934         2017      LNS105939                                       Dakota\n1935         2017       LN142282                                       Phoebe\n1936         2018      LNS136786                                       Duffle\n1937         2018      LNS146312                                       Stuart\n1938         2016       LN948984                                        Simba\n1939         2018      LNS110094                                         Suki\n1940         2018      LNS139753                                      Freddie\n1941         2017      LNS104916                                         Sage\n1942         2018      LNS127544                                      Thunder\n1943         2018       LN822802                                 Debbie Hairy\n1944         2017        LN18581                                        Allie\n1945         2017       LN949953                                      Jackson\n1946         2018      LNS145479                                       Nutmeg\n1947         2018      LNS139776                                       Pepper\n1948         2018      LNS147256                                   Jo Montana\n1949         2018      LNS147257                                       Django\n1950         2018       LN586530                                     Starbuck\n1951         2017       LN203680                                         Lena\n1952         2018       LN720485                                    Mish Mish\n1953         2018      LN8000356                                     Cinnamon\n1954         2017      LNS105554                                      Winston\n1955         2018      LNS114676                       Chedi Club Tanah Gajah\n1956         2017      LNS101611                                     Emi-chan\n     species                                  primary_breed\n1        Dog                                          Boxer\n2        Dog                                   Bichon Frise\n3        Dog                                            Mix\n4        Dog                            Australian Shepherd\n5        Dog                          Chihuahua, Short Coat\n6        Dog                            Retriever, Labrador\n7        Dog                                     Lhasa Apso\n8        Dog                                        Basenji\n9        Dog                                            Pug\n10       Dog                           Schnauzer, Miniature\n11       Dog                          Chihuahua, Short Coat\n12       Dog                                       Havanese\n13       Dog                            Retriever, Labrador\n14       Dog                                      Chow Chow\n15       Dog                                      Shiba Inu\n16       Dog                               Chinese Shar-Pei\n17       Dog                                Coton de Tulear\n18       Dog                              Retriever, Golden\n19       Dog                             Terrier, Yorkshire\n20       Dog                          Chihuahua, Short Coat\n21       Dog                                  Border Collie\n22       Cat                                       Siberian\n23       Cat                                   Russian Blue\n24       Cat                                      Himalayan\n25       Cat                                     Maine Coon\n26       Cat                              Domestic Longhair\n27       Cat                             Domestic Shorthair\n28       Cat                              Domestic Longhair\n29       Cat                             Domestic Shorthair\n30       Cat                             Domestic Shorthair\n31       Cat                              Domestic Longhair\n32       Cat                                     Maine Coon\n33       Dog                     Terrier, American Pit Bull\n34       Dog                               Poodle, Standard\n35       Dog                          Australian Cattle Dog\n36       Dog                              Poodle, Miniature\n37       Dog                                        Bulldog\n38       Dog                          Terrier, Jack Russell\n39       Dog                                      Shiba Inu\n40       Dog                            Retriever, Labrador\n41       Dog                     Terrier, American Pit Bull\n42       Dog                               Poodle, Standard\n43       Dog   Mixed Breed, Large (over 44 lbs fully grown)\n44       Dog                                     Pomeranian\n45       Dog             Dachshund, Miniature Smooth Haired\n46       Dog                                        Terrier\n47       Dog                            Retriever, Labrador\n48       Dog                            Retriever, Labrador\n49       Dog                                  Affenpinscher\n50       Dog                                       Shih Tzu\n51       Dog                                  Border Collie\n52       Dog                                       Havanese\n53       Dog                                   Terrier, Rat\n54       Dog                            Australian Shepherd\n55       Dog                              Shetland Sheepdog\n56       Dog                                   Bichon Frise\n57       Dog                             Norwegian Elkhound\n58       Dog                           Bernese Mountain Dog\n59       Dog                                       Keeshond\n60       Dog                              Retriever, Golden\n61       Dog                            Retriever, Labrador\n62       Dog                          Australian Cattle Dog\n63       Dog                                      Chow Chow\n64       Dog                          Chihuahua, Short Coat\n65       Dog                                 Xoloitzcuintli\n66       Dog                 Australian Shepherd, Miniature\n67       Dog                              Retriever, Golden\n68       Dog                                            Mix\n69       Dog                               Poodle, Standard\n70       Dog                                 Terrier, Silky\n71       Cat                           Domestic Medium Hair\n72       Cat                             Domestic Shorthair\n73       Cat                                         LaPerm\n74       Cat                             Domestic Shorthair\n75       Cat                             Domestic Shorthair\n76       Cat                                            Mix\n77       Cat                           Domestic Medium Hair\n78       Cat                             Domestic Shorthair\n79       Cat                             Domestic Shorthair\n80       Cat                                        Ragdoll\n81       Cat                             American Shorthair\n82       Cat                                            Mix\n83       Cat                           Domestic Medium Hair\n84       Cat                             Domestic Shorthair\n85       Cat                             Domestic Shorthair\n86       Cat                             Domestic Shorthair\n87       Cat                             Domestic Shorthair\n88       Cat                             Domestic Shorthair\n89       Cat                           Domestic Medium Hair\n90       Cat                           Domestic Medium Hair\n91       Cat                                   Egyptian Mau\n92       Cat                                            Mix\n93       Cat                             Domestic Shorthair\n94       Dog                                       Shepherd\n95       Dog                                          Hound\n96       Dog                              Poodle, Miniature\n97       Dog                                         Beagle\n98       Dog                                         Beagle\n99       Dog                                Bulldog, French\n100      Dog                 Spaniel, Cavalier King Charles\n101      Dog                              Poodle, Miniature\n102      Dog                          Chihuahua, Short Coat\n103      Dog                               Spaniel, Tibetan\n104      Dog                            Retriever, Labrador\n105      Dog                          Australian Cattle Dog\n106      Dog                            Retriever, Labrador\n107      Dog                Dachshund, Standard Wire Haired\n108      Dog                                German Shepherd\n109      Dog                      Spaniel, English Springer\n110      Dog                                  Border Collie\n111      Dog                                      Chow Chow\n112      Dog                                         Beagle\n113      Dog                            Retriever, Labrador\n114      Dog                                        Terrier\n115      Dog                                 Siberian Husky\n116      Dog                                German Shepherd\n117      Dog                                         Briard\n118      Dog                             Miniature Pinscher\n119      Dog                            Retriever, Labrador\n120      Dog            Retriever, Nova Scotia Duck Tolling\n121      Dog                          Chihuahua, Short Coat\n122      Dog                Dachshund, Standard Long Haired\n123      Dog                                      Beauceron\n124      Dog                                  Border Collie\n125      Dog                              Terrier, Pit Bull\n126      Dog                                  Border Collie\n127      Dog                                   Bichon Frise\n128      Dog                                     Pomeranian\n129      Dog                            Retriever, Labrador\n130      Dog                                      Pekingese\n131      Dog                 Spaniel, Cavalier King Charles\n132      Dog                            Australian Shepherd\n133      Dog                            Retriever, Labrador\n134      Dog                            Retriever, Labrador\n135      Dog                                     Pomeranian\n136      Dog                            Rhodesian Ridgeback\n137      Dog                                 Siberian Husky\n138      Dog                                      Greyhound\n139      Dog                     Greater Swiss Mountain Dog\n140      Dog   Mixed Breed, Large (over 44 lbs fully grown)\n141      Dog   Mixed Breed, Large (over 44 lbs fully grown)\n142      Dog                            Retriever, Labrador\n143      Dog                                       Shih Tzu\n144      Dog                                          Boxer\n145      Dog                       Spaniel, American Cocker\n146      Dog                 Australian Shepherd, Miniature\n147      Dog                                  Border Collie\n148      Dog                                        Terrier\n149      Dog                                     Pomeranian\n150      Dog                          Chihuahua, Short Coat\n151      Dog                                          Hound\n152      Dog                                   Basset Hound\n153      Dog                            Retriever, Labrador\n154      Dog             Dachshund, Miniature Smooth Haired\n155      Dog                                  Cur, Mountain\n156      Dog                                       Papillon\n157      Dog                                        Maltese\n158      Dog                Terrier, American Staffordshire\n159      Dog                            Retriever, Labrador\n160      Dog                                      Retriever\n161      Dog                          Vizsla, Smooth Haired\n162      Dog                          Australian Cattle Dog\n163      Dog                                 Terrier, Cairn\n164      Dog                                   Bichon Frise\n165      Dog                                            Pug\n166      Dog              Dachshund, Standard Smooth Haired\n167      Dog                     Terrier, American Pit Bull\n168      Dog                                Terrier, Boston\n169      Dog                            Retriever, Labrador\n170      Dog                            Australian Shepherd\n171      Dog                                German Shepherd\n172      Dog                                      Retriever\n173      Dog                                       Papillon\n174      Dog                 Australian Shepherd, Miniature\n175      Dog                                         Beagle\n176      Dog                            Retriever, Labrador\n177      Dog                              Retriever, Golden\n178      Dog                            Retriever, Labrador\n179      Dog                               Schnauzer, Giant\n180      Dog                                American Eskimo\n181      Dog                            Australian Shepherd\n182      Dog                             Miniature Pinscher\n183      Dog                              Retriever, Golden\n184      Dog                     Terrier, American Pit Bull\n185      Dog                            Retriever, Labrador\n186      Dog                                   Bichon Frise\n187      Dog                          Australian Cattle Dog\n188      Dog                            Australian Shepherd\n189      Dog                                   Newfoundland\n190      Dog                            Retriever, Labrador\n191      Dog                                            Pug\n192      Dog                          Chihuahua, Short Coat\n193      Cat                             Domestic Shorthair\n194      Cat                             Domestic Shorthair\n195      Cat                             Domestic Shorthair\n196      Cat                             Domestic Shorthair\n197      Cat                             Domestic Shorthair\n198      Cat                             Domestic Shorthair\n199      Cat                              Domestic Longhair\n200      Cat                             Domestic Shorthair\n201      Cat                             Domestic Shorthair\n202      Cat                             American Shorthair\n203      Cat                             Domestic Shorthair\n204      Cat                                     Maine Coon\n205      Cat                              Domestic Longhair\n206      Cat                             Domestic Shorthair\n207      Cat                             Domestic Shorthair\n208      Cat                             Domestic Shorthair\n209      Cat                             Domestic Shorthair\n210      Cat                             Domestic Shorthair\n211      Cat                             Domestic Shorthair\n212      Cat                             Domestic Shorthair\n213      Cat                             Domestic Shorthair\n214      Cat                             Domestic Shorthair\n215      Cat                                     Maine Coon\n216      Cat                           Domestic Medium Hair\n217      Cat                             Domestic Shorthair\n218      Cat                             Domestic Shorthair\n219      Cat                             Domestic Shorthair\n220      Cat                             Domestic Shorthair\n221      Cat                           Domestic Medium Hair\n222      Cat                                        Ragdoll\n223      Cat                                            Mix\n224      Cat                             Domestic Shorthair\n225      Cat                              Domestic Longhair\n226      Cat                              Domestic Longhair\n227      Cat                             Domestic Shorthair\n228      Cat                                        Siamese\n229      Cat                             Domestic Shorthair\n230      Cat                             Domestic Shorthair\n231      Cat                             Domestic Shorthair\n232      Cat                             Domestic Shorthair\n233      Cat                              Domestic Longhair\n234      Cat                             Domestic Shorthair\n235      Cat                             Domestic Shorthair\n236      Cat                           Domestic Medium Hair\n237      Cat                             Domestic Shorthair\n238      Cat                             American Shorthair\n239      Cat                             Domestic Shorthair\n240      Dog                              Retriever, Golden\n241      Dog                            Retriever, Labrador\n242      Dog                                 Terrier, Cairn\n243      Dog                                        Terrier\n244      Dog                                      Shiba Inu\n245      Dog                                 Siberian Husky\n246      Dog                                   Terrier, Rat\n247      Dog                          Chihuahua, Short Coat\n248      Dog                                        Terrier\n249      Dog                                     Lhasa Apso\n250      Dog                                Terrier, Boston\n251      Dog                          Terrier, Jack Russell\n252      Dog                                       Shih Tzu\n253      Dog                                   Newfoundland\n254      Dog                                       Keeshond\n255      Cat                                     Abyssinian\n256      Cat                           Domestic Medium Hair\n257      Cat                             American Shorthair\n258      Cat                                       Balinese\n259      Cat                             Domestic Shorthair\n260      Cat                           Domestic Medium Hair\n261      Cat                             Domestic Shorthair\n262      Cat                              Domestic Longhair\n263      Cat                             Domestic Shorthair\n264      Cat                             Domestic Shorthair\n265      Dog                Dachshund, Standard Long Haired\n266      Dog                                     Rottweiler\n267      Dog                              Retriever, Golden\n268      Dog                                    Poodle, Toy\n269      Dog                                German Shepherd\n270      Dog                              Retriever, Golden\n271      Dog                            Retriever, Labrador\n272      Dog                       Spaniel, American Cocker\n273      Dog                                       Shih Tzu\n274      Dog                            Retriever, Labrador\n275      Dog                                German Shepherd\n276      Dog                            Retriever, Labrador\n277      Dog                            Australian Shepherd\n278      Dog                            Retriever, Labrador\n279      Dog                                  Border Collie\n280      Dog                                     Lhasa Apso\n281      Dog                               Terrier, Tibetan\n282      Dog                                 Terrier, Silky\n283      Dog                               Spaniel, Tibetan\n284      Dog                           Chihuahua, Long Coat\n285      Dog                     Terrier, American Pit Bull\n286      Dog                                    Poodle, Toy\n287      Dog                                       Havanese\n288      Dog                            Australian Shepherd\n289      Dog                            Retriever, Labrador\n290      Dog                            Retriever, Labrador\n291      Dog                                German Shepherd\n292      Dog                              Poodle, Miniature\n293      Dog                            Retriever, Labrador\n294      Dog                          Chihuahua, Short Coat\n295      Dog                                German Shepherd\n296      Dog                           Portuguese Water Dog\n297      Dog                 Spaniel, Cavalier King Charles\n298      Dog                               Poodle, Standard\n299      Dog                              Retriever, Golden\n300      Dog                                     Lhasa Apso\n301      Dog                   Terrier, West Highland White\n302      Dog                                German Pinscher\n303      Dog                           Old English Sheepdog\n304      Dog                          Terrier, Jack Russell\n305      Dog                          Chihuahua, Short Coat\n306      Dog                                       Shepherd\n307      Dog                                     Lhasa Apso\n308      Dog                           Portuguese Water Dog\n309      Dog                                      Coonhound\n310      Dog                                 Terrier, Irish\n311      Dog                                        Maltese\n312      Dog                                      Coonhound\n313      Dog                               Cur, Black-Mouth\n314      Dog                               Spinone Italiano\n315      Dog                           Schnauzer, Miniature\n316      Dog                                  Alaskan Husky\n317      Dog                          Australian Cattle Dog\n318      Dog                                         Beagle\n319      Dog                           Portuguese Water Dog\n320      Dog                                German Shepherd\n321      Cat                              Domestic Longhair\n322      Cat                              Domestic Longhair\n323      Cat                             Domestic Shorthair\n324      Cat                             Domestic Shorthair\n325      Cat                           Domestic Medium Hair\n326      Cat                             Domestic Shorthair\n327      Cat                                        Siamese\n328      Cat                             Domestic Shorthair\n329      Cat                             Domestic Shorthair\n330      Cat                             Domestic Shorthair\n331      Cat                             Domestic Shorthair\n332      Cat                             Domestic Shorthair\n333      Cat                             Domestic Shorthair\n334      Cat                             American Shorthair\n335      Cat                                        Siamese\n336      Cat                             Domestic Shorthair\n337      Cat                             Domestic Shorthair\n338      Cat                           Domestic Medium Hair\n339      Cat                             Domestic Shorthair\n340      Cat                             Domestic Shorthair\n341      Cat                             Domestic Shorthair\n342      Cat                             American Shorthair\n343      Cat                           Domestic Medium Hair\n344      Cat                                         LaPerm\n345      Cat                             Domestic Shorthair\n346      Cat                             Domestic Shorthair\n347      Cat                                   Russian Blue\n348      Cat                             Domestic Shorthair\n349      Cat                             Domestic Shorthair\n350      Cat                             Domestic Shorthair\n351      Cat                             Domestic Shorthair\n352      Cat                             Domestic Shorthair\n353      Cat                             Domestic Shorthair\n354      Dog                            Australian Shepherd\n355      Dog                     Terrier, American Pit Bull\n356      Dog                                            Pug\n357      Dog                            Retriever, Labrador\n358      Dog                              Terrier, Pit Bull\n359      Dog                            Australian Shepherd\n360      Dog                              Retriever, Golden\n361      Dog                                         Beagle\n362      Dog                              Poodle, Miniature\n363      Dog                                        Terrier\n364      Dog                     Terrier, American Pit Bull\n365      Dog                              Terrier, Pit Bull\n366      Dog                          Chihuahua, Short Coat\n367      Dog                                German Shepherd\n368      Dog                             Terrier, Yorkshire\n369      Dog                                 Xoloitzcuintli\n370      Dog                                        Terrier\n371      Dog                                     Rottweiler\n372      Dog                              Australian Kelpie\n373      Dog                                        Maltese\n374      Dog                            Retriever, Labrador\n375      Dog                    Pointer, German Shorthaired\n376      Dog                                          Boxer\n377      Dog                          Chihuahua, Short Coat\n378      Dog                Terrier, American Staffordshire\n379      Dog                                          Hound\n380      Dog                              Poodle, Miniature\n381      Dog                      Spaniel, English Springer\n382      Dog                           Schnauzer, Miniature\n383      Dog              Dachshund, Standard Smooth Haired\n384      Dog              Dachshund, Standard Smooth Haired\n385      Dog                          Chihuahua, Short Coat\n386      Dog              Dachshund, Standard Smooth Haired\n387      Dog                                     Pomeranian\n388      Dog                          Chihuahua, Short Coat\n389      Dog                    Terrier, Staffordshire Bull\n390      Dog                           Terrier, Fox, Smooth\n391      Dog                            Retriever, Labrador\n392      Dog                            Retriever, Labrador\n393      Dog                                          Boxer\n394      Dog                              Retriever, Golden\n395      Dog                            Schnauzer, Standard\n396      Dog                                     Lhasa Apso\n397      Dog                                       Shih Tzu\n398      Dog                          Australian Cattle Dog\n399      Dog                          Welsh Corgi, Pembroke\n400      Dog                                  Border Collie\n401      Dog                          Australian Cattle Dog\n402      Dog                                            Pug\n403      Dog                                  Border Collie\n404      Dog                                        Whippet\n405      Dog                            Australian Shepherd\n406      Dog                           Schnauzer, Miniature\n407      Cat                             Domestic Shorthair\n408      Cat                             Domestic Shorthair\n409      Cat                                         LaPerm\n410      Cat                           Domestic Medium Hair\n411      Cat                             Domestic Shorthair\n412      Cat                             Domestic Shorthair\n413      Cat                              Domestic Longhair\n414      Cat                             Domestic Shorthair\n415      Cat                             Domestic Shorthair\n416      Cat                           Domestic Medium Hair\n417      Cat                             Domestic Shorthair\n418      Cat                             Domestic Shorthair\n419      Cat                             Domestic Shorthair\n420      Cat                             Domestic Shorthair\n421      Cat                             Domestic Shorthair\n422      Cat                           Domestic Medium Hair\n423      Cat                             Domestic Shorthair\n424      Cat                             Domestic Shorthair\n425      Dog                              Retriever, Golden\n426      Dog                                German Shepherd\n427      Dog                              Retriever, Golden\n428      Dog                                 Siberian Husky\n429      Dog              Dachshund, Standard Smooth Haired\n430      Dog                            Australian Shepherd\n431      Dog                          Australian Cattle Dog\n432      Dog                          Australian Cattle Dog\n433      Dog                                Terrier, Boston\n434      Dog                                 Great Pyrenees\n435      Dog                              Shetland Sheepdog\n436      Dog                                            Mix\n437      Dog                                   Bichon Frise\n438      Dog                              Bulldog, American\n439      Dog                               Poodle, Standard\n440      Dog                              Terrier, Airedale\n441      Dog                             Miniature Pinscher\n442      Dog                                        Mastiff\n443      Dog                                        Terrier\n444      Dog                        Spaniel, American Water\n445      Dog                                Bulldog, French\n446      Dog                            Retriever, Labrador\n447      Dog                                      Retriever\n448      Dog                                      Greyhound\n449      Dog                                German Shepherd\n450      Dog                                German Shepherd\n451      Dog                                       Brittany\n452      Dog                                            Mix\n453      Dog                          Terrier, Jack Russell\n454      Dog                              Poodle, Miniature\n455      Dog                          Chihuahua, Short Coat\n456      Dog                                        Terrier\n457      Dog                 Australian Shepherd, Miniature\n458      Dog                            Retriever, Labrador\n459      Dog                            Australian Shepherd\n460      Dog                            Schnauzer, Standard\n461      Dog                            Retriever, Labrador\n462      Dog                                         Beagle\n463      Dog                               Bulldog, English\n464      Dog                                       Havanese\n465      Dog                      Spaniel, English Springer\n466      Dog                 Spaniel, Cavalier King Charles\n467      Dog                               Poodle, Standard\n468      Dog                               Poodle, Standard\n469      Dog                            Retriever, Labrador\n470      Dog                                        Whippet\n471      Dog                                      Retriever\n472      Dog                                      Retriever\n473      Dog                                  Border Collie\n474      Dog                            Retriever, Labrador\n475      Dog                            Retriever, Labrador\n476      Dog                                          Hound\n477      Dog                                   Carolina Dog\n478      Dog                            Retriever, Labrador\n479      Dog                            Retriever, Labrador\n480      Dog                                          Hound\n481      Dog                 Spaniel, Cavalier King Charles\n482      Dog                                      Shiba Inu\n483      Dog                          Chihuahua, Short Coat\n484      Dog                             Terrier, Yorkshire\n485      Dog                                      Coonhound\n486      Dog                            Retriever, Labrador\n487      Dog                      Spaniel, English Springer\n488      Cat                           Domestic Medium Hair\n489      Cat                             Domestic Shorthair\n490      Cat                              Domestic Longhair\n491      Cat                             Domestic Shorthair\n492      Cat                              Domestic Longhair\n493      Cat                           Domestic Medium Hair\n494      Cat                             Domestic Shorthair\n495      Cat                             Domestic Shorthair\n496      Cat                             Domestic Shorthair\n497      Cat                             Domestic Shorthair\n498      Cat                                        Siamese\n499      Cat                             Domestic Shorthair\n500      Cat                                     Maine Coon\n501      Cat                             Domestic Shorthair\n502      Cat                             Domestic Shorthair\n503      Cat                             Domestic Shorthair\n504      Cat                           Domestic Medium Hair\n505      Cat                             Domestic Shorthair\n506      Cat                                     Maine Coon\n507      Cat                             Domestic Shorthair\n508      Cat                             Domestic Shorthair\n509      Dog                             Miniature Pinscher\n510      Dog                                          Boxer\n511      Dog Mixed Breed, Medium (up to 44 lbs fully grown)\n512      Dog                          Australian Cattle Dog\n513      Dog                                       Shih Tzu\n514      Dog                     Terrier, American Pit Bull\n515      Dog                                 Xoloitzcuintli\n516      Dog                            Retriever, Labrador\n517      Dog                Terrier, American Staffordshire\n518      Dog                            Retriever, Labrador\n519      Dog                            Retriever, Labrador\n520      Dog                                        Bulldog\n521      Dog                              Poodle, Miniature\n522      Dog                                     Rottweiler\n523      Dog                              Terrier, Pit Bull\n524      Dog                            Retriever, Labrador\n525      Dog                            Australian Shepherd\n526      Dog                              Retriever, Golden\n527      Dog                                     Rottweiler\n528      Dog                                        Maltese\n529      Dog                                          Boxer\n530      Dog                                German Shepherd\n531      Dog                          Chihuahua, Short Coat\n532      Dog                             Terrier, Yorkshire\n533      Dog                          Chihuahua, Short Coat\n534      Dog                            Retriever, Labrador\n535      Dog                                 Terrier, Silky\n536      Dog                     Terrier, American Pit Bull\n537      Cat                             Domestic Shorthair\n538      Cat                                        Siamese\n539      Cat                             Domestic Shorthair\n540      Cat                              Domestic Longhair\n541      Cat                                       Siberian\n542      Cat                             Domestic Shorthair\n543      Cat                             Domestic Shorthair\n544      Cat                              Domestic Longhair\n545      Dog                               Poodle, Standard\n546      Dog                            Retriever, Labrador\n547      Dog                          Chihuahua, Short Coat\n548      Dog                                 Dutch Shepherd\n549      Dog                            Retriever, Labrador\n550      Dog                               Bulldog, English\n551      Dog                                Terrier, Border\n552      Dog                Dachshund, Standard Long Haired\n553      Dog                                American Eskimo\n554      Dog                           Portuguese Water Dog\n555      Dog                           Schnauzer, Miniature\n556      Dog                              Retriever, Golden\n557      Dog                          Vizsla, Smooth Haired\n558      Dog                                American Eskimo\n559      Dog                            Retriever, Labrador\n560      Dog                          Australian Cattle Dog\n561      Dog                              Retriever, Golden\n562      Dog                            Australian Shepherd\n563      Dog                Terrier, American Staffordshire\n564      Dog                          Chihuahua, Short Coat\n565      Dog                                Bulldog, French\n566      Dog                            Retriever, Labrador\n567      Dog                                     Weimaraner\n568      Dog                            Retriever, Labrador\n569      Dog                              Retriever, Golden\n570      Dog                                          Boxer\n571      Dog                              Retriever, Golden\n572      Dog                              Retriever, Golden\n573      Dog                               Poodle, Standard\n574      Dog                              Terrier, Airedale\n575      Dog                              Retriever, Golden\n576      Dog                                 Terrier, Cairn\n577      Dog                                American Eskimo\n578      Dog                      Spaniel, English Springer\n579      Dog                            Australian Shepherd\n580      Dog                              Poodle, Miniature\n581      Dog                                       Shih Tzu\n582      Dog                                       Shih Tzu\n583      Dog                                        Spaniel\n584      Cat                                         Sphynx\n585      Cat                           Domestic Medium Hair\n586      Cat                             Domestic Shorthair\n587      Cat                              Domestic Longhair\n588      Cat                             Domestic Shorthair\n589      Cat                             Domestic Shorthair\n590      Cat                           Domestic Medium Hair\n591      Cat                           Domestic Medium Hair\n592      Cat                             Domestic Shorthair\n593      Cat                             Domestic Shorthair\n594      Cat                             Domestic Shorthair\n595      Cat                             Domestic Shorthair\n596      Cat                             Domestic Shorthair\n597      Cat                                        Siamese\n598      Cat                                   Russian Blue\n599      Cat                           Domestic Medium Hair\n600      Cat                              Domestic Longhair\n601      Cat                                        Ragdoll\n602      Cat                             Domestic Shorthair\n603      Cat                             Domestic Shorthair\n604      Cat                           Domestic Medium Hair\n605      Cat                             Domestic Shorthair\n606      Dog                                         Beagle\n607      Dog                            Retriever, Labrador\n608      Dog                                   Terrier, Rat\n609      Dog                            Retriever, Labrador\n610      Dog                                       Havanese\n611      Dog                            Australian Shepherd\n612      Dog                            Retriever, Labrador\n613      Dog                            Retriever, Labrador\n614      Dog                            Retriever, Labrador\n615      Dog                              Terrier, Pit Bull\n616      Dog                            Retriever, Labrador\n617      Dog                            Retriever, Labrador\n618      Dog                              Retriever, Golden\n619      Dog                            Retriever, Labrador\n620      Dog                            Retriever, Labrador\n621      Dog                            Australian Shepherd\n622      Dog                                 Siberian Husky\n623      Dog                                 Xoloitzcuintli\n624      Dog                              Poodle, Miniature\n625      Dog                                  Kooikerhondje\n626      Dog                                 Terrier, Welsh\n627      Dog                                        Terrier\n628      Dog                              Terrier, Airedale\n629      Dog                            Retriever, Labrador\n630      Dog                     Terrier, American Pit Bull\n631      Dog   Mixed Breed, Large (over 44 lbs fully grown)\n632      Dog                            Retriever, Labrador\n633      Dog                            Retriever, Labrador\n634      Dog                            Retriever, Labrador\n635      Dog                                        Pointer\n636      Dog                            Retriever, Labrador\n637      Dog                                            Mix\n638      Dog                                 Siberian Husky\n639      Dog                            Retriever, Labrador\n640      Dog                                 Siberian Husky\n641      Dog                                        Terrier\n642      Dog                              Retriever, Golden\n643      Dog                               Poodle, Standard\n644      Dog                             Terrier, Yorkshire\n645      Dog                              Retriever, Golden\n646      Cat                             Domestic Shorthair\n647      Cat                             Domestic Shorthair\n648      Cat                             Domestic Shorthair\n649      Cat                           Domestic Medium Hair\n650      Cat                             Domestic Shorthair\n651      Cat                           Domestic Medium Hair\n652      Cat                              Domestic Longhair\n653      Cat                             Domestic Shorthair\n654      Cat                             Domestic Shorthair\n655      Cat                             Domestic Shorthair\n656      Cat                                      Pixie-Bob\n657      Cat                             Domestic Shorthair\n658      Cat                             Domestic Shorthair\n659      Cat                             Domestic Shorthair\n660      Cat                             Domestic Shorthair\n661      Cat                              Domestic Longhair\n662      Cat                           Domestic Medium Hair\n663      Cat                                   Russian Blue\n664      Cat                             Domestic Shorthair\n665      Cat                             Domestic Shorthair\n666      Cat                             Domestic Shorthair\n667      Cat                             Domestic Shorthair\n668      Cat                             Domestic Shorthair\n669      Cat                             Domestic Shorthair\n670      Cat                             Domestic Shorthair\n671      Cat                                      Tonkinese\n672      Cat                             Domestic Shorthair\n673      Cat                             Domestic Shorthair\n674      Cat                           Domestic Medium Hair\n675      Cat                                   Russian Blue\n676      Cat                             Domestic Shorthair\n677      Dog                     Terrier, American Pit Bull\n678      Dog                                          Boxer\n679      Dog                          Chihuahua, Short Coat\n680      Dog                            Australian Shepherd\n681      Dog                          Vizsla, Smooth Haired\n682      Dog                               Belgian Malinois\n683      Dog                           American Blue Heeler\n684      Dog                            Australian Shepherd\n685      Dog                                   Bichon Frise\n686      Dog                             Terrier, Yorkshire\n687      Dog                                      Dalmatian\n688      Dog                                      Chow Chow\n689      Dog                            Retriever, Labrador\n690      Dog                               Poodle, Standard\n691      Dog                            Retriever, Labrador\n692      Dog                            Retriever, Labrador\n693      Dog                          Terrier, Jack Russell\n694      Dog                            Retriever, Labrador\n695      Dog                             Terrier, Yorkshire\n696      Dog                          Chihuahua, Short Coat\n697      Dog                            Retriever, Labrador\n698      Dog                              Retriever, Golden\n699      Dog                                        Terrier\n700      Dog                      Spaniel, English Springer\n701      Dog                              Retriever, Golden\n702      Dog                              Retriever, Golden\n703      Dog                              Poodle, Miniature\n704      Dog                                German Shepherd\n705      Dog                     Terrier, American Pit Bull\n706      Dog                                          Boxer\n707      Dog                                German Shepherd\n708      Dog                                German Shepherd\n709      Dog                                      Retriever\n710      Dog                                      Greyhound\n711      Dog                                     Pomeranian\n712      Dog                           Schnauzer, Miniature\n713      Dog                            Schnauzer, Standard\n714      Dog                            Terrier, Manchester\n715      Dog                          Chihuahua, Short Coat\n716      Dog                            Retriever, Labrador\n717      Dog                      Spaniel, English Springer\n718      Dog                          Welsh Corgi, Cardigan\n719      Dog                          Chihuahua, Short Coat\n720      Dog                                 Xoloitzcuintli\n721      Dog                                       Havanese\n722      Dog                            Retriever, Labrador\n723      Dog                                German Shepherd\n724      Dog                            Retriever, Labrador\n725      Dog                            Retriever, Labrador\n726      Dog                            Retriever, Labrador\n727      Dog                                       Shepherd\n728      Dog                              Poodle, Miniature\n729      Dog                      Retriever, Chesapeake Bay\n730      Dog                           Portuguese Water Dog\n731      Dog                                       Shih Tzu\n732      Dog                             Miniature Pinscher\n733      Dog                       Spaniel, American Cocker\n734      Dog                            Retriever, Labrador\n735      Dog                          Chihuahua, Short Coat\n736      Dog                            Retriever, Labrador\n737      Dog                          Australian Cattle Dog\n738      Dog                                      Retriever\n739      Dog                          Terrier, Jack Russell\n740      Dog                                 Bearded Collie\n741      Dog  Mixed Breed, Small (under 24 lbs fully grown)\n742      Dog                 Spaniel, Cavalier King Charles\n743      Dog                            Retriever, Labrador\n744      Dog                            Retriever, Labrador\n745      Dog                                     Rottweiler\n746      Dog                             Terrier, Yorkshire\n747      Dog                                        Terrier\n748      Dog                                 Great Pyrenees\n749      Dog                                      Chow Chow\n750      Dog                                   Newfoundland\n751      Dog                            Retriever, Labrador\n752      Dog                                      Greyhound\n753      Dog                                       Shepherd\n754      Dog                            Retriever, Labrador\n755      Dog                                            Mix\n756      Dog                           Spaniel, English Toy\n757      Dog                                German Shepherd\n758      Dog                            Retriever, Labrador\n759      Dog                            Australian Shepherd\n760      Dog                                       Shepherd\n761      Dog                            Retriever, Labrador\n762      Dog                                  Japanese Chin\n763      Dog             Dachshund, Miniature Smooth Haired\n764      Dog                   Griffon, Wirehaired Pointing\n765      Dog                 Spaniel, Cavalier King Charles\n766      Dog                              Retriever, Golden\n767      Dog                          Chihuahua, Short Coat\n768      Dog                          Welsh Corgi, Pembroke\n769      Dog                       Spaniel, American Cocker\n770      Dog                            Australian Shepherd\n771      Cat                             Domestic Shorthair\n772      Cat                             Domestic Shorthair\n773      Cat                             Domestic Shorthair\n774      Cat                           Domestic Medium Hair\n775      Cat                             Domestic Shorthair\n776      Cat                             Domestic Shorthair\n777      Cat                             Domestic Shorthair\n778      Cat                             Domestic Shorthair\n779      Cat                             Domestic Shorthair\n780      Cat                              Domestic Longhair\n781      Cat                              Domestic Longhair\n782      Cat                             Domestic Shorthair\n783      Cat                             Domestic Shorthair\n784      Cat                                     Abyssinian\n785      Cat                             Domestic Shorthair\n786      Cat                             Domestic Shorthair\n787      Cat                                            Mix\n788      Cat                             Domestic Shorthair\n789      Cat                           Domestic Medium Hair\n790      Cat                           Domestic Medium Hair\n791      Cat                                        Ragdoll\n792      Cat                             Domestic Shorthair\n793      Cat                           Domestic Medium Hair\n794      Cat                           Domestic Medium Hair\n795      Cat                             Domestic Shorthair\n796      Cat                           Domestic Medium Hair\n797      Cat                           Domestic Medium Hair\n798      Cat                           Domestic Medium Hair\n799      Cat                             Domestic Shorthair\n800      Cat                             Domestic Shorthair\n801      Cat                             Domestic Shorthair\n802      Cat                           Domestic Medium Hair\n803      Cat                             Domestic Shorthair\n804      Cat                              British Shorthair\n805      Cat                                        Siamese\n806      Cat                             Domestic Shorthair\n807      Cat                             Domestic Shorthair\n808      Cat                                        Siamese\n809      Cat                             Domestic Shorthair\n810      Cat                             Domestic Shorthair\n811      Cat                                     Maine Coon\n812      Cat                                     Maine Coon\n813      Cat                                   Russian Blue\n814      Cat                                           Manx\n815      Cat                           Domestic Medium Hair\n816      Cat                             Domestic Shorthair\n817      Cat                             Domestic Shorthair\n818      Cat                           Domestic Medium Hair\n819      Dog                               Bulldog, English\n820      Dog                            Schnauzer, Standard\n821      Dog                                            Mix\n822      Dog                                 Great Pyrenees\n823      Dog                                       Brittany\n824      Dog                              Retriever, Golden\n825      Dog                            Retriever, Labrador\n826      Dog                            Retriever, Labrador\n827      Dog                        Spaniel, English Cocker\n828      Dog                                German Shepherd\n829      Dog                          Chihuahua, Short Coat\n830      Dog                            Retriever, Labrador\n831      Dog                                       Shih Tzu\n832      Dog                                        Terrier\n833      Dog                               Poodle, Standard\n834      Dog                                      Chow Chow\n835      Dog                          Terrier, Jack Russell\n836      Dog                    Pointer, German Shorthaired\n837      Dog                            Retriever, Labrador\n838      Dog                                        Basenji\n839      Dog                            Retriever, Labrador\n840      Dog                                   Basset Hound\n841      Dog                                          Boxer\n842      Dog                                       Papillon\n843      Dog                                         Beagle\n844      Dog                          Chihuahua, Short Coat\n845      Dog                                        Maltese\n846      Dog                          Australian Cattle Dog\n847      Dog                            Retriever, Labrador\n848      Dog                                German Shepherd\n849      Dog                                     Lhasa Apso\n850      Dog                          Chihuahua, Short Coat\n851      Dog                          Welsh Corgi, Cardigan\n852      Dog                              Retriever, Golden\n853      Dog                            Retriever, Labrador\n854      Dog                            Retriever, Labrador\n855      Dog                                 Siberian Husky\n856      Dog                 Spaniel, Cavalier King Charles\n857      Dog                            Australian Shepherd\n858      Dog                            Retriever, Labrador\n859      Dog                           Schnauzer, Miniature\n860      Dog                      Retriever, Chesapeake Bay\n861      Dog                                      Chow Chow\n862      Dog                                  Alaskan Husky\n863      Dog                              Doberman Pinscher\n864      Dog                                        Terrier\n865      Dog                            Australian Shepherd\n866      Dog                                          Boxer\n867      Dog                   Terrier, Soft Coated Wheaten\n868      Dog                          Chihuahua, Short Coat\n869      Dog                            Retriever, Labrador\n870      Dog                                     Pomeranian\n871      Dog                          Welsh Corgi, Pembroke\n872      Dog                                Setter, English\n873      Dog                                 Terrier, Cairn\n874      Dog                          Chihuahua, Short Coat\n875      Dog                                  Border Collie\n876      Dog                                  Border Collie\n877      Dog                                        Basenji\n878      Dog                          Chihuahua, Short Coat\n879      Dog                           Schnauzer, Miniature\n880      Dog                            Retriever, Labrador\n881      Dog                                Coton de Tulear\n882      Dog                              Italian Greyhound\n883      Dog                            Retriever, Labrador\n884      Dog                                        Terrier\n885      Cat                              Domestic Longhair\n886      Cat                             Domestic Shorthair\n887      Cat                           Domestic Medium Hair\n888      Cat                           Domestic Medium Hair\n889      Cat                              Domestic Longhair\n890      Cat                              Domestic Longhair\n891      Cat                             Domestic Shorthair\n892      Cat                             Domestic Shorthair\n893      Cat                                         LaPerm\n894      Cat                             Domestic Shorthair\n895      Cat                             Domestic Shorthair\n896      Cat                              Domestic Longhair\n897      Cat                             Domestic Shorthair\n898      Cat                             Domestic Shorthair\n899      Cat                              Domestic Longhair\n900      Cat                             Domestic Shorthair\n901      Cat                                      Himalayan\n902      Cat                             Domestic Shorthair\n903      Cat                              Domestic Longhair\n904      Cat                                           Manx\n905      Cat                              Domestic Longhair\n906      Cat                           Domestic Medium Hair\n907      Cat                             Domestic Shorthair\n908      Cat                             Domestic Shorthair\n909      Cat                             Domestic Shorthair\n910      Cat                                     Maine Coon\n911      Cat                                        Siamese\n912      Cat                           Domestic Medium Hair\n913      Cat                           Domestic Medium Hair\n914      Cat                           Domestic Medium Hair\n915      Cat                                        Ragdoll\n916      Cat                             Domestic Shorthair\n917      Cat                             Domestic Shorthair\n918      Cat                             Domestic Shorthair\n919      Cat                           Domestic Medium Hair\n920      Cat                                         LaPerm\n921      Cat                             Domestic Shorthair\n922      Cat                             Domestic Shorthair\n923      Cat                             Domestic Shorthair\n924      Dog                                    Poodle, Toy\n925      Dog                          Welsh Corgi, Pembroke\n926      Dog              Dachshund, Standard Smooth Haired\n927      Dog                             Terrier, Yorkshire\n928      Dog                            Retriever, Labrador\n929      Dog                              Retriever, Golden\n930      Dog                                Terrier, Border\n931      Dog                            Retriever, Labrador\n932      Dog                          Australian Cattle Dog\n933      Dog                              Retriever, Golden\n934      Dog                Terrier, American Staffordshire\n935      Dog                      Spaniel, English Springer\n936      Dog                            Retriever, Labrador\n937      Dog                                 Siberian Husky\n938      Dog                                        Terrier\n939      Dog                                German Shepherd\n940      Dog                                       Havanese\n941      Dog                                       Havanese\n942      Dog                                  Border Collie\n943      Dog              Dachshund, Standard Smooth Haired\n944      Dog                               Poodle, Standard\n945      Dog                                        Maltese\n946      Dog                                Terrier, Border\n947      Dog                                Terrier, Boston\n948      Dog                     Terrier, American Pit Bull\n949      Dog                               English Shepherd\n950      Dog                          Australian Cattle Dog\n951      Dog                          Chihuahua, Short Coat\n952      Dog                            Terrier, Australian\n953      Dog                                            Pug\n954      Dog                      Spaniel, English Springer\n955      Dog                              Poodle, Miniature\n956      Dog                                        Whippet\n957      Dog                              Italian Greyhound\n958      Dog                                 Great Pyrenees\n959      Dog                            Retriever, Labrador\n960      Dog                                   Newfoundland\n961      Dog                        Retriever, Curly Coated\n962      Dog                            Retriever, Labrador\n963      Dog                            Retriever, Labrador\n964      Dog                                 Siberian Husky\n965      Dog                                  Border Collie\n966      Dog                            Retriever, Labrador\n967      Dog                            Retriever, Labrador\n968      Dog                                       Shih Tzu\n969      Dog                            Retriever, Labrador\n970      Dog                          Chihuahua, Short Coat\n971      Dog                                   Terrier, Rat\n972      Dog                              Retriever, Golden\n973      Dog                            Retriever, Labrador\n974      Dog                                        Maltese\n975      Dog                                     Rottweiler\n976      Dog                            Retriever, Labrador\n977      Dog                          Australian Cattle Dog\n978      Dog                                            Mix\n979      Dog                      Retriever, Chesapeake Bay\n980      Dog                            Retriever, Labrador\n981      Dog                              Retriever, Golden\n982      Dog             Dachshund, Miniature Smooth Haired\n983      Dog                                 Bearded Collie\n984      Dog                                       Shih Tzu\n985      Dog                                       Havanese\n986      Dog                              Poodle, Miniature\n987      Dog                                        Terrier\n988      Dog                       Spaniel, American Cocker\n989      Dog                          Chihuahua, Short Coat\n990      Dog                                        Basenji\n991      Dog                       Spaniel, American Cocker\n992      Dog                                  Border Collie\n993      Dog                            Retriever, Labrador\n994      Dog                                   Bichon Frise\n995      Dog                                            Mix\n996      Dog                          Chihuahua, Short Coat\n997      Dog                          Australian Cattle Dog\n998      Dog                       Spaniel, American Cocker\n999      Dog                                       Keeshond\n1000     Dog                            Schnauzer, Standard\n1001     Dog                          Chihuahua, Short Coat\n1002     Dog                        Spaniel, English Cocker\n1003     Dog                                  Border Collie\n1004     Dog                              Shetland Sheepdog\n1005     Dog                            Australian Shepherd\n1006     Dog                            Retriever, Labrador\n1007     Dog                          Welsh Corgi, Cardigan\n1008     Dog                                            Pug\n1009     Dog                                Terrier, Boston\n1010     Dog                              Doberman Pinscher\n1011     Dog                                        Terrier\n1012     Dog                             Terrier, Yorkshire\n1013     Dog                            Retriever, Labrador\n1014     Dog                                         Beagle\n1015     Dog                     Greater Swiss Mountain Dog\n1016     Dog                                        Basenji\n1017     Dog                   Terrier, West Highland White\n1018     Dog                    Pointer, German Shorthaired\n1019     Dog                                       Shepherd\n1020     Dog                   Terrier, West Highland White\n1021     Dog                          Welsh Corgi, Pembroke\n1022     Dog                            Retriever, Labrador\n1023     Dog                            Retriever, Labrador\n1024     Dog                            Retriever, Labrador\n1025     Dog                              Poodle, Miniature\n1026     Dog                            Australian Shepherd\n1027     Dog                                Chinese Crested\n1028     Dog                                      Dalmatian\n1029     Dog                                            Pug\n1030     Dog                                  Border Collie\n1031     Dog                                    Poodle, Toy\n1032     Dog                              Poodle, Miniature\n1033     Dog                                Terrier, Boston\n1034     Dog                                       Shih Tzu\n1035     Dog                          Australian Cattle Dog\n1036     Dog                                  Border Collie\n1037     Dog                                        Terrier\n1038     Dog                              Retriever, Golden\n1039     Dog                      Coonhound, Treeing Walker\n1040     Cat                             Domestic Shorthair\n1041     Cat                             Domestic Shorthair\n1042     Cat                             Domestic Shorthair\n1043     Cat                           Domestic Medium Hair\n1044     Cat                             Domestic Shorthair\n1045     Cat                             Domestic Shorthair\n1046     Cat                              Domestic Longhair\n1047     Cat                             Domestic Shorthair\n1048     Cat                             Domestic Shorthair\n1049     Cat                             Domestic Shorthair\n1050     Cat                                    Turkish Van\n1051     Cat                             Domestic Shorthair\n1052     Cat                             Domestic Shorthair\n1053     Cat                             Domestic Shorthair\n1054     Cat                             Domestic Shorthair\n1055     Cat                                        Siamese\n1056     Cat                              Domestic Longhair\n1057     Cat                             Domestic Shorthair\n1058     Cat                                       Snowshoe\n1059     Cat                             Domestic Shorthair\n1060     Cat                             Domestic Shorthair\n1061     Cat                              Domestic Longhair\n1062     Cat                           Domestic Medium Hair\n1063     Cat                           Domestic Medium Hair\n1064     Cat                           Domestic Medium Hair\n1065     Cat                             Domestic Shorthair\n1066     Cat                           Domestic Medium Hair\n1067     Cat                             Domestic Shorthair\n1068     Cat                                   Russian Blue\n1069     Cat                             Domestic Shorthair\n1070     Cat                             Domestic Shorthair\n1071     Cat                             Domestic Shorthair\n1072     Cat                             American Shorthair\n1073     Cat                                      Pixie-Bob\n1074     Cat                             Domestic Shorthair\n1075     Cat                              Domestic Longhair\n1076     Cat                             Domestic Shorthair\n1077     Cat                             Domestic Shorthair\n1078     Cat                             Domestic Shorthair\n1079     Cat                             American Shorthair\n1080     Cat                             Domestic Shorthair\n1081     Cat                             Domestic Shorthair\n1082     Cat                             Domestic Shorthair\n1083     Cat                                        Siamese\n1084     Cat                              Domestic Longhair\n1085     Cat                                        Siamese\n1086     Cat                           Domestic Medium Hair\n1087     Cat                             Domestic Shorthair\n1088     Dog                               Terrier, Russell\n1089     Dog                                      Chow Chow\n1090     Dog                           Bernese Mountain Dog\n1091     Dog                            Retriever, Labrador\n1092     Dog                                German Shepherd\n1093     Dog                               Poodle, Standard\n1094     Dog                                       Papillon\n1095     Dog                                       Shepherd\n1096     Dog                           Chihuahua, Long Coat\n1097     Dog                                        Terrier\n1098     Dog                            Retriever, Labrador\n1099     Dog                          Chihuahua, Short Coat\n1100     Dog                                German Shepherd\n1101     Dog                     Terrier, American Pit Bull\n1102     Dog   Mixed Breed, Large (over 44 lbs fully grown)\n1103     Dog                          Chihuahua, Short Coat\n1104     Dog                               English Shepherd\n1105     Dog                                        Terrier\n1106     Dog                          Chihuahua, Short Coat\n1107     Dog                          Chihuahua, Short Coat\n1108     Dog                           Old English Sheepdog\n1109     Dog                          Vizsla, Smooth Haired\n1110     Dog                     Terrier, American Pit Bull\n1111     Dog                                     Weimaraner\n1112     Dog              Dachshund, Standard Smooth Haired\n1113     Dog                          Chihuahua, Short Coat\n1114     Dog                        Spaniel, Welsh Springer\n1115     Dog                                German Shepherd\n1116     Dog                           Schnauzer, Miniature\n1117     Dog                                          Hound\n1118     Dog                            Retriever, Labrador\n1119     Dog                          Chihuahua, Short Coat\n1120     Dog                            Retriever, Labrador\n1121     Dog                            Retriever, Labrador\n1122     Dog                          Australian Cattle Dog\n1123     Dog                            Retriever, Labrador\n1124     Dog                          Chihuahua, Short Coat\n1125     Dog                                 Collie, Smooth\n1126     Dog                                 Great Pyrenees\n1127     Dog                                        Terrier\n1128     Dog                                Irish Wolfhound\n1129     Dog                                       Shepherd\n1130     Dog                                      Chow Chow\n1131     Dog                            Retriever, Labrador\n1132     Dog                            Retriever, Labrador\n1133     Dog                                      Coonhound\n1134     Dog Mixed Breed, Medium (up to 44 lbs fully grown)\n1135     Dog                          Terrier, Jack Russell\n1136     Dog                                  Setter, Irish\n1137     Dog                                        Terrier\n1138     Dog                            Retriever, Labrador\n1139     Dog                                          Boxer\n1140     Dog                     Terrier, American Pit Bull\n1141     Dog                              Terrier, Airedale\n1142     Dog                          Terrier, Jack Russell\n1143     Dog                                          Hound\n1144     Dog                           Chihuahua, Long Coat\n1145     Dog             Dachshund, Miniature Smooth Haired\n1146     Dog                                       Shih Tzu\n1147     Dog                            Terrier, Australian\n1148     Dog                     Terrier, American Pit Bull\n1149     Dog Mixed Breed, Medium (up to 44 lbs fully grown)\n1150     Dog                                  Border Collie\n1151     Dog                              Retriever, Golden\n1152     Dog                              Retriever, Golden\n1153     Dog                                            Pug\n1154     Dog                           Portuguese Water Dog\n1155     Dog                            Retriever, Labrador\n1156     Dog                                          Hound\n1157     Dog                    Pointer, German Shorthaired\n1158     Dog                              Retriever, Golden\n1159     Dog                            Retriever, Labrador\n1160     Dog                 Spaniel, Cavalier King Charles\n1161     Dog                                        Terrier\n1162     Cat                              Domestic Longhair\n1163     Cat                             Domestic Shorthair\n1164     Cat                             Domestic Shorthair\n1165     Cat                             Domestic Shorthair\n1166     Cat                             Domestic Shorthair\n1167     Cat                             Domestic Shorthair\n1168     Cat                             Domestic Shorthair\n1169     Cat                             Domestic Shorthair\n1170     Cat                             Domestic Shorthair\n1171     Cat                             Domestic Shorthair\n1172     Cat                             Domestic Shorthair\n1173     Cat                           Domestic Medium Hair\n1174     Cat                                     Maine Coon\n1175     Cat                             Domestic Shorthair\n1176     Cat                                        Ragdoll\n1177     Cat                             Domestic Shorthair\n1178     Cat                                         Bombay\n1179     Cat                             Domestic Shorthair\n1180     Cat                             Domestic Shorthair\n1181     Cat                             Domestic Shorthair\n1182     Cat                             Domestic Shorthair\n1183     Cat                             Domestic Shorthair\n1184     Cat                           Domestic Medium Hair\n1185     Dog                                German Shepherd\n1186     Dog                          Chihuahua, Short Coat\n1187     Dog                                   Ibizan Hound\n1188     Dog                                      Retriever\n1189     Dog                                       Shih Tzu\n1190     Dog                                  Border Collie\n1191     Dog                                          Boxer\n1192     Dog                           Schnauzer, Miniature\n1193     Dog                                    Poodle, Toy\n1194     Dog                       Spaniel, American Cocker\n1195     Dog                                      Greyhound\n1196     Dog                                        Terrier\n1197     Dog                              Retriever, Golden\n1198     Dog                                          Hound\n1199     Dog                     Terrier, American Pit Bull\n1200     Dog                                     Pomeranian\n1201     Dog                              Retriever, Golden\n1202     Dog                                 Xoloitzcuintli\n1203     Dog                                Terrier, Boston\n1204     Dog                    Terrier, Staffordshire Bull\n1205     Dog                     Terrier, American Pit Bull\n1206     Dog                                            Mix\n1207     Dog                              Retriever, Golden\n1208     Dog                            Retriever, Labrador\n1209     Dog                          Chihuahua, Short Coat\n1210     Dog                            Australian Shepherd\n1211     Dog                                         Beagle\n1212     Dog                                       Shepherd\n1213     Dog                                 Terrier, Welsh\n1214     Dog                            Retriever, Labrador\n1215     Dog                            Retriever, Labrador\n1216     Dog                              Poodle, Miniature\n1217     Dog                            Retriever, Labrador\n1218     Dog                                     Pomeranian\n1219     Dog                          Chihuahua, Short Coat\n1220     Dog                                German Shepherd\n1221     Dog                          Vizsla, Smooth Haired\n1222     Dog                          Chihuahua, Short Coat\n1223     Dog                                            Pug\n1224     Dog                            Retriever, Labrador\n1225     Dog                                        Pointer\n1226     Dog                                        Maltese\n1227     Dog                          Terrier, Jack Russell\n1228     Dog                                            Pug\n1229     Dog                            Retriever, Labrador\n1230     Dog                            Retriever, Labrador\n1231     Dog                                       Shepherd\n1232     Dog                                    Poodle, Toy\n1233     Dog                   Terrier, Soft Coated Wheaten\n1234     Dog                                            Mix\n1235     Dog                                 Collie, Smooth\n1236     Dog                            Australian Shepherd\n1237     Dog                              Retriever, Golden\n1238     Dog                            Retriever, Labrador\n1239     Dog                 Australian Shepherd, Miniature\n1240     Dog                            Retriever, Labrador\n1241     Dog                            Retriever, Labrador\n1242     Cat                           Domestic Medium Hair\n1243     Cat                             Domestic Shorthair\n1244     Cat                             Domestic Shorthair\n1245     Cat                                        Ragdoll\n1246     Cat                             Domestic Shorthair\n1247     Cat                             Domestic Shorthair\n1248     Cat                             Domestic Shorthair\n1249     Cat                                        Siamese\n1250     Cat                             Domestic Shorthair\n1251     Cat                              Domestic Longhair\n1252     Cat                                       Siberian\n1253     Cat                                           Manx\n1254     Cat                                        Siamese\n1255     Cat                             Domestic Shorthair\n1256     Cat                             Domestic Shorthair\n1257     Cat                             Domestic Shorthair\n1258     Cat                              Domestic Longhair\n1259     Cat                               Exotic Shorthair\n1260     Cat                                           Manx\n1261     Cat                             Domestic Shorthair\n1262     Cat                             Domestic Shorthair\n1263     Cat                             Domestic Shorthair\n1264     Cat                              Domestic Longhair\n1265     Cat                             Domestic Shorthair\n1266     Cat                           Domestic Medium Hair\n1267     Cat                           Domestic Medium Hair\n1268     Dog                            Retriever, Labrador\n1269     Dog                                        Spaniel\n1270     Dog                                American Eskimo\n1271     Dog                                        Bulldog\n1272     Dog                                     Lhasa Apso\n1273     Dog                          Chihuahua, Short Coat\n1274     Dog                                            Mix\n1275     Dog                                   Terrier, Rat\n1276     Dog                              Poodle, Miniature\n1277     Dog                                        Terrier\n1278     Dog                               Bulldog, English\n1279     Dog                            Australian Shepherd\n1280     Dog                    Terrier, Staffordshire Bull\n1281     Dog                                        Spaniel\n1282     Dog                            Retriever, Labrador\n1283     Dog                     Pointer, German Wirehaired\n1284     Dog                                            Pug\n1285     Dog                                       Shepherd\n1286     Dog                               Poodle, Standard\n1287     Dog                          Chihuahua, Short Coat\n1288     Dog                                     Pomeranian\n1289     Dog                            Retriever, Labrador\n1290     Dog                           Schnauzer, Miniature\n1291     Dog                                        Whippet\n1292     Dog                           Spaniel, English Toy\n1293     Dog                                            Pug\n1294     Cat                           Domestic Medium Hair\n1295     Cat                             American Shorthair\n1296     Cat                           Domestic Medium Hair\n1297     Cat                             Domestic Shorthair\n1298     Cat                           Domestic Medium Hair\n1299     Cat                             Domestic Shorthair\n1300     Cat                                            Mix\n1301     Cat                             Domestic Shorthair\n1302     Cat                             Domestic Shorthair\n1303     Cat                             Domestic Shorthair\n1304     Cat                             Domestic Shorthair\n1305     Cat                             Oriental Shorthair\n1306     Dog                                          Boxer\n1307     Dog                            Retriever, Labrador\n1308     Dog                          Chihuahua, Short Coat\n1309     Dog                         Retriever, Flat-Coated\n1310     Dog                               Poodle, Standard\n1311     Dog                               Bulldog, English\n1312     Dog                          Catahoula Leopard dog\n1313     Dog                               Poodle, Standard\n1314     Dog                                            Mix\n1315     Dog                          Chihuahua, Short Coat\n1316     Dog                    Pointer, German Shorthaired\n1317     Dog                                          Boxer\n1318     Dog                              Retriever, Golden\n1319     Dog                          Australian Cattle Dog\n1320     Dog                                       Brittany\n1321     Dog                                      Shiba Inu\n1322     Dog                                       Shih Tzu\n1323     Dog                            Retriever, Labrador\n1324     Dog                               Bulldog, English\n1325     Dog                       Spaniel, American Cocker\n1326     Dog                            Retriever, Labrador\n1327     Dog                            Retriever, Labrador\n1328     Dog              Dachshund, Standard Smooth Haired\n1329     Dog                             Terrier, Yorkshire\n1330     Dog                                Bulldog, French\n1331     Dog                          Chihuahua, Short Coat\n1332     Dog                                     Pomeranian\n1333     Dog                                   Basset Hound\n1334     Dog                            Retriever, Labrador\n1335     Dog                              Retriever, Golden\n1336     Dog                            Australian Shepherd\n1337     Dog                                   Bichon Frise\n1338     Dog                           American Blue Heeler\n1339     Dog                            Australian Shepherd\n1340     Dog                                Bulldog, French\n1341     Dog                              Poodle, Miniature\n1342     Dog                          Welsh Corgi, Pembroke\n1343     Dog                          Welsh Corgi, Pembroke\n1344     Dog                          Chihuahua, Short Coat\n1345     Dog                          Chihuahua, Short Coat\n1346     Dog                              Retriever, Golden\n1347     Dog                                German Shepherd\n1348     Dog                                       Papillon\n1349     Dog                                 Siberian Husky\n1350     Dog                         Retriever, Flat-Coated\n1351     Dog                                      Shiba Inu\n1352     Dog                                       Papillon\n1353     Dog                          Terrier, Jack Russell\n1354     Dog                               Belgian Malinois\n1355     Dog                               Alaskan Malamute\n1356     Dog                            Retriever, Labrador\n1357     Dog                                         Beagle\n1358     Dog                                  Terrier, Bull\n1359     Dog                              Retriever, Golden\n1360     Dog                                        Terrier\n1361     Dog                                     Rottweiler\n1362     Dog                            Australian Shepherd\n1363     Dog                          Chihuahua, Short Coat\n1364     Dog                                German Shepherd\n1365     Dog                            Retriever, Labrador\n1366     Dog                    Pointer, German Shorthaired\n1367     Dog                     Terrier, American Pit Bull\n1368     Dog                           Chihuahua, Long Coat\n1369     Dog                                Bulldog, French\n1370     Dog                            Retriever, Labrador\n1371     Cat                             Domestic Shorthair\n1372     Cat                             Domestic Shorthair\n1373     Cat                             Domestic Shorthair\n1374     Cat                             American Shorthair\n1375     Cat                             Domestic Shorthair\n1376     Cat                                        Siamese\n1377     Cat                             Domestic Shorthair\n1378     Cat                           Domestic Medium Hair\n1379     Cat                             Domestic Shorthair\n1380     Cat                             Domestic Shorthair\n1381     Cat                           Domestic Medium Hair\n1382     Cat                             Domestic Shorthair\n1383     Cat                             Domestic Shorthair\n1384     Cat                             Domestic Shorthair\n1385     Cat                             Domestic Shorthair\n1386     Cat                           Domestic Medium Hair\n1387     Cat                             Domestic Shorthair\n1388     Cat                             Domestic Shorthair\n1389     Cat                             American Shorthair\n1390     Cat                             Domestic Shorthair\n1391     Cat                             Domestic Shorthair\n1392     Cat                                     Maine Coon\n1393     Cat                             Domestic Shorthair\n1394     Cat                             Domestic Shorthair\n1395     Cat                             Domestic Shorthair\n1396     Cat                             Domestic Shorthair\n1397     Cat                             Domestic Shorthair\n1398     Cat                             Domestic Shorthair\n1399     Cat                           Domestic Medium Hair\n1400     Cat                             Domestic Shorthair\n1401     Dog                              Shetland Sheepdog\n1402     Dog                              Australian Kelpie\n1403     Dog                            Australian Shepherd\n1404     Dog                              Retriever, Golden\n1405     Dog                                            Pug\n1406     Dog                                 Siberian Husky\n1407     Dog                             Terrier, Yorkshire\n1408     Dog                                German Shepherd\n1409     Dog                                          Feist\n1410     Dog                                 Dutch Shepherd\n1411     Dog                          Australian Cattle Dog\n1412     Dog                                   Terrier, Rat\n1413     Dog                            Retriever, Labrador\n1414     Dog                Terrier, American Staffordshire\n1415     Dog                                       Shih Tzu\n1416     Dog                                German Shepherd\n1417     Dog                              Retriever, Golden\n1418     Dog                                     Great Dane\n1419     Dog                          Chihuahua, Short Coat\n1420     Dog                          Welsh Corgi, Pembroke\n1421     Dog                                     Great Dane\n1422     Dog                                 Siberian Husky\n1423     Dog                                         Beagle\n1424     Dog                             Norwegian Elkhound\n1425     Dog                                     Pomeranian\n1426     Dog                            Retriever, Labrador\n1427     Dog                     Terrier, American Pit Bull\n1428     Dog                                            Mix\n1429     Dog                                        Terrier\n1430     Dog                                        Maltese\n1431     Dog                                        Maltese\n1432     Dog                            Retriever, Labrador\n1433     Dog                            Australian Shepherd\n1434     Dog                                        Terrier\n1435     Dog                            Retriever, Labrador\n1436     Dog                                    Plott Hound\n1437     Dog                                      Greyhound\n1438     Dog                                        Maltese\n1439     Dog                                            Pug\n1440     Dog                                       Shepherd\n1441     Dog                              Retriever, Golden\n1442     Dog                              Retriever, Golden\n1443     Dog                            Retriever, Labrador\n1444     Dog                                      Greyhound\n1445     Dog                     Terrier, American Pit Bull\n1446     Dog                                       Shepherd\n1447     Dog                                        Terrier\n1448     Dog                                        Terrier\n1449     Dog                          Chihuahua, Short Coat\n1450     Dog   Mixed Breed, Large (over 44 lbs fully grown)\n1451     Dog                          Australian Cattle Dog\n1452     Dog                           Schnauzer, Miniature\n1453     Dog                                         Beagle\n1454     Dog                                       Brittany\n1455     Dog                            Retriever, Labrador\n1456     Dog                                 Dutch Shepherd\n1457     Dog                            Retriever, Labrador\n1458     Dog                              Poodle, Miniature\n1459     Dog                            Retriever, Labrador\n1460     Dog                              Poodle, Miniature\n1461     Dog                              Retriever, Golden\n1462     Dog                          Chihuahua, Short Coat\n1463     Dog                          Chihuahua, Short Coat\n1464     Dog                            Retriever, Labrador\n1465     Dog                                   Bichon Frise\n1466     Dog                                   Basset Hound\n1467     Dog                                 Siberian Husky\n1468     Dog                          Australian Cattle Dog\n1469     Dog                            Retriever, Labrador\n1470     Dog                              Retriever, Golden\n1471     Dog                                      Retriever\n1472     Dog              Dachshund, Standard Smooth Haired\n1473     Dog                                          Boxer\n1474     Dog                            Retriever, Labrador\n1475     Cat                             Domestic Shorthair\n1476     Cat                                         LaPerm\n1477     Cat                                         LaPerm\n1478     Cat                             Domestic Shorthair\n1479     Cat                                        Siamese\n1480     Cat                             Domestic Shorthair\n1481     Cat                             Domestic Shorthair\n1482     Cat                             Domestic Shorthair\n1483     Cat                                     Maine Coon\n1484     Cat                             Domestic Shorthair\n1485     Cat                             American Shorthair\n1486     Cat                           Domestic Medium Hair\n1487     Cat                             Domestic Shorthair\n1488     Cat                             Domestic Shorthair\n1489     Cat                             Domestic Shorthair\n1490     Cat                                         LaPerm\n1491     Cat                                        Ragdoll\n1492     Cat                             Domestic Shorthair\n1493     Cat                              Domestic Longhair\n1494     Cat                           Domestic Medium Hair\n1495     Cat                             Domestic Shorthair\n1496     Cat                             Domestic Shorthair\n1497     Cat                             Domestic Shorthair\n1498     Cat                              Domestic Longhair\n1499     Cat                           Domestic Medium Hair\n1500     Cat                             Domestic Shorthair\n1501     Cat                           Domestic Medium Hair\n1502     Cat                                      Pixie-Bob\n1503     Cat                              Domestic Longhair\n1504     Cat                             Domestic Shorthair\n1506     Dog                                       Shih Tzu\n1507     Dog                                      Chow Chow\n1508     Dog                                        Terrier\n1509     Dog                                 Terrier, Cairn\n1510     Dog                              Poodle, Miniature\n1511     Dog                                  Border Collie\n1512     Dog                            Retriever, Labrador\n1513     Dog                                        Pointer\n1514     Dog                         Olde English Bulldogge\n1515     Dog                                       Shepherd\n1516     Dog                          Australian Cattle Dog\n1517     Dog                            Retriever, Labrador\n1518     Dog                                Bulldog, French\n1519     Dog                                        Terrier\n1520     Dog                            Retriever, Labrador\n1521     Dog                               Poodle, Standard\n1522     Dog                Terrier, American Staffordshire\n1523     Dog                                German Shepherd\n1524     Dog                             Terrier, Yorkshire\n1525     Dog                Terrier, American Staffordshire\n1526     Dog                       Spaniel, American Cocker\n1527     Dog                     Pointer, German Wirehaired\n1528     Dog                                 Siberian Husky\n1529     Dog                    Pointer, German Shorthaired\n1530     Dog                 Spaniel, Cavalier King Charles\n1531     Dog                          Chihuahua, Short Coat\n1532     Dog                                       Havanese\n1533     Dog                                       Brittany\n1534     Dog                              Retriever, Golden\n1535     Dog                          Chihuahua, Short Coat\n1536     Dog                          Terrier, Jack Russell\n1537     Dog                                Terrier, Boston\n1538     Dog                     Terrier, American Pit Bull\n1539     Dog                                       Havanese\n1540     Dog                              Bulldog, American\n1541     Dog                                  Border Collie\n1542     Dog                               Poodle, Standard\n1543     Dog                                      Retriever\n1544     Dog                                  Border Collie\n1545     Dog                                         Beagle\n1546     Dog                                    Plott Hound\n1547     Dog                                 Xoloitzcuintli\n1548     Dog                               Alaskan Malamute\n1549     Dog                                            Pug\n1550     Dog                            Retriever, Labrador\n1551     Dog                                        Terrier\n1552     Dog                Terrier, American Staffordshire\n1553     Dog                    Pointer, German Shorthaired\n1554     Dog                            Retriever, Labrador\n1555     Dog                                            Pug\n1556     Dog                                  Border Collie\n1557     Dog                                American Eskimo\n1558     Dog                          Terrier, Jack Russell\n1559     Dog                              Bulldog, American\n1560     Dog                                            Pug\n1561     Cat                             Domestic Shorthair\n1562     Cat                                     Maine Coon\n1563     Cat                             Domestic Shorthair\n1564     Cat                             Domestic Shorthair\n1565     Cat                              Domestic Longhair\n1566     Cat                           Domestic Medium Hair\n1567     Cat                             Domestic Shorthair\n1568     Cat                             Domestic Shorthair\n1569     Cat                             Domestic Shorthair\n1570     Cat                             American Shorthair\n1571     Cat                             Domestic Shorthair\n1572     Cat                             Domestic Shorthair\n1573     Cat                             Domestic Shorthair\n1574     Cat                             Domestic Shorthair\n1575     Cat                             Domestic Shorthair\n1576     Cat                             Domestic Shorthair\n1577     Cat                           Domestic Medium Hair\n1578     Cat                             American Shorthair\n1579     Cat                             Domestic Shorthair\n1580     Cat                           Domestic Medium Hair\n1581     Cat                             Domestic Shorthair\n1582     Cat                             Domestic Shorthair\n1583     Cat                             Domestic Shorthair\n1584     Cat                           Domestic Medium Hair\n1585     Cat                             Domestic Shorthair\n1586     Cat                             Domestic Shorthair\n1587     Cat                             Domestic Shorthair\n1588     Cat                             Domestic Shorthair\n1589     Cat                             Domestic Shorthair\n1590     Cat                                            Mix\n1591     Dog                               Poodle, Standard\n1592     Dog                          Chihuahua, Short Coat\n1593     Dog              Dachshund, Standard Smooth Haired\n1594     Dog                              Retriever, Golden\n1595     Dog                              Doberman Pinscher\n1596     Dog                        Spaniel, Welsh Springer\n1597     Dog                                        Terrier\n1598     Dog                                       Papillon\n1599     Dog                          Chihuahua, Short Coat\n1600     Dog                            Australian Shepherd\n1601     Dog                            Retriever, Labrador\n1602     Dog                                   Bichon Frise\n1603     Dog                                     Pomeranian\n1604     Dog                                 Siberian Husky\n1605     Dog                                      Greyhound\n1606     Dog                                     Rottweiler\n1607     Dog                              McNab Herding Dog\n1608     Dog                 Spaniel, Cavalier King Charles\n1609     Dog                          Chihuahua, Short Coat\n1610     Dog                          Chihuahua, Short Coat\n1611     Dog                                     Lhasa Apso\n1612     Dog                              Terrier, Pit Bull\n1613     Dog                          Australian Cattle Dog\n1614     Dog                               Bulldog, English\n1615     Dog                                       Shih Tzu\n1616     Dog                 Australian Shepherd, Miniature\n1617     Dog                          Catahoula Leopard dog\n1618     Dog                 Spaniel, Cavalier King Charles\n1619     Dog                                       Shih Tzu\n1620     Dog                     Terrier, American Pit Bull\n1621     Dog                                          Boxer\n1622     Dog                          Chihuahua, Short Coat\n1623     Dog                                Bulldog, French\n1624     Dog                                   Newfoundland\n1625     Dog                              Retriever, Golden\n1626     Dog                                        Whippet\n1627     Dog                          Chihuahua, Short Coat\n1628     Dog                                  Border Collie\n1629     Dog                 Australian Shepherd, Miniature\n1630     Cat                             Domestic Shorthair\n1631     Cat                              Domestic Longhair\n1632     Cat                             Domestic Shorthair\n1633     Cat                             American Shorthair\n1634     Cat                             Domestic Shorthair\n1635     Cat                              Domestic Longhair\n1636     Cat                             Domestic Shorthair\n1637     Cat                             Domestic Shorthair\n1638     Cat                             Domestic Shorthair\n1639     Cat                           Domestic Medium Hair\n1640     Cat                             Domestic Shorthair\n1641     Cat                             Domestic Shorthair\n1642     Cat                              Domestic Longhair\n1643     Cat                           Domestic Medium Hair\n1644     Cat                                        Siamese\n1645     Cat                             American Shorthair\n1646     Cat                             Domestic Shorthair\n1647     Cat                              Domestic Longhair\n1648     Cat                             Domestic Shorthair\n1649     Cat                             Domestic Shorthair\n1650     Cat                             Domestic Shorthair\n1651     Cat                              Domestic Longhair\n1652     Cat                             Domestic Shorthair\n1653     Cat                                     Maine Coon\n1654     Cat                              Domestic Longhair\n1656     Dog                             Miniature Pinscher\n1657     Dog                            Retriever, Labrador\n1658     Dog                                 Setter, Gordon\n1659     Dog                               Bulldog, English\n1660     Dog                     Terrier, American Pit Bull\n1661     Dog                                Terrier, Border\n1662     Dog                          Welsh Corgi, Cardigan\n1663     Dog                              Retriever, Golden\n1664     Dog                           American Blue Heeler\n1665     Dog                                       Papillon\n1666     Dog                                  Border Collie\n1667     Dog                              Griffon, Brussels\n1668     Dog                            Retriever, Labrador\n1669     Dog                                     Pomeranian\n1670     Dog                       Spaniel, American Cocker\n1671     Dog                              Retriever, Golden\n1672     Dog                                    Plott Hound\n1673     Dog                            Australian Shepherd\n1674     Dog                                American Eskimo\n1675     Dog                                  Border Collie\n1676     Dog   Mixed Breed, Large (over 44 lbs fully grown)\n1677     Dog                                      Retriever\n1678     Dog                             Foxhound, American\n1679     Dog                              Poodle, Miniature\n1680     Dog                          Chihuahua, Short Coat\n1681     Dog                          Australian Cattle Dog\n1682     Dog                                German Shepherd\n1683     Dog                             Terrier, Fox, Wire\n1684     Dog                                      Retriever\n1685     Dog                 Spaniel, Cavalier King Charles\n1686     Dog                                Terrier, Boston\n1687     Dog                            Retriever, Labrador\n1688     Dog                            Retriever, Labrador\n1689     Dog                          Australian Cattle Dog\n1690     Dog                          Australian Cattle Dog\n1691     Dog                              Retriever, Golden\n1692     Dog                     Terrier, American Pit Bull\n1693     Dog                 Spaniel, Cavalier King Charles\n1694     Dog                                      Greyhound\n1695     Dog                            Retriever, Labrador\n1696     Dog                          Terrier, Jack Russell\n1697     Dog                                     Rottweiler\n1698     Dog                              Bulldog, American\n1699     Dog                              Retriever, Golden\n1700     Dog                          Terrier, Jack Russell\n1701     Cat                             Domestic Shorthair\n1702     Cat                              Domestic Longhair\n1703     Cat                           Domestic Medium Hair\n1704     Cat                             Domestic Shorthair\n1705     Cat                             Domestic Shorthair\n1706     Cat                              Domestic Longhair\n1707     Cat                           Domestic Medium Hair\n1708     Cat                             Domestic Shorthair\n1709     Cat                             Domestic Shorthair\n1710     Cat                             Domestic Shorthair\n1711     Cat                           Domestic Medium Hair\n1712     Cat                                        Siamese\n1713     Cat                                            Mix\n1714     Cat                             Domestic Shorthair\n1715     Cat                             Domestic Shorthair\n1716     Cat                             Domestic Shorthair\n1717     Cat                                         LaPerm\n1718     Cat                           Domestic Medium Hair\n1719     Cat                             Domestic Shorthair\n1720     Cat                                     Abyssinian\n1721     Dog                           Schnauzer, Miniature\n1722     Dog                             Terrier, Yorkshire\n1723     Dog                            Retriever, Labrador\n1724     Dog                          Australian Cattle Dog\n1725     Dog                                       Shepherd\n1726     Dog                              Retriever, Golden\n1727     Dog                                  Border Collie\n1728     Dog                                German Shepherd\n1729     Dog                            Retriever, Labrador\n1730     Dog                           Bernese Mountain Dog\n1731     Dog                          Chihuahua, Short Coat\n1732     Dog                                      Shiba Inu\n1733     Dog                              Italian Greyhound\n1734     Dog                            Australian Shepherd\n1735     Dog                   Terrier, Soft Coated Wheaten\n1736     Dog                                   Basset Hound\n1737     Dog                          Welsh Corgi, Pembroke\n1738     Dog                               Mexican Hairless\n1739     Dog                          Terrier, Jack Russell\n1740     Dog                            Australian Shepherd\n1741     Dog                              Retriever, Golden\n1742     Dog                                      Shiba Inu\n1743     Dog                          Chihuahua, Short Coat\n1744     Dog                                Bulldog, French\n1745     Dog                     Terrier, American Pit Bull\n1746     Dog                                          Boxer\n1747     Dog                            Retriever, Labrador\n1748     Dog                                     Leonberger\n1749     Dog                            Retriever, Labrador\n1750     Dog                                Terrier, Border\n1751     Dog                                      Shiba Inu\n1752     Dog                              Retriever, Golden\n1753     Dog                                          Hound\n1754     Dog                                          Boxer\n1755     Dog                            Retriever, Labrador\n1756     Dog                              Retriever, Golden\n1757     Dog                            Retriever, Labrador\n1758     Dog                          Catahoula Leopard dog\n1759     Dog                              Retriever, Golden\n1760     Dog                                     Rottweiler\n1761     Dog                          Terrier, Jack Russell\n1762     Cat                             Domestic Shorthair\n1763     Cat                                     Maine Coon\n1764     Cat                             Domestic Shorthair\n1765     Cat                             Domestic Shorthair\n1766     Cat                             Domestic Shorthair\n1767     Cat                             Domestic Shorthair\n1768     Cat                           Domestic Medium Hair\n1769     Cat                              Domestic Longhair\n1770     Cat                             Domestic Shorthair\n1771     Cat                             Domestic Shorthair\n1772     Cat                                     Abyssinian\n1773     Cat                             Domestic Shorthair\n1774     Cat                                           Manx\n1775     Cat                             Domestic Shorthair\n1776     Cat                             Domestic Shorthair\n1777     Cat                             Domestic Shorthair\n1778     Cat                           Domestic Medium Hair\n1779     Dog                                German Shepherd\n1780     Dog                Terrier, American Staffordshire\n1781     Dog                                     Cane Corso\n1782     Dog                                Terrier, Boston\n1783     Dog                            Retriever, Labrador\n1784     Dog                            Retriever, Labrador\n1785     Dog                          Catahoula Leopard dog\n1786     Dog                                     Pomeranian\n1787     Dog                            Retriever, Labrador\n1788     Dog                               Alaskan Malamute\n1789     Dog                                          Boxer\n1790     Dog                           Bernese Mountain Dog\n1791     Cat                           Domestic Medium Hair\n1792     Cat                           Domestic Medium Hair\n1793     Cat                                        Ragdoll\n1794     Cat                           Domestic Medium Hair\n1795     Cat                                        Siamese\n1796     Cat                             Domestic Shorthair\n1797     Cat                                        Siamese\n1798     Dog                                       Havanese\n1799     Dog                            Retriever, Labrador\n1800     Dog                                 Collie, Smooth\n1801     Dog                              Shetland Sheepdog\n1802     Dog                            Retriever, Labrador\n1803     Dog                                German Shepherd\n1804     Dog                               English Shepherd\n1805     Dog                            Retriever, Labrador\n1806     Dog                            Retriever, Labrador\n1807     Dog                              Shetland Sheepdog\n1808     Dog                            Retriever, Labrador\n1809     Dog                                            Mix\n1810     Dog                            Retriever, Labrador\n1811     Dog                            Retriever, Labrador\n1812     Dog              Dachshund, Standard Smooth Haired\n1813     Dog                          Australian Cattle Dog\n1814     Dog                                 Xoloitzcuintli\n1815     Dog                                     Pomeranian\n1816     Dog                            Retriever, Labrador\n1817     Dog                            Retriever, Labrador\n1818     Dog                                       Havanese\n1819     Dog                                     Pomeranian\n1820     Dog                              Shetland Sheepdog\n1821     Dog                            Retriever, Labrador\n1822     Dog                                  Border Collie\n1823     Dog                                        Maltese\n1824     Dog                            Retriever, Labrador\n1825     Dog                              Terrier, Airedale\n1826     Dog                          Vizsla, Smooth Haired\n1827     Cat                             Domestic Shorthair\n1828     Cat                           Domestic Medium Hair\n1829     Cat                             Domestic Shorthair\n1830     Cat                             Domestic Shorthair\n1831     Cat                                       Siberian\n1832     Cat                                         LaPerm\n1833     Cat                             Domestic Shorthair\n1834     Cat                              British Shorthair\n1835     Cat                             Domestic Shorthair\n1836     Cat                                        Siamese\n1837     Cat                             Domestic Shorthair\n1838     Cat                             Domestic Shorthair\n1839     Cat                             Domestic Shorthair\n1840     Cat                             Domestic Shorthair\n1841     Dog                          Catahoula Leopard dog\n1842     Dog                              Retriever, Golden\n1843     Dog                          Welsh Corgi, Pembroke\n1844     Dog                     Terrier, American Pit Bull\n1845     Dog                             Terrier, Yorkshire\n1846     Dog                 Spaniel, Cavalier King Charles\n1847     Dog                              Retriever, Golden\n1848     Dog                                Bulldog, French\n1849     Dog                     Terrier, American Pit Bull\n1850     Dog                                         Akbash\n1851     Dog                     Terrier, American Pit Bull\n1852     Cat                                     Maine Coon\n1853     Cat                                      Devon Rex\n1854     Cat                             Domestic Shorthair\n1855     Cat                             Domestic Shorthair\n1856     Cat                             Domestic Shorthair\n1857     Dog                            Retriever, Labrador\n1858     Dog                          Chihuahua, Short Coat\n1859     Dog                            Retriever, Labrador\n1860     Dog                            Australian Shepherd\n1861     Dog                                Terrier, Boston\n1862     Dog                                 Terrier, Cairn\n1863     Dog                                  Border Collie\n1864     Dog                                Bulldog, French\n1865     Dog                                       Shih Tzu\n1866     Dog                                        Terrier\n1867     Dog                                            Pug\n1868     Dog                    Terrier, Staffordshire Bull\n1869     Dog                            Retriever, Labrador\n1870     Dog                    Terrier, Staffordshire Bull\n1871     Dog                              Retriever, Golden\n1872     Dog                                  Border Collie\n1873     Dog                                       Shih Tzu\n1874     Dog                      Spaniel, English Springer\n1875     Dog                               Poodle, Standard\n1876     Dog                                       Shih Tzu\n1877     Dog                                 Siberian Husky\n1878     Dog                           Terrier, Fox, Smooth\n1879     Dog                   Terrier, West Highland White\n1880     Dog                                      Shiba Inu\n1881     Dog                     Terrier, American Pit Bull\n1882     Dog                                       Brittany\n1883     Dog                                Bulldog, French\n1884     Dog                                 Terrier, Cairn\n1885     Dog                                       Havanese\n1886     Dog                             Miniature Pinscher\n1887     Dog                                Terrier, Boston\n1888     Dog                     Pointer, German Wirehaired\n1889     Dog                                  Border Collie\n1890     Dog                              Retriever, Golden\n1891     Dog                            Retriever, Labrador\n1892     Dog                             Terrier, Yorkshire\n1893     Dog                                          Boxer\n1894     Dog                              Terrier, Pit Bull\n1895     Dog                                Setter, English\n1896     Dog                              Retriever, Golden\n1897     Dog                            Retriever, Labrador\n1898     Dog                            Rhodesian Ridgeback\n1899     Dog                                     Great Dane\n1900     Dog                                  Border Collie\n1901     Dog                               Poodle, Standard\n1902     Dog                                German Shepherd\n1903     Dog                                     Pomeranian\n1904     Dog                              Retriever, Golden\n1905     Dog                                       Havanese\n1906     Dog                           Schnauzer, Miniature\n1907     Dog               Dachshund, Miniature Long Haired\n1908     Dog                     Terrier, American Pit Bull\n1909     Dog                                        Terrier\n1910     Dog                                        Terrier\n1911     Dog                       Spaniel, American Cocker\n1912     Dog                                     Rottweiler\n1913     Dog                            Retriever, Labrador\n1914     Dog                  Griffon Vendeen, Petit Basset\n1915     Dog                              Retriever, Golden\n1916     Dog                              Lagotto Romagnolo\n1917     Dog                                       Shepherd\n1918     Dog                           Schnauzer, Miniature\n1919     Dog                                German Shepherd\n1920     Dog                                            Mix\n1921     Cat                             Domestic Shorthair\n1922     Cat                             Domestic Shorthair\n1923     Cat                              Domestic Longhair\n1924     Cat                             Domestic Shorthair\n1925     Cat                             Domestic Shorthair\n1926     Cat                                        Siamese\n1927     Cat                             Domestic Shorthair\n1928     Cat                             Domestic Shorthair\n1929     Cat                           Domestic Medium Hair\n1930     Cat                           Domestic Medium Hair\n1931     Cat                             Domestic Shorthair\n1932     Cat                             Domestic Shorthair\n1933     Cat                             Domestic Shorthair\n1934     Cat                                        Burmese\n1935     Cat                             Domestic Shorthair\n1936     Cat                             Domestic Shorthair\n1937     Cat                             Domestic Shorthair\n1938     Cat                                        Siamese\n1939     Cat                             Domestic Shorthair\n1940     Cat                             Domestic Shorthair\n1941     Cat                             Domestic Shorthair\n1942     Cat                                        Siamese\n1943     Cat                             Domestic Shorthair\n1944     Cat                             Domestic Shorthair\n1945     Cat                           Domestic Medium Hair\n1946     Cat                             Domestic Shorthair\n1947     Cat                             Domestic Shorthair\n1948     Cat                             Domestic Shorthair\n1949     Cat                             Domestic Shorthair\n1950     Cat                             American Shorthair\n1951     Cat                             Domestic Shorthair\n1952     Cat                             Domestic Shorthair\n1953     Cat                           Domestic Medium Hair\n1954     Cat                           Domestic Medium Hair\n1955     Dog                                       Havanese\n1956     Dog                              Terrier, Lakeland\n                        secondary_breed weight_kg\n1                                   Mix     29.15\n2                              Havanese     23.70\n3                               Unknown     21.13\n4                                   Mix     18.70\n5                               Terrier     20.36\n6                               Unknown     11.51\n7                               Unknown     23.30\n8                               Unknown      6.89\n9                                Beagle     16.78\n10                       Terrier, Silky     16.24\n11                              Unknown     29.91\n12                              Unknown     22.35\n13                     Poodle, Standard     23.06\n14                              Unknown     21.91\n15                              Unknown     21.46\n16                    Doberman Pinscher     30.14\n17                              Unknown     22.70\n18                     Poodle, Standard     18.20\n19                    Bulldog, American     14.75\n20    Dachshund, Standard Smooth Haired     31.06\n21                Australian Cattle Dog     21.40\n22                              Unknown      4.73\n23                              Unknown      4.46\n24                                  Mix      4.66\n25                               Bengal      4.63\n26                              Unknown      4.49\n27                                  Mix      4.51\n28                                  Mix      4.24\n29                              Unknown      4.58\n30                                  Mix      4.33\n31                                  Mix      4.34\n32                                  Mix      4.42\n33                                  Mix     22.65\n34                    Retriever, Golden     21.13\n35                              Unknown     25.56\n36                              Maltese     20.38\n37                              Unknown     20.48\n38                              Unknown     29.35\n39                              Unknown     20.75\n40                      German Shepherd     17.61\n41                               Beagle     21.25\n42                    Retriever, Golden     30.52\n43                                  Mix     20.76\n44                                  Mix     23.87\n45                                  Mix     22.52\n46                              Unknown     30.88\n47                              Unknown     12.27\n48                              Unknown     24.08\n49                              Unknown     20.93\n50                              Unknown     22.52\n51                                  Mix     17.10\n52                              Unknown     21.74\n53                              Unknown     23.26\n54                              Unknown     28.12\n55                           Pomeranian     19.62\n56                              Unknown     21.64\n57                              Terrier     21.20\n58                              Unknown     24.93\n59                              Unknown     25.57\n60                              Unknown     11.61\n61                              Unknown     28.60\n62                              Unknown     22.93\n63                      German Shepherd     10.24\n64                              Unknown     15.48\n65                              Unknown     32.01\n66                                  Mix     21.69\n67                              Unknown     25.00\n68                 American Blue Heeler     26.70\n69                              Unknown     18.25\n70                                  Mix     24.71\n71                              Unknown      3.94\n72                              Unknown      3.89\n73                              Unknown      4.48\n74                              Unknown      4.05\n75                                  Mix      4.31\n76                               Angora      4.10\n77                                  Mix      4.50\n78                              Unknown      4.50\n79                              Unknown      4.53\n80                              Unknown      4.51\n81                              Unknown      4.67\n82                                  Mix      4.38\n83                              Unknown      4.39\n84                              Unknown      4.69\n85                                  Mix      4.60\n86                                  Mix      5.11\n87                              Unknown      4.20\n88                              Unknown      3.67\n89                              Unknown      4.49\n90                              Unknown      4.74\n91                              Unknown      5.18\n92                              Unknown      4.82\n93                               Bengal      4.43\n94                              Unknown     13.81\n95                                  Mix     26.10\n96                Chihuahua, Short Coat     15.21\n97                              Unknown     24.45\n98                                  Mix     20.50\n99                              Unknown     25.89\n100                   Poodle, Miniature     17.16\n101                     American Eskimo     28.16\n102                                 Mix     28.72\n103                             Unknown     13.37\n104                     German Shepherd     25.85\n105                                 Mix     26.55\n106                             Unknown     24.99\n107                             Unknown     25.54\n108                                 Mix     16.74\n109                             Unknown     16.01\n110                             Unknown     28.09\n111                             Unknown      2.64\n112                             Unknown     26.34\n113               Australian Cattle Dog     13.31\n114                  Miniature Pinscher      5.87\n115                             Unknown     17.35\n116                             Unknown     30.13\n117                             Unknown     11.40\n118                             Unknown     17.11\n119                             Unknown     19.95\n120                             Unknown     28.29\n121                        Terrier, Rat     25.95\n122                 Australian Shepherd     16.67\n123                                 Mix     39.29\n124                 Australian Shepherd     21.67\n125                   Terrier, Pit Bull     32.86\n126              Retriever, Flat-Coated      7.85\n127                             Unknown     20.65\n128                     American Eskimo     17.47\n129                    Poodle, Standard     23.80\n130                          Pomeranian     22.02\n131                                 Mix     22.15\n132                             Unknown     18.62\n133                                 Mix     13.72\n134                    Poodle, Standard     13.11\n135                   Poodle, Miniature     21.77\n136                             Unknown     30.18\n137                             Unknown     23.86\n138                             Unknown     23.52\n139                             Unknown     27.54\n140                                 Mix     24.22\n141                 Retriever, Labrador     32.46\n142                             Unknown     14.34\n143                             Unknown     14.17\n144                 Retriever, Labrador      9.93\n145                             Unknown     18.30\n146                             Unknown     21.24\n147                          Rottweiler     25.33\n148                             Unknown     15.34\n149                             Unknown     18.00\n150                                 Mix     11.19\n151                             Basenji     16.84\n152                             Unknown     18.04\n153                             Unknown     16.93\n154                             Unknown     18.68\n155                             Unknown     27.28\n156                                 Mix     26.16\n157                   Poodle, Miniature     26.73\n158                                 Mix     15.38\n159                             Unknown     16.25\n160                   Retriever, Golden     10.04\n161                             Unknown     10.66\n162                             Unknown     32.43\n163                                 Mix     22.49\n164        Terrier, West Highland White     40.56\n165                              Beagle     23.33\n166               Chihuahua, Short Coat     21.34\n167                                 Mix     24.19\n168                             Unknown     11.42\n169                             Unknown     18.60\n170                             Unknown     21.34\n171                             Unknown     20.05\n172                             Unknown     20.63\n173                             Unknown     30.40\n174                             Unknown     14.77\n175                             Unknown     18.32\n176                             Unknown     14.27\n177                             Unknown     32.08\n178                              Beagle     16.24\n179                 Retriever, Labrador     10.29\n180                                 Mix     15.47\n181                             Unknown     22.97\n182                             Unknown     21.22\n183                             Unknown     20.15\n184                                 Mix      7.61\n185                             Unknown     25.73\n186                             Unknown     18.93\n187                 Retriever, Labrador     12.23\n188                             Unknown     23.40\n189                             Unknown     30.80\n190                             Unknown     22.82\n191                             Unknown     13.73\n192                                 Mix     22.04\n193                             Unknown      4.85\n194                                 Mix      4.77\n195                             Unknown      4.15\n196                                 Mix      4.69\n197                             Unknown      4.36\n198                             Unknown      4.50\n199                             Unknown      4.51\n200                             Unknown      4.66\n201                                 Mix      4.70\n202                             Unknown      4.20\n203                                 Mix      5.10\n204                                 Mix      4.62\n205                             Unknown      4.31\n206                                 Mix      4.11\n207                             Unknown      4.89\n208                             Unknown      4.16\n209                                 Mix      4.44\n210                                 Mix      4.67\n211                             Unknown      4.13\n212                                 Mix      4.11\n213                             Unknown      4.18\n214                             Unknown      4.23\n215                  American Shorthair      4.73\n216                             Unknown      3.90\n217                             Unknown      4.56\n218                                 Mix      4.49\n219                             Unknown      4.15\n220                                 Mix      4.35\n221                             Unknown      3.83\n222                             Unknown      5.29\n223                  Domestic Shorthair      4.54\n224                             Unknown      4.49\n225                             Unknown      4.27\n226                             Unknown      4.82\n227                             Unknown      4.37\n228                                 Mix      4.51\n229                             Unknown      4.71\n230                             Unknown      4.82\n231                                 Mix      4.60\n232                                 Mix      4.32\n233                                 Mix      4.17\n234                             Unknown      3.85\n235                                 Mix      4.03\n236                             Unknown      4.72\n237                                 Mix      4.04\n238                             Unknown      4.29\n239                             Unknown      4.30\n240                             Unknown     28.08\n241                                 Mix      7.36\n242                                 Mix     24.32\n243                             Unknown     30.96\n244                             Unknown     23.02\n245                             Unknown     19.84\n246                             Unknown     23.40\n247                                 Pug     22.08\n248                                 Mix     28.64\n249                            Shih Tzu     10.77\n250   Dachshund, Standard Smooth Haired     26.25\n251                             Unknown      7.47\n252                             Unknown     22.64\n253                Bernese Mountain Dog     25.51\n254                             Samoyed     23.39\n255                             Unknown      4.64\n256                                 Mix      4.27\n257                             Unknown      4.60\n258                                 Mix      3.94\n259                             Unknown      4.18\n260                                 Mix      4.48\n261                                 Mix      4.35\n262                             Unknown      4.80\n263                                 Mix      3.83\n264                             Unknown      4.38\n265               Chihuahua, Short Coat     25.09\n266                             Unknown     14.51\n267                    Poodle, Standard     10.47\n268                             Unknown     22.88\n269                             Unknown      8.62\n270                    Poodle, Standard     32.93\n271                     German Shepherd     12.82\n272                           Chow Chow     24.82\n273                             Unknown     17.96\n274                    Poodle, Standard     16.95\n275                    Belgian Malinois     33.44\n276                    Terrier, Russell     11.83\n277                             Unknown     24.57\n278                                 Mix     22.63\n279               Welsh Corgi, Cardigan     19.55\n280                          Pomeranian     23.38\n281                             Unknown      9.53\n282                             Unknown     20.60\n283                             Unknown     17.87\n284                             Unknown     23.45\n285                                 Mix     18.72\n286                             Unknown     11.68\n287                             Unknown     19.21\n288                             Unknown     22.38\n289                                 Mix     19.12\n290                               Boxer     28.13\n291                                 Mix     32.20\n292                   Retriever, Golden     24.32\n293                             Unknown     15.48\n294                           Pekingese     24.36\n295                                 Mix     20.51\n296                             Unknown     19.68\n297                             Unknown      5.41\n298                   Retriever, Golden     23.49\n299                             Unknown     16.39\n300                             Unknown     22.73\n301                             Unknown     28.30\n302                             Unknown     24.62\n303                    Poodle, Standard     15.13\n304                   Poodle, Miniature     14.34\n305                        Terrier, Rat     27.45\n306                 Retriever, Labrador     24.35\n307                             Unknown     19.68\n308                             Unknown     26.38\n309               Australian Cattle Dog     24.79\n310                             Unknown     10.74\n311                             Unknown     15.23\n312                             Unknown     27.38\n313                 Retriever, Labrador     16.76\n314                             Unknown     24.14\n315                             Unknown     21.88\n316                                 Mix     28.31\n317                                 Mix     17.06\n318                             Unknown     23.67\n319                             Unknown     22.14\n320           Spaniel, English Springer     25.51\n321                                 Mix      4.12\n322                             Unknown      4.34\n323                                 Mix      4.81\n324                             Unknown      4.54\n325                                 Mix      4.96\n326                             Unknown      4.42\n327                                 Mix      4.40\n328                             Unknown      4.10\n329                  Domestic Shorthair      4.00\n330                                 Mix      4.26\n331                             Unknown      4.87\n332                             Unknown      4.56\n333                             Unknown      4.79\n334                             Unknown      4.75\n335                             Unknown      4.04\n336                                 Mix      4.57\n337                             Unknown      4.46\n338                                 Mix      4.57\n339                             Unknown      4.46\n340                                 Mix      4.77\n341                             Unknown      4.22\n342                             Unknown      4.11\n343                                 Mix      4.47\n344                             Unknown      4.25\n345                                 Mix      4.18\n346                                 Mix      4.53\n347                             Unknown      3.89\n348                                 Mix      5.02\n349                             Unknown      4.44\n350                             Unknown      4.38\n351                             Unknown      5.08\n352                             Unknown      4.01\n353                             Unknown      4.52\n354                                 Mix     18.24\n355                 Retriever, Labrador     10.21\n356                              Beagle     23.36\n357                 Australian Shepherd     22.24\n358                             Unknown     13.06\n359                             Unknown     12.49\n360                             Unknown     23.22\n361                                 Mix     28.85\n362                                 Mix     21.57\n363                                 Mix     16.83\n364   Dachshund, Standard Smooth Haired     18.34\n365                             Unknown      3.54\n366                             Unknown     34.32\n367                 Australian Shepherd     21.47\n368                             Unknown     21.11\n369                             Unknown     23.11\n370                                 Mix     21.54\n371                          Weimaraner     14.18\n372                             Unknown     18.74\n373                   Poodle, Miniature     21.42\n374                             Unknown     22.68\n375         Pointer, German Shorthaired     20.43\n376                                 Mix     19.01\n377                             Unknown     24.04\n378                                 Mix     27.95\n379                              Beagle     23.50\n380                                 Mix     19.07\n381                             Unknown     22.51\n382                             Unknown     15.46\n383               Chihuahua, Short Coat     14.26\n384                             Unknown     16.48\n385                             Unknown     11.96\n386               Chihuahua, Short Coat     20.87\n387                             Unknown     18.41\n388                   Terrier, Pit Bull     10.10\n389               Terrier, Jack Russell     20.92\n390                     Terrier, Boston     14.64\n391                                 Mix     28.01\n392                                 Mix     23.51\n393                                 Mix     12.36\n394                             Unknown     20.13\n395                             Unknown     27.49\n396                                 Mix     24.95\n397                             Unknown     21.56\n398         Pointer, German Shorthaired     17.72\n399                             Unknown     31.15\n400                 Australian Shepherd     16.85\n401                                 Mix     23.78\n402                             Unknown     27.86\n403                                 Mix      8.18\n404               Terrier, Jack Russell     32.10\n405                             Unknown     21.08\n406                            Shih Tzu     17.89\n407                             Unknown      5.09\n408                                 Mix      4.56\n409                             Unknown      4.13\n410                             Unknown      3.99\n411                             Unknown      4.41\n412                             Unknown      4.51\n413                             Unknown      4.77\n414                                 Mix      5.48\n415                             Unknown      4.52\n416                             Unknown      4.93\n417                             Unknown      4.25\n418                                 Mix      4.60\n419                                 Mix      4.53\n420                                 Mix      4.41\n421                                 Mix      4.02\n422                             Unknown      4.65\n423                                 Mix      5.07\n424                                 Mix      4.76\n425                             Unknown     22.11\n426                 Retriever, Labrador     10.06\n427                             Unknown     16.26\n428                 Retriever, Labrador     13.06\n429                                 Mix     23.34\n430                             Unknown     28.77\n431                             Unknown     29.30\n432                             Unknown     11.44\n433                             Unknown      8.93\n434                   Retriever, Golden     22.10\n435                     German Shepherd     21.07\n436                             Terrier     20.99\n437                            Shih Tzu     23.35\n438          Terrier, American Pit Bull     21.16\n439                             Unknown     12.29\n440                 Retriever, Labrador     26.06\n441                             Unknown     25.41\n442     Terrier, American Staffordshire     21.55\n443                                 Mix     17.40\n444                   Poodle, Miniature      7.72\n445                             Unknown     16.93\n446                             Unknown     25.80\n447                            Shepherd     21.45\n448                             Unknown     23.26\n449                             Unknown     21.35\n450                             Unknown     26.43\n451                             Unknown     26.53\n452                             Unknown     13.50\n453                                 Mix     17.16\n454                        Bichon Frise     20.88\n455                                 Mix     14.24\n456                             Spaniel     25.94\n457                             Unknown     21.93\n458          Terrier, American Pit Bull     26.52\n459                             Unknown      8.01\n460                                 Mix     21.38\n461                    Poodle, Standard     20.17\n462                             Unknown     12.89\n463                             Unknown     12.77\n464                                 Mix     24.28\n465                             Unknown     17.04\n466                             Unknown     18.42\n467                 Retriever, Labrador     14.02\n468                Old English Sheepdog     23.21\n469                                 Pug     15.82\n470                               Boxer     23.62\n471                    Poodle, Standard     26.08\n472                             Unknown     17.58\n473    Dachshund, Miniature Long Haired     26.77\n474                             Unknown     22.59\n475                    Poodle, Standard     26.04\n476                              Beagle     16.66\n477                        Carolina Dog     17.46\n478                            Shepherd     17.97\n479                                 Mix     18.59\n480                 Retriever, Labrador     18.72\n481                         Poodle, Toy     27.01\n482                             Unknown      9.13\n483                             Terrier     25.65\n484                   Poodle, Miniature     13.84\n485                             Unknown     18.41\n486                             Unknown     18.09\n487                             Unknown     32.69\n488                             Unknown      4.65\n489                             Unknown      4.59\n490                             Unknown      4.77\n491                                 Mix      4.50\n492                             Unknown      4.39\n493                             Unknown      4.22\n494                             Unknown      4.59\n495                                 Mix      4.70\n496                             Unknown      3.89\n497                             Unknown      4.74\n498                             Unknown      4.30\n499                             Unknown      4.04\n500                             Unknown      4.74\n501                             Unknown      5.26\n502                             Unknown      4.26\n503                             Unknown      4.13\n504                             Unknown      4.64\n505                             Unknown      4.78\n506                                 Mix      3.88\n507                                 Mix      4.47\n508                             Unknown      5.06\n509                                 Mix      9.58\n510                             Unknown     21.83\n511                                 Mix     15.48\n512                             Unknown     17.60\n513                             Unknown     15.75\n514                             Unknown     24.02\n515                             Unknown     23.40\n516                             Unknown     21.79\n517                                 Mix     26.44\n518                               Boxer     22.50\n519                   Retriever, Golden     27.23\n520                             Unknown     17.02\n521                             Unknown     19.46\n522                             Unknown     23.63\n523                             Unknown     11.29\n524                             Unknown     18.54\n525                             Unknown     28.97\n526                             Unknown     25.30\n527                             Unknown     20.91\n528                             Unknown     16.35\n529                             Unknown     23.56\n530                             Unknown     21.38\n531                                 Mix     12.84\n532                   Poodle, Miniature     18.50\n533                             Unknown     12.00\n534                             Unknown     11.95\n535                             Unknown     23.43\n536                             Unknown     17.22\n537                             Unknown      4.93\n538                                 Mix      3.86\n539                             Unknown      4.72\n540                                 Mix      4.92\n541                                 Mix      3.45\n542                             Unknown      4.59\n543                             Unknown      4.43\n544                                 Mix      4.38\n545                             Unknown     26.83\n546                             Unknown     31.10\n547                             Unknown     19.34\n548                                 Mix      8.43\n549                                 Mix     11.89\n550                             Unknown     16.61\n551                                 Mix     31.68\n552                             Unknown     15.40\n553                             Unknown     31.17\n554                             Unknown     20.66\n555                             Unknown     27.13\n556                   Poodle, Miniature     18.82\n557                             Unknown     30.93\n558                             Unknown     20.54\n559                             Unknown     21.46\n560                             Unknown     34.58\n561                             Unknown     17.02\n562                             Unknown     25.11\n563                             Unknown     23.48\n564  Dachshund, Miniature Smooth Haired     16.38\n565                             Unknown      6.68\n566                   Poodle, Miniature     10.10\n567                             Unknown     20.45\n568                                 Mix     20.18\n569                             Unknown     32.11\n570                                 Mix     20.78\n571                    Poodle, Standard     20.54\n572                    Poodle, Standard     31.15\n573                   Retriever, Golden     18.98\n574                                 Mix     15.05\n575                   Poodle, Miniature     21.84\n576                                 Mix     21.91\n577                                 Mix     19.75\n578                       Border Collie     26.02\n579                             Unknown     26.80\n580                             Unknown     17.85\n581                             Unknown     28.42\n582                            Papillon     24.96\n583                             Unknown     22.39\n584                             Unknown      4.09\n585                             Unknown      4.43\n586                                 Mix      4.53\n587                             Siamese      4.55\n588                             Unknown      4.55\n589                                 Mix      4.70\n590                             Unknown      4.38\n591                             Unknown      3.98\n592                                 Mix      4.16\n593                                 Mix      4.86\n594                             Unknown      4.53\n595                                 Mix      4.62\n596                                 Mix      4.17\n597                                 Mix      4.78\n598                                 Mix      4.27\n599                                 Mix      4.33\n600                                 Mix      4.58\n601                             Unknown      4.91\n602                                 Mix      4.76\n603                                 Mix      4.75\n604                          Maine Coon      4.10\n605                             Unknown      4.48\n606                                 Mix     25.63\n607                             Unknown     25.87\n608                             Unknown     25.33\n609                       Border Collie      7.56\n610                             Unknown     28.87\n611                                 Mix     23.30\n612                             Unknown     21.81\n613                             Unknown     11.88\n614                             Unknown      7.82\n615                                 Mix     18.14\n616                             Unknown     11.51\n617                             Unknown      9.47\n618                             Unknown     12.91\n619                    Poodle, Standard      7.14\n620                             Unknown      8.46\n621                             Unknown     16.67\n622                                 Mix     12.51\n623                                 Mix     25.43\n624            Spaniel, American Cocker     15.52\n625                             Unknown     16.40\n626                             Unknown     29.18\n627                                 Mix      8.45\n628                       Alaskan Husky     12.70\n629                             Unknown     19.11\n630                               Hound     24.69\n631                                 Mix     17.77\n632                                 Mix     20.02\n633                             Unknown     26.88\n634                    Poodle, Standard     21.80\n635                             Unknown     23.30\n636                    Poodle, Standard     14.57\n637                             Unknown     20.19\n638                                 Mix     18.46\n639                             Unknown     24.75\n640                    Alaskan Malamute     14.19\n641                                 Mix     18.09\n642                             Unknown     29.09\n643                             Unknown     10.37\n644               Chihuahua, Short Coat     21.53\n645                             Unknown     17.30\n646                                 Mix      4.65\n647                             Unknown      4.46\n648                                 Mix      4.47\n649                             Unknown      4.58\n650                                 Mix      4.86\n651                                 Mix      4.41\n652                                 Mix      4.44\n653                                 Mix      4.44\n654                                 Mix      4.51\n655                                 Mix      4.38\n656                             Unknown      5.05\n657                             Unknown      4.10\n658                             Unknown      4.61\n659                                 Mix      4.15\n660                             Unknown      4.12\n661                                 Mix      4.21\n662                             Unknown      4.38\n663                Domestic Medium Hair      4.85\n664                                 Mix      4.14\n665                             Unknown      4.32\n666                             Unknown      3.83\n667                             Unknown      4.34\n668                                 Mix      4.60\n669                             Unknown      4.58\n670                             Unknown      4.37\n671                             Siamese      4.44\n672                                 Mix      4.68\n673                             Unknown      4.82\n674                             Ragdoll      4.42\n675                             Unknown      4.90\n676                             Unknown      4.15\n677                                 Mix     20.20\n678                             Unknown     23.39\n679                             Unknown     15.08\n680                             Unknown     30.09\n681                             Unknown     25.00\n682                Terrier, Fox, Smooth     20.45\n683                 Australian Shepherd     21.56\n684                                 Mix     22.26\n685                             Unknown     26.12\n686                         Poodle, Toy     19.05\n687          Terrier, American Pit Bull     22.01\n688                             Unknown      7.42\n689                                 Mix     17.47\n690                             Unknown     14.02\n691                       Border Collie      8.44\n692                             Unknown     20.30\n693                Chihuahua, Long Coat      9.33\n694                             Unknown     28.73\n695                   Poodle, Miniature     25.58\n696                  Miniature Pinscher     12.67\n697                             Unknown     15.83\n698                    Poodle, Standard     29.32\n699                             Unknown     11.51\n700                             Unknown     13.52\n701                             Unknown     20.01\n702                   Poodle, Miniature     29.00\n703                             Unknown     16.78\n704                             Unknown     17.72\n705                             Unknown     15.12\n706                             Unknown     17.62\n707                      Siberian Husky     13.40\n708                                 Mix     13.15\n709                             Unknown     21.33\n710                             Unknown     27.66\n711                   Poodle, Miniature     24.19\n712                             Unknown     22.22\n713               Terrier, Jack Russell     21.52\n714                             Unknown     27.78\n715                   Poodle, Miniature     21.78\n716                             Unknown     24.12\n717                             Unknown     13.78\n718                             Unknown     10.59\n719                  Miniature Pinscher     17.48\n720                             Unknown     22.83\n721                             Unknown     11.27\n722                     German Shepherd     22.05\n723                             Unknown     12.18\n724                             Unknown     15.97\n725                       Border Collie     18.05\n726                       Border Collie     19.03\n727                                 Mix     24.18\n728               Chihuahua, Short Coat     24.89\n729                             Unknown     22.35\n730                                 Mix     30.69\n731                Schnauzer, Miniature     16.13\n732                             Unknown     16.84\n733                   Poodle, Miniature     25.17\n734                                 Mix     25.20\n735                  Miniature Pinscher     15.95\n736                             Unknown     18.06\n737                             Unknown     20.36\n738                             Unknown     16.91\n739                   Italian Greyhound     16.14\n740                             Unknown     24.85\n741                 Retriever, Labrador     21.65\n742                   Poodle, Miniature     18.64\n743                             Unknown     13.69\n744                    Poodle, Standard     28.10\n745                                 Mix     19.79\n746                             Unknown     21.79\n747                             Unknown     10.71\n748                             Unknown     23.93\n749                             Unknown     14.82\n750                    Poodle, Standard      9.67\n751                          Rottweiler     21.40\n752                             Unknown     11.73\n753                                 Mix     24.74\n754          Terrier, American Pit Bull     13.61\n755                             Unknown     12.96\n756                                 Mix     19.53\n757                                 Mix     23.73\n758                               Hound     14.81\n759                             Unknown     13.58\n760                                 Mix     23.99\n761                    Poodle, Standard     29.05\n762                                 Mix     23.43\n763                             Unknown     26.38\n764                             Unknown     12.10\n765                             Unknown     17.06\n766                             Unknown     12.57\n767                                 Mix     22.78\n768                             Unknown     14.83\n769                    Poodle, Standard      5.41\n770                    Poodle, Standard     21.99\n771                             Unknown      4.83\n772                                 Mix      3.93\n773                             Unknown      4.75\n774                             Unknown      4.24\n775                             Unknown      4.45\n776                             Unknown      4.08\n777                             Unknown      4.42\n778                             Unknown      4.63\n779                                 Mix      4.35\n780                             Unknown      4.77\n781                             Unknown      4.25\n782                             Unknown      4.88\n783                             Unknown      4.49\n784                                 Mix      4.27\n785                                 Mix      4.78\n786                             Unknown      4.28\n787                             Unknown      4.58\n788                             Unknown      4.95\n789                             Unknown      4.32\n790                             Unknown      3.78\n791                             Unknown      4.07\n792                             Unknown      4.12\n793                             Unknown      4.43\n794                             Unknown      4.42\n795                                 Mix      4.38\n796                             Unknown      4.55\n797                             Unknown      4.32\n798                             Unknown      4.69\n799                             Unknown      4.14\n800                             Unknown      3.92\n801                             Unknown      4.78\n802                             Unknown      4.84\n803                             Unknown      5.10\n804                             Unknown      4.24\n805                                 Mix      4.63\n806                             Unknown      4.72\n807                                 Mix      4.83\n808                                 Mix      4.82\n809                             Unknown      4.51\n810                             Unknown      4.63\n811                                 Mix      3.84\n812                                 Mix      4.14\n813                             Unknown      5.06\n814                             Siamese      4.34\n815                                 Mix      4.40\n816                             Unknown      4.76\n817                                 Mix      5.29\n818                             Unknown      4.45\n819                             Unknown     24.25\n820                             Unknown     17.50\n821                             Unknown     26.84\n822                             Unknown     19.78\n823                             Unknown     13.39\n824                             Unknown     26.48\n825                             Unknown     19.41\n826                             Unknown     13.56\n827                             Unknown     16.72\n828                             Unknown     10.03\n829                                 Mix     23.56\n830                             Unknown     21.96\n831                                 Mix     10.00\n832                             Unknown     31.37\n833                                 Mix     30.47\n834                             Unknown     14.88\n835                                 Mix      8.33\n836                             Unknown     20.49\n837                             Unknown     15.32\n838               Terrier, Jack Russell     21.06\n839                                 Mix     11.63\n840                             Unknown     18.70\n841                                 Mix     23.43\n842                             Unknown     20.19\n843                                 Pug      7.22\n844                             Unknown     15.46\n845                  Terrier, Yorkshire     10.53\n846                      Siberian Husky     18.33\n847                      Siberian Husky     18.16\n848                                 Mix     10.16\n849                   Poodle, Miniature     25.57\n850                             Unknown     27.53\n851                             Unknown     26.56\n852                             Unknown     25.55\n853                             Unknown     14.66\n854                    Poodle, Standard     19.90\n855                             Unknown     30.14\n856                             Unknown     31.54\n857                             Unknown     28.83\n858                             Unknown     22.66\n859                   Poodle, Miniature     23.40\n860                             Unknown     17.86\n861                             Unknown     35.45\n862                             Unknown     20.23\n863                             Unknown     16.04\n864                                 Mix     26.92\n865                                 Mix     30.81\n866                             Unknown     21.70\n867                             Unknown     19.04\n868                                 Mix     21.05\n869                             Unknown     30.99\n870                             Unknown     24.11\n871                             Unknown     21.95\n872                    Poodle, Standard     17.09\n873                   Griffon, Brussels     19.07\n874                             Unknown     17.45\n875                     German Shepherd     26.18\n876                 Schnauzer, Standard     18.47\n877                             Unknown     22.95\n878                          Pomeranian     17.74\n879                   Poodle, Miniature     23.43\n880                          Rottweiler     32.68\n881                             Unknown     20.93\n882                             Unknown     17.33\n883                    Poodle, Standard     30.28\n884                                 Mix     15.71\n885                                 Mix      4.46\n886                             Unknown      4.56\n887                             Unknown      4.43\n888                          Maine Coon      5.28\n889                             Unknown      3.98\n890                          Maine Coon      4.64\n891                             Unknown      4.71\n892                             Unknown      4.87\n893                             Unknown      4.30\n894                                 Mix      4.73\n895                             Siamese      4.88\n896                                 Mix      3.96\n897                                 Mix      4.57\n898                             Unknown      4.45\n899                             Unknown      4.76\n900                             Unknown      4.05\n901                             Unknown      4.53\n902                                 Mix      4.73\n903                             Unknown      4.38\n904                  Domestic Shorthair      4.70\n905                             Unknown      4.91\n906                             Unknown      4.61\n907                             Unknown      4.64\n908                             Unknown      4.33\n909                             Unknown      4.30\n910                             Unknown      4.44\n911                                 Mix      4.50\n912                             Unknown      5.15\n913                                 Mix      4.42\n914                             Unknown      4.38\n915                             Unknown      4.91\n916                                 Mix      4.28\n917                             Unknown      3.93\n918                             Unknown      4.63\n919                    Norwegian Forest      4.62\n920                             Unknown      3.93\n921                                 Mix      4.82\n922                                 Mix      4.58\n923                             Unknown      4.48\n924                                 Mix     19.94\n925                             Unknown     17.44\n926                             Unknown     24.57\n927                                 Mix      6.08\n928                    Poodle, Standard     28.20\n929                             Unknown     29.96\n930                             Unknown     12.50\n931                    Poodle, Standard      7.71\n932                                 Mix      8.54\n933                             Unknown     33.56\n934                                 Mix     24.72\n935                             Unknown     14.81\n936                               Hound     14.89\n937                             Unknown     24.58\n938                   Griffon, Brussels     23.08\n939                      Great Pyrenees     15.23\n940                             Unknown     24.67\n941                   Poodle, Miniature     13.76\n942                             Unknown     21.26\n943                             Terrier     22.93\n944                             Unknown     19.84\n945                             Unknown     34.52\n946                  Terrier, Yorkshire     17.24\n947                             Unknown     23.60\n948                                 Mix     22.69\n949                                 Mix     13.95\n950                    Belgian Sheepdog     22.22\n951               Australian Cattle Dog     18.36\n952                             Unknown     12.20\n953                             Unknown     16.99\n954                             Unknown     14.12\n955             Spaniel, English Cocker     13.50\n956               Chihuahua, Short Coat     14.66\n957                             Unknown     37.12\n958                 Retriever, Labrador     27.61\n959                             Unknown     15.98\n960                             Unknown     24.94\n961                    Poodle, Standard     21.94\n962                             Unknown     25.62\n963                             Unknown      9.97\n964                   Bulldog, American     21.42\n965                                 Mix     17.15\n966                    Poodle, Standard     19.75\n967                             Unknown     16.37\n968                             Unknown     24.56\n969                   Bulldog, American     22.67\n970                             Unknown     18.86\n971                                 Mix     16.01\n972                             Unknown     16.24\n973                             Unknown     20.87\n974                         Poodle, Toy     20.36\n975                                 Mix     24.36\n976                                 Mix     24.17\n977                                 Mix     23.87\n978                             Unknown     31.15\n979                             Unknown     21.55\n980                             Unknown     28.85\n981                             Unknown     17.67\n982                             Unknown     15.28\n983                   Poodle, Miniature     25.89\n984                             Unknown     22.87\n985                             Unknown     19.96\n986            Spaniel, American Cocker     33.22\n987               Welsh Corgi, Cardigan     22.00\n988                             Unknown     27.30\n989  Dachshund, Miniature Smooth Haired     31.63\n990                             Unknown     32.20\n991                             Unknown     30.91\n992                                 Mix     26.02\n993                    Poodle, Standard     25.69\n994                                 Mix     20.89\n995                             Unknown     20.05\n996                  Terrier, Yorkshire     25.15\n997                             Unknown     36.38\n998                   Poodle, Miniature     21.12\n999                             Unknown     19.12\n1000                                Mix      7.34\n1001                            Unknown     15.45\n1002                            Unknown     28.59\n1003        Terrier, Staffordshire Bull     22.52\n1004                            Unknown     24.26\n1005                Retriever, Labrador     15.39\n1006          Coonhound, Treeing Walker     18.99\n1007                                Mix     15.76\n1008                    Terrier, Boston     20.90\n1009                            Unknown     11.89\n1010                            Unknown     24.95\n1011                                Mix     11.18\n1012                            Maltese     23.10\n1013                  Poodle, Miniature     14.55\n1014                Retriever, Labrador     34.63\n1015                            Unknown     17.98\n1016                            Unknown     28.74\n1017                            Unknown     23.11\n1018                            Unknown     17.73\n1019                                Mix     19.22\n1020                            Unknown     21.11\n1021                            Unknown     15.58\n1022                            Unknown     20.24\n1023                            Unknown     16.02\n1024                            Unknown     23.52\n1025                            Unknown     21.44\n1026                            Unknown     17.12\n1027                                Mix     23.68\n1028                          Retriever     22.36\n1029                      Border Collie     19.95\n1030             Retriever, Flat-Coated     13.73\n1031                            Unknown     16.14\n1032                                Mix     23.53\n1033                            Unknown     15.78\n1034                            Unknown     26.99\n1035                            Unknown     17.97\n1036                  Retriever, Golden     25.63\n1037                            Unknown     24.43\n1038                            Unknown     14.73\n1039                              Boxer     12.18\n1040                                Mix      4.38\n1041                            Unknown      4.74\n1042                                Mix      4.51\n1043                         Maine Coon      4.43\n1044                            Unknown      4.73\n1045                                Mix      4.63\n1046                            Unknown      4.73\n1047                            Unknown      4.24\n1048                            Unknown      4.34\n1049                            Unknown      4.75\n1050                            Unknown      4.16\n1051                                Mix      4.29\n1052                                Mix      4.64\n1053                                Mix      4.53\n1054                            Unknown      3.93\n1055                                Mix      4.57\n1056                            Unknown      4.20\n1057                            Unknown      4.44\n1058                            Unknown      3.97\n1059                            Unknown      4.04\n1060                            Unknown      4.30\n1061                                Mix      4.45\n1062                            Unknown      4.63\n1063                            Unknown      4.97\n1064                            Unknown      4.02\n1065                                Mix      4.21\n1066                                Mix      4.35\n1067                            Unknown      4.80\n1068                                Mix      4.07\n1069                            Unknown      4.13\n1070                            Unknown      4.70\n1071                                Mix      4.70\n1072                            Unknown      4.73\n1073                            Unknown      4.73\n1074                            Unknown      4.85\n1075                            Unknown      4.63\n1076                            Unknown      4.59\n1077                            Unknown      4.11\n1078                            Unknown      4.60\n1079                            Unknown      4.28\n1080                            Unknown      4.45\n1081                            Unknown      4.40\n1082                            Unknown      4.90\n1083                            Unknown      5.15\n1084                            Unknown      4.84\n1085                           Balinese      4.40\n1086                            Unknown      4.46\n1087                                Mix      4.99\n1088               Chihuahua, Long Coat     20.54\n1089                            Unknown     14.71\n1090                   Poodle, Standard     33.69\n1091                             Beagle     21.76\n1092                            Unknown     11.51\n1093                            Unknown     11.03\n1094               Chihuahua, Long Coat     19.10\n1095                            Unknown     25.29\n1096                            Unknown     12.65\n1097                             Beagle     21.31\n1098                   Poodle, Standard     21.41\n1099                            Unknown     23.73\n1100                                Mix      4.50\n1101                            Unknown     23.02\n1102                                Mix     14.93\n1103                 Miniature Pinscher     22.16\n1104                      Border Collie     18.06\n1105                                Mix     20.35\n1106                            Unknown     22.50\n1107                            Unknown     19.42\n1108                            Unknown     23.44\n1109                            Unknown     14.48\n1110                                Mix     17.62\n1111                            Unknown     27.34\n1112                            Terrier     34.65\n1113                                Mix     27.95\n1114                            Unknown     25.88\n1115                      Border Collie     11.04\n1116                            Terrier     19.92\n1117                                Mix     21.10\n1118                            Unknown     17.60\n1119                                Mix     14.73\n1120         Terrier, American Pit Bull     19.01\n1121                                Mix     30.39\n1122                            Unknown     16.56\n1123                            Pointer     25.03\n1124                                Pug      3.79\n1125                    German Shepherd     32.09\n1126                            Unknown      0.39\n1127                            Unknown     19.14\n1128                          Greyhound      5.18\n1129                Retriever, Labrador     19.74\n1130                           Shepherd     20.42\n1131                            Mastiff     10.28\n1132                                Mix     16.34\n1133                                Mix     24.21\n1134                                Mix     24.38\n1135                            Unknown     11.78\n1136                            Unknown     21.82\n1137                          Chow Chow     17.20\n1138                                Mix      8.62\n1139                                Mix     10.54\n1140                Retriever, Labrador     13.63\n1141                     Siberian Husky     21.79\n1142                   Poodle, Standard     28.11\n1143                                Mix     30.71\n1144                            Unknown     30.10\n1145                             Beagle     20.13\n1146                            Unknown     18.18\n1147                            Unknown     14.98\n1148                            Unknown      7.73\n1149                                Mix     13.40\n1150                            Unknown      7.57\n1151                                Mix     18.88\n1152               Bernese Mountain Dog     17.96\n1153                            Unknown     22.03\n1154                            Unknown     27.64\n1155                            Unknown     22.80\n1156                            Unknown     22.34\n1157              Australian Cattle Dog     25.79\n1158                   Alaskan Malamute     10.28\n1159                Australian Shepherd     16.57\n1160                       Bichon Frise     25.88\n1161              Chihuahua, Short Coat     14.41\n1162                            Unknown      4.34\n1163                            Unknown      4.72\n1164                            Unknown      4.40\n1165                            Unknown      4.31\n1166                                Mix      3.52\n1167                            Unknown      3.83\n1168                            Unknown      5.20\n1169                            Unknown      4.44\n1170                            Unknown      5.03\n1171                            Unknown      4.51\n1172                                Mix      4.24\n1173                                Mix      4.67\n1174                            Unknown      4.61\n1175                                Mix      4.55\n1176                            Unknown      4.90\n1177                            Unknown      4.69\n1178                            Unknown      4.46\n1179                            Unknown      4.45\n1180                            Unknown      4.62\n1181                            Unknown      4.29\n1182                            Unknown      5.02\n1183                            Unknown      4.63\n1184                            Unknown      4.06\n1185                            Unknown     15.72\n1186                                Mix     21.47\n1187                            Unknown     29.14\n1188                                Mix     22.16\n1189                            Unknown     23.77\n1190                                Mix     22.16\n1191                            Unknown     15.12\n1192                            Unknown     21.25\n1193                            Unknown     17.95\n1194                            Unknown     27.01\n1195                                Mix     21.79\n1196                                Mix     16.31\n1197                            Unknown     18.47\n1198                            Unknown     12.29\n1199                            Unknown     21.06\n1200               Chihuahua, Long Coat     21.21\n1201                   Poodle, Standard     24.12\n1202                            Unknown     28.28\n1203                            Unknown     29.54\n1204                            Unknown     20.80\n1205                                Mix     14.19\n1206                            Unknown      9.77\n1207                                Mix     21.12\n1208                            Unknown     19.87\n1209                            Unknown     18.99\n1210                            Unknown     21.03\n1211                            Unknown     12.76\n1212                            Unknown     31.17\n1213                            Unknown     18.14\n1214                Australian Shepherd     12.79\n1215                            Unknown     28.40\n1216                            Unknown     25.29\n1217                                Mix     18.84\n1218                                Mix     19.25\n1219  Dachshund, Standard Smooth Haired     27.33\n1220                            Unknown     16.42\n1221                            Unknown     20.86\n1222                            Unknown     25.73\n1223                             Beagle     18.08\n1224                            Unknown     25.71\n1225                                Mix     26.59\n1226                           Shih Tzu     22.61\n1227                            Unknown     12.11\n1228  Dachshund, Standard Smooth Haired      1.20\n1229                            Unknown     10.10\n1230                   Poodle, Standard     14.10\n1231                                Mix     26.17\n1232                                Mix     19.46\n1233                            Unknown     14.58\n1234                            Unknown     14.62\n1235                            Unknown     20.71\n1236                            Unknown     14.12\n1237                            Unknown     31.59\n1238                     Siberian Husky     19.72\n1239                            Unknown     33.07\n1240                   Poodle, Standard     15.97\n1241                   Poodle, Standard      9.66\n1242                            Unknown      4.41\n1243                            Unknown      4.43\n1244                            Unknown      4.70\n1245                                Mix      4.27\n1246                            Unknown      5.05\n1247                            Unknown      4.46\n1248                                Mix      4.77\n1249                                Mix      4.67\n1250                                Mix      4.36\n1251                            Unknown      4.26\n1252                            Unknown      4.87\n1253                            Unknown      4.85\n1254                 Domestic Shorthair      4.64\n1255                                Mix      5.00\n1256                            Unknown      4.58\n1257                            Unknown      4.59\n1258                            Unknown      4.64\n1259                            Unknown      4.35\n1260                                Mix      4.16\n1261                 American Shorthair      4.06\n1262                                Mix      4.47\n1263                            Unknown      4.46\n1264                            Unknown      4.86\n1265                                Mix      4.65\n1266                            Unknown      4.31\n1267                                Mix      4.70\n1268                            Unknown     26.56\n1269                            Terrier     20.74\n1270                            Unknown     19.54\n1271                            Unknown     24.46\n1272                                Mix     22.67\n1273                            Unknown     23.54\n1274                Retriever, Labrador     26.74\n1275                            Unknown     21.38\n1276                            Spaniel     26.15\n1277                                Mix     33.45\n1278                            Unknown     24.62\n1279                                Mix     29.08\n1280                            Unknown     19.10\n1281                            Spaniel     24.96\n1282                            Unknown     14.65\n1283                       Basset Hound     21.78\n1284                            Unknown     19.87\n1285                            Terrier     12.98\n1286                Retriever, Labrador     26.26\n1287  Dachshund, Standard Smooth Haired     13.28\n1288                            Unknown     26.91\n1289                                Pug     17.96\n1290                            Unknown     14.67\n1291                     Siberian Husky      8.43\n1292                            Unknown     17.26\n1293                             Beagle     15.84\n1294                                Mix      3.96\n1295                            Unknown      3.91\n1296                            Ragdoll      4.38\n1297                                Mix      4.68\n1298                            Unknown      4.71\n1299                                Mix      4.58\n1300                                Mix      3.79\n1301                            Unknown      4.76\n1302                                Mix      4.67\n1303                            Unknown      4.55\n1304                                Mix      4.34\n1305                            Unknown      4.56\n1306                                Mix     20.06\n1307                   Poodle, Standard     25.84\n1308                            Unknown     18.33\n1309                            Unknown     17.74\n1310                            Unknown     23.97\n1311                            Unknown     29.22\n1312                   Cur, Black-Mouth     13.12\n1313                            Unknown     10.79\n1314                              Hound     21.51\n1315                            Terrier     32.09\n1316                            Unknown     21.27\n1317                       Basset Hound     26.36\n1318                   Poodle, Standard     24.38\n1319              Chihuahua, Short Coat     26.64\n1320                            Unknown     18.86\n1321                            Unknown     20.69\n1322                 Terrier, Yorkshire     16.82\n1323                            Unknown     12.24\n1324                            Unknown     19.23\n1325                  Poodle, Miniature     17.02\n1326                              Hound     17.23\n1327                            Unknown     22.82\n1328                       Basset Hound     23.48\n1329                            Unknown     17.42\n1330                            Unknown     18.89\n1331                                Mix     28.17\n1332                            Unknown     18.43\n1333              Welsh Corgi, Cardigan     13.21\n1334                            Unknown     25.17\n1335                  Poodle, Miniature      7.20\n1336                                Mix     19.81\n1337                  Poodle, Miniature     19.27\n1338                            Mastiff      2.32\n1339                      Border Collie      9.24\n1340                  Terrier, Pit Bull     16.13\n1341                         Lhasa Apso     20.02\n1342                            Unknown     33.18\n1343                    American Eskimo     14.41\n1344                       Terrier, Rat     21.18\n1345                            Unknown      6.71\n1346                   Poodle, Standard     19.32\n1347                     Great Pyrenees     15.54\n1348                            Unknown     23.91\n1349         Terrier, American Pit Bull      7.33\n1350                    German Shepherd     37.76\n1351                            Unknown     24.22\n1352                            Unknown     23.80\n1353                            Unknown     30.51\n1354                    German Shepherd     30.41\n1355                      Alaskan Husky     24.76\n1356                     Siberian Husky     25.17\n1357                            Unknown     25.99\n1358                            Unknown     15.55\n1359                            Unknown     21.97\n1360                                Mix     27.01\n1361                                Mix     13.35\n1362                                Mix     25.25\n1363                            Unknown     20.99\n1364                                Mix     23.06\n1365                Australian Shepherd     19.18\n1366                            Unknown     27.02\n1367                            Unknown     28.25\n1368                            Unknown     26.10\n1369                            Unknown     24.56\n1370                                Mix     20.57\n1371                            Siamese      4.67\n1372                            Unknown      4.33\n1373                                Mix      4.26\n1374                            Unknown      4.39\n1375                            Unknown      4.48\n1376                            Unknown      4.47\n1377                            Unknown      4.93\n1378                            Unknown      4.76\n1379                            Unknown      4.37\n1380                            Unknown      4.53\n1381                            Unknown      4.59\n1382                            Unknown      4.56\n1383                            Unknown      4.29\n1384                            Unknown      4.60\n1385                                Mix      4.55\n1386                            Unknown      5.03\n1387                            Unknown      4.31\n1388                                Mix      4.13\n1389                            Unknown      4.76\n1390                            Unknown      4.49\n1391                                Mix      4.25\n1392                            Unknown      5.11\n1393                            Unknown      4.41\n1394                            Unknown      4.50\n1395                            Unknown      4.41\n1396                            Unknown      4.90\n1397                            Unknown      4.10\n1398                            Unknown      4.80\n1399                     Turkish Angora      4.51\n1400                                Mix      4.57\n1401                            Unknown     17.07\n1402                    German Shepherd     21.32\n1403                                Mix     14.70\n1404                            Unknown     19.08\n1405                            Unknown     23.29\n1406                            Unknown     14.53\n1407               Chihuahua, Long Coat     23.65\n1408                            Unknown     15.12\n1409                            Unknown     19.27\n1410                                Mix     31.25\n1411                  Terrier, Pit Bull     24.98\n1412                            Unknown     22.40\n1413                          Chow Chow     22.34\n1414                                Mix     29.43\n1415                                Mix     14.84\n1416                         Rottweiler     28.14\n1417                            Unknown     24.84\n1418                                Mix     28.27\n1419                            Unknown     17.16\n1420                            Unknown     16.86\n1421                            Unknown     33.42\n1422                            Unknown     16.72\n1423                            Unknown     21.97\n1424                            Unknown     10.70\n1425                         Schipperke      9.33\n1426                      Border Collie     22.93\n1427                                Mix     23.00\n1428                            Unknown     17.74\n1429                            Unknown     20.05\n1430                 Terrier, Yorkshire     24.17\n1431                            Unknown     23.57\n1432                            Unknown     16.73\n1433                         Rottweiler     28.78\n1434                            Unknown     20.43\n1435                            Unknown     14.47\n1436                            Unknown     20.94\n1437                Retriever, Labrador     24.17\n1438                            Unknown     21.36\n1439                                Mix     25.00\n1440                                Mix     28.55\n1441                Retriever, Labrador     26.53\n1442                   Poodle, Standard     16.65\n1443                   Cur, Black-Mouth     24.99\n1444                            Unknown     18.34\n1445                            Unknown     29.33\n1446                            Unknown     25.26\n1447                              Hound     21.89\n1448                                Mix     14.99\n1449                                Mix     20.27\n1450                                Mix     25.32\n1451                Retriever, Labrador     16.36\n1452                  Poodle, Miniature     18.00\n1453                                Mix     19.56\n1454                            Unknown      1.94\n1455                         Great Dane     14.93\n1456                                Mix     23.77\n1457                            Unknown     11.74\n1458              Chihuahua, Short Coat     18.49\n1459                                Mix     14.65\n1460               Schnauzer, Miniature     22.44\n1461                   Poodle, Standard     24.59\n1462                            Unknown     19.96\n1463                 Miniature Pinscher     26.02\n1464                   Poodle, Standard     23.77\n1465                            Unknown     20.53\n1466                    German Shepherd     27.13\n1467                                Mix     14.11\n1468                            Unknown     21.47\n1469                              Boxer     16.24\n1470                            Unknown     21.23\n1471                                Mix     17.06\n1472                                Mix     19.47\n1473                            Unknown     34.22\n1474                                Mix      7.70\n1475                                Mix      4.48\n1476                            Unknown      4.92\n1477                            Unknown      4.35\n1478                            Unknown      4.40\n1479                            Unknown      4.26\n1480                                Mix      4.73\n1481                            Unknown      4.58\n1482                            Unknown      4.32\n1483                                Mix      5.09\n1484                                Mix      5.04\n1485                            Unknown      4.49\n1486                            Unknown      4.42\n1487                            Unknown      4.83\n1488                                Mix      4.47\n1489                            Unknown      4.76\n1490                            Unknown      4.54\n1491                            Unknown      4.48\n1492                            Unknown      5.19\n1493                            Unknown      4.52\n1494                            Unknown      4.56\n1495                                Mix      4.51\n1496                            Unknown      4.45\n1497                            Unknown      4.27\n1498                                Mix      4.14\n1499                            Unknown      4.48\n1500                            Unknown      4.48\n1501                            Unknown      4.62\n1502                            Unknown      4.21\n1503                                Mix      4.42\n1504                            Unknown      4.89\n1506                            Unknown     17.06\n1507                            Unknown     19.16\n1508                                Mix     25.68\n1509                            Unknown      6.65\n1510                                Mix     21.42\n1511                Retriever, Labrador     24.56\n1512                            Unknown     20.08\n1513                            Unknown     16.14\n1514                              Boxer     27.74\n1515                Rhodesian Ridgeback     10.95\n1516                      Cur, Mountain     15.26\n1517                            Unknown     18.64\n1518                            Unknown     29.88\n1519                            Unknown     23.65\n1520                                Mix     14.06\n1521                            Unknown     20.75\n1522                            Unknown      9.12\n1523                         Rottweiler     24.56\n1524                            Unknown     26.49\n1525                            Unknown     21.38\n1526                  Poodle, Miniature     19.24\n1527                Australian Shepherd     17.20\n1528                Retriever, Labrador     23.88\n1529                                Mix     21.69\n1530                       Bichon Frise     17.36\n1531                            Unknown     11.05\n1532                            Unknown      8.02\n1533              Terrier, Jack Russell     27.13\n1534                Retriever, Labrador     24.38\n1535                            Unknown     18.88\n1536                            Unknown     24.70\n1537           Spaniel, American Cocker     25.59\n1538                                Mix     15.06\n1539                            Unknown     19.59\n1540         Terrier, American Pit Bull     14.90\n1541                            Unknown     22.26\n1542                            Unknown      5.27\n1543                            Unknown     16.18\n1544                Australian Shepherd     21.33\n1545                            Unknown     14.91\n1546                            Unknown     16.94\n1547                            Unknown     25.25\n1548                            Unknown     27.66\n1549                             Beagle     11.23\n1550                                Mix     24.27\n1551                                Mix     27.93\n1552                Retriever, Labrador     22.25\n1553                            Unknown     23.62\n1554                            Unknown     23.07\n1555                             Beagle     27.54\n1556                          Dalmatian     17.37\n1557                                Mix     28.15\n1558                                Mix     30.79\n1559                            Unknown     16.33\n1560 Dachshund, Miniature Smooth Haired      6.34\n1561                            Unknown      4.27\n1562                                Mix      4.09\n1563                            Unknown      4.69\n1564                                Mix      4.47\n1565                            Unknown      4.04\n1566                            Unknown      4.55\n1567                            Unknown      4.49\n1568                            Unknown      5.17\n1569                                Mix      4.63\n1570                            Unknown      3.78\n1571                            Unknown      4.24\n1572                                Mix      4.55\n1573                            Unknown      4.22\n1574                            Unknown      3.89\n1575                            Unknown      4.79\n1576                                Mix      4.74\n1577                            Unknown      3.89\n1578                            Unknown      4.81\n1579                                Mix      4.68\n1580                            Unknown      4.35\n1581                            Unknown      4.68\n1582                            Unknown      5.40\n1583                                Mix      4.10\n1584                            Unknown      4.54\n1585                            Unknown      4.54\n1586                                Mix      4.38\n1587                                Mix      4.54\n1588                            Unknown      4.30\n1589                                Mix      4.51\n1590                            Unknown      4.75\n1591                            Unknown     26.08\n1592                            Unknown     22.50\n1593                            Unknown     13.42\n1594                  Poodle, Miniature     13.58\n1595                                Mix     22.48\n1596        Pointer, German Shorthaired     26.58\n1597                            Unknown     14.56\n1598                            Unknown     21.50\n1599                            Terrier     17.07\n1600                            Spaniel     18.52\n1601                                Mix     20.92\n1602                            Unknown     11.46\n1603                            Unknown     12.21\n1604                    German Shepherd     17.07\n1605                            Unknown     20.78\n1606                              Boxer     15.68\n1607                                Mix     30.19\n1608                            Unknown     16.53\n1609                                Mix     25.15\n1610                                Mix     31.17\n1611                            Unknown     30.54\n1612                                Mix     17.72\n1613                            Unknown     21.90\n1614                            Unknown     21.57\n1615                  Poodle, Miniature     20.67\n1616                            Unknown     20.98\n1617                                Mix     15.41\n1618                            Unknown     27.65\n1619                                Mix     25.92\n1620                            Unknown     25.80\n1621                    German Shepherd     26.18\n1622                                Mix     17.52\n1623                            Unknown     12.47\n1624                            Unknown     24.01\n1625                   Poodle, Standard     14.78\n1626                            Unknown     15.51\n1627                            Unknown     17.20\n1628                            Unknown     28.17\n1629                  Poodle, Miniature     19.77\n1630                            Unknown      4.01\n1631                            Unknown      3.76\n1632                            Unknown      4.34\n1633                            Unknown      4.73\n1634                            Unknown      4.71\n1635                            Unknown      4.17\n1636                            Unknown      4.71\n1637                            Unknown      4.10\n1638                            Unknown      4.34\n1639                                Mix      4.53\n1640                                Mix      5.02\n1641                            Unknown      4.57\n1642                         Maine Coon      4.35\n1643                                Mix      4.34\n1644                                Mix      4.79\n1645                                Mix      5.04\n1646                            Unknown      4.28\n1647                            Unknown      4.35\n1648                            Unknown      4.74\n1649                                Mix      4.58\n1650                                Mix      4.42\n1651                            Unknown      4.78\n1652                                Mix      4.24\n1653                            Unknown      4.32\n1654                            Unknown      4.16\n1656                            Unknown     17.29\n1657                  Poodle, Miniature     24.03\n1658                  Terrier, Airedale     21.94\n1659                                Mix     19.15\n1660                                Mix     23.96\n1661                            Unknown     38.61\n1662                            Unknown     17.72\n1663                            Unknown     19.16\n1664                       Basset Hound     18.35\n1665                            Unknown     27.08\n1666                Retriever, Labrador     11.78\n1667                            Unknown     21.61\n1668                                Mix     22.18\n1669                            Unknown     21.97\n1670                            Unknown     14.92\n1671                            Unknown     13.99\n1672                            Unknown     19.88\n1673                      Border Collie     22.10\n1674              Chihuahua, Short Coat     13.04\n1675                Retriever, Labrador     18.51\n1676                                Mix     18.61\n1677                   Poodle, Standard     16.87\n1678                                Mix     25.50\n1679           Spaniel, American Cocker     21.50\n1680                         Pomeranian     16.44\n1681                           Shepherd     30.16\n1682                          Retriever     13.45\n1683                                Mix     19.83\n1684                   Poodle, Standard     24.20\n1685                  Poodle, Miniature     17.24\n1686                            Unknown     16.92\n1687                   Poodle, Standard     12.41\n1688                                Mix     13.64\n1689                            Unknown     25.30\n1690                            Unknown     15.61\n1691                                Mix     13.95\n1692                            Unknown     30.90\n1693                            Unknown     22.04\n1694                            Unknown     21.32\n1695                            Unknown     18.42\n1696                            Unknown     28.02\n1697                                Mix     15.94\n1698                                Mix     30.53\n1699                            Unknown     25.29\n1700                            Unknown     25.92\n1701                            Unknown      5.02\n1702                            Unknown      4.79\n1703                            Unknown      4.53\n1704                            Unknown      4.16\n1705                            Unknown      4.64\n1706                            Unknown      4.75\n1707                            Unknown      5.01\n1708                            Unknown      4.76\n1709                            Unknown      4.35\n1710                            Unknown      4.18\n1711                                Mix      4.10\n1712                                Mix      4.02\n1713                            Unknown      4.99\n1714                            Unknown      4.43\n1715                            Unknown      4.29\n1716                            Unknown      4.63\n1717                            Unknown      4.64\n1718               Domestic Medium Hair      5.04\n1719                            Unknown      4.49\n1720                            Unknown      4.76\n1721                            Unknown     15.95\n1722                       Bichon Frise     29.43\n1723              Welsh Corgi, Pembroke     25.95\n1724                    German Shepherd     23.90\n1725                                Mix     32.05\n1726                                Mix     20.11\n1727                                Mix     20.60\n1728                         Rottweiler     21.68\n1729                            Unknown     27.93\n1730                            Unknown     26.15\n1731                                Mix     20.10\n1732                            Unknown     16.97\n1733                                Mix     21.37\n1734                            Unknown     24.97\n1735                            Unknown     19.64\n1736                            Unknown     29.03\n1737               American Blue Heeler     13.85\n1738                            Unknown     18.38\n1739                                Mix     28.38\n1740                            Unknown     16.06\n1741                  Poodle, Miniature     18.16\n1742                            Unknown     12.33\n1743                            Terrier     14.32\n1744                            Unknown     17.03\n1745                            Unknown     24.24\n1746                            Unknown     20.18\n1747                            Unknown     15.45\n1748                            Unknown     26.28\n1749               Bernese Mountain Dog     16.76\n1750                            Unknown     29.74\n1751                            Unknown     18.16\n1752                   Poodle, Standard     35.21\n1753                                Mix     12.14\n1754                            Unknown     21.41\n1755                            Unknown     26.74\n1756                            Unknown     17.66\n1757                   Poodle, Standard     30.42\n1758                            Unknown     20.17\n1759                   Poodle, Standard     17.02\n1760                      Setter, Irish     17.85\n1761              Chihuahua, Short Coat     20.59\n1762                            Unknown      3.74\n1763                            Unknown      4.35\n1764                                Mix      4.82\n1765                                Mix      4.85\n1766                                Mix      4.46\n1767                            Unknown      4.47\n1768                            Unknown      4.11\n1769                                Mix      4.01\n1770                                Mix      4.64\n1771                            Tiffany      4.05\n1772                            Unknown      4.36\n1773                            Unknown      4.70\n1774                            Unknown      4.35\n1775                            Unknown      4.44\n1776                                Mix      4.61\n1777                                Mix      3.95\n1778                            Unknown      5.02\n1779                      Collie, Rough     23.88\n1780                            Unknown     26.31\n1781                            Unknown     14.37\n1782                            Unknown     27.09\n1783                            Unknown     22.41\n1784                            Unknown     24.65\n1785                              Boxer     21.61\n1786                            Unknown     33.16\n1787                         Great Dane     22.85\n1788                            Unknown     25.64\n1789                            Unknown     13.98\n1790                            Unknown     26.50\n1791                                Mix      4.42\n1792                                Mix      4.59\n1793                            Unknown      5.18\n1794                            Unknown      4.11\n1795                            Unknown      4.61\n1796                            Unknown      4.23\n1797                            Unknown      5.27\n1798                            Unknown     18.95\n1799              Australian Cattle Dog     29.81\n1800                            Unknown     19.06\n1801                            Unknown      7.77\n1802                  Poodle, Miniature      9.47\n1803                            Unknown     23.10\n1804                Australian Shepherd     13.70\n1805                            Unknown     18.78\n1806                Australian Shepherd     21.36\n1807                            Unknown     31.02\n1808                            Unknown      2.55\n1809                            Unknown      9.96\n1810                                Mix     21.45\n1811                            Unknown     17.40\n1812                            Unknown     20.82\n1813                                Mix     22.33\n1814                            Unknown     14.33\n1815                     Siberian Husky     27.04\n1816                                Mix     23.44\n1817                            Unknown     24.20\n1818                       Bichon Frise     25.24\n1819                           Papillon     11.23\n1820                                Mix     22.48\n1821                            Unknown     17.35\n1822            Spaniel, Welsh Springer     19.09\n1823                  Poodle, Miniature     23.44\n1824                   Poodle, Standard     20.65\n1825                            Unknown     12.06\n1826                            Unknown     20.26\n1827                                Mix      4.66\n1828                            Unknown      4.26\n1829                            Unknown      4.59\n1830                                Mix      4.77\n1831                            Unknown      4.47\n1832                            Unknown      4.00\n1833                            Unknown      4.40\n1834                            Unknown      4.58\n1835                            Unknown      4.55\n1836                                Mix      4.46\n1837                            Unknown      4.59\n1838                                Mix      4.22\n1839                            Unknown      3.92\n1840                            Unknown      4.21\n1841                      Alaskan Husky     21.90\n1842                            Unknown     28.26\n1843                            Unknown     12.77\n1844                                Mix     11.39\n1845 Dachshund, Miniature Smooth Haired     23.21\n1846                            Unknown     31.45\n1847           Spaniel, American Cocker     18.90\n1848                            Unknown     27.85\n1849                                Mix     17.06\n1850                            Unknown     26.90\n1851                            Unknown     20.52\n1852                                Mix      4.14\n1853                            Unknown      3.90\n1854                            Unknown      4.02\n1855                            Unknown      4.42\n1856                            Unknown      4.99\n1857                            Unknown     22.96\n1858                            Unknown     23.45\n1859                   Poodle, Standard      4.39\n1860                            Unknown     19.82\n1861                                Mix     18.18\n1862                            Unknown     18.64\n1863                                Mix     17.75\n1864                            Unknown     23.90\n1865                                Mix     14.55\n1866                                Mix     18.40\n1867                    Terrier, Boston     19.33\n1868                           Shepherd     21.76\n1869                                Mix     25.92\n1870         Terrier, American Pit Bull     15.43\n1871                            Unknown     17.13\n1872                                Mix     20.83\n1873                            Unknown     21.38\n1874                                Mix      9.56\n1875                  Retriever, Golden     36.15\n1876                       Bichon Frise     23.52\n1877                    German Shepherd     19.68\n1878  Dachshund, Standard Smooth Haired     12.96\n1879                            Unknown     18.64\n1880                            Unknown     12.88\n1881                            Unknown     17.53\n1882                            Unknown     19.71\n1883                            Unknown     23.86\n1884                            Unknown     22.10\n1885                            Unknown     21.79\n1886                  Italian Greyhound     20.92\n1887              Chihuahua, Short Coat     15.80\n1888                Retriever, Labrador     20.33\n1889                                Mix     20.72\n1890                  Poodle, Miniature     25.10\n1891                            Unknown     20.60\n1892                            Maltese     18.70\n1893                            Unknown     28.76\n1894                                Mix     17.09\n1895                            Unknown     23.54\n1896                            Unknown     22.27\n1897                            Unknown     20.72\n1898                            Unknown     24.95\n1899                            Unknown     23.93\n1900                                Mix     32.63\n1901       Terrier, Soft Coated Wheaten     20.07\n1902                            Unknown     21.49\n1903              Chihuahua, Short Coat     14.92\n1904                   Poodle, Standard     20.05\n1905                            Unknown     17.52\n1906                            Unknown     18.12\n1907                            Unknown     18.36\n1908                              Boxer     21.45\n1909                                Mix     11.81\n1910                                Mix     12.71\n1911                            Unknown     19.05\n1912                     Siberian Husky     19.30\n1913                   Poodle, Standard     19.05\n1914                            Unknown     31.22\n1915                      Collie, Rough     26.46\n1916                                Mix     13.92\n1917                                Mix     20.48\n1918                            Unknown     27.19\n1919                Australian Shepherd     28.38\n1920                  Retriever, Golden     11.49\n1921                                Mix      4.24\n1922                            Unknown      4.38\n1923                            Unknown      4.41\n1924                 Domestic Shorthair      3.66\n1925                            Unknown      4.53\n1926                            Unknown      4.23\n1927                            Unknown      4.20\n1928                            Unknown      4.70\n1929                            Unknown      4.82\n1930                            Unknown      4.71\n1931                            Unknown      4.38\n1932                                Mix      4.09\n1933                            Unknown      4.82\n1934                                Mix      4.21\n1935                            Unknown      4.99\n1936                                Mix      4.00\n1937                                Mix      4.29\n1938                            Unknown      4.49\n1939                                Mix      4.38\n1940                                Mix      4.75\n1941                                Mix      4.18\n1942                            Unknown      4.37\n1943                            Unknown      4.20\n1944                            Unknown      4.72\n1945                            Unknown      4.34\n1946                            Unknown      4.33\n1947                                Mix      5.19\n1948                                Mix      4.53\n1949                                Mix      4.37\n1950                            Unknown      4.28\n1951                            Unknown      4.45\n1952                            Unknown      4.62\n1953                                Mix      4.57\n1954                            Unknown      4.76\n1955                            Unknown     15.98\n1956                                Mix     22.62\n\n\n\n\n\n\nQuestion 7\n\n\nCreate a new variable in the data, which contains the weights of all the animals, but rounded to the nearest kg.\n\nHints: Try looking up the help documentation for the function round(). Try playing with it in the console, e.g. round(c(3.5, 4.257, 1.1111)). You may find it helpful to look back at 1B #adding/changing-a-variable.\n\n\n\n\n\n Solution \n\n\nWe’re probably going to want this variable as a column of the data, so don’t forget the dataframe$newvariable <- ...... bit.\n\npetdata$weight_rounded <- round(petdata$weight_kg)\n\n\n\n\n\nQuestion 8\n\n\nTry giving the dataset to the function summary(). You’ll get out some information on each of the variables. It is likely that you’ll get more useful information for the variables containing information on the animal’s weights than for those containing their names, breeds etc because these variables are vectors of “characters”. We’ll start to look more about different types of data next week.\n\n\n\n\n Solution \n\n\nEasy to do!\n\nsummary(petdata)\n\n  license_year  license_number     animals_name         species         \n Min.   :2015   Length:1956        Length:1956        Length:1956       \n 1st Qu.:2017   Class :character   Class :character   Class :character  \n Median :2018   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2018                                                           \n 3rd Qu.:2018                                                           \n Max.   :2018                                                           \n primary_breed      secondary_breed      weight_kg       weight_rounded \n Length:1956        Length:1956        Min.   :  0.390   Min.   :  0.0  \n Class :character   Class :character   1st Qu.:  4.707   1st Qu.:  5.0  \n Mode  :character   Mode  :character   Median : 16.630   Median : 17.0  \n                                       Mean   : 15.312   Mean   : 15.3  \n                                       3rd Qu.: 22.500   3rd Qu.: 22.0  \n                                       Max.   :103.480   Max.   :103.0  \n\n\n\n\n\n\n\n\n\n\nSimulating Dice\n\nQuestion 9\n\n\nCopy the code from the lecture which creates a custom function called dice() (copied below). Be sure to run the code (highlight it all with your cursor, and hit “run” in the top right, or press Ctrl/Cmd+Enter).\n\ndice <- function(num = 1) {\n  sum(sample(1:6, num, replace=TRUE))\n}\n\n\n\n\n\nWhat did that code do?\nIn a sense, this code does nothing: It won’t give you any output when you run it. What it is actually doing, though, is defining a function called dice(). If you look at your environment panel (top right), you’ll see dice appear when you run the code.\nTo produce some output, we have to call the function dice() (by writing it into code: dice(4), for example). dice() wants to be supplied with some information (in the argument num). If no information is supplied, num will take a default value of 1. (So writing dice() is equivalent to writing dice(1)).\nWhat does dice() do with num? It calls another function, sample(), with 3 arguments. We didn’t write sample(): it’s a function that’s “supplied with” R. To find out more about what sample() does:\n\nclick inside the brackets just after sample() in your R script;\npress TAB (⇥), then F1\nyou should see some help appear in the bottom right-hand panel of RStudio.\n\nYou will find that “sample() takes a sample … from the elements of x …” If you compare the code in RStudio to the code under “Usage” you’ll see that where the help has x, we have 1:6. So what does 1:6 mean? One way to find out is to open the console in RStudio (bottom left) and just type stuff in. What happens when you type 1:6? What about 2:17? (What about 6:1?)\nRemember: The console is the place to “try stuff out” (don’t worry, you can’t break it).\nWhat you will discover is that 1:6 creates a vector (list of similar things, in this case numbers) of the numbers 1-6. The next bit of the sample() function is size. In the dice() function, the num passes down to the size of the sample(): Looking through the help, size is the number of items to choose. So sample(1:6, 1) would choose one number from the numbers 1-6 at random; sample(1:6, 3) would choose 3, and so on. The last argument, replace=TRUE, tells sample() what to do with a number once it’s been picked: Does it go ‘back into the bag’ to be picked again (TRUE) or not? (FALSE)?\nAround the outside is sum() which simply sums the numbers on however many (num) dice you “rolled”.\nPutting it all together, our dice() function “throws num dice” by sample()ing from the numbers 1-6 num times, replaceing each number when it’s been picked, and sums the numbers of all the dice.\n\n\nQuestion 10\n\n\nLook up the function replicate(). We can use it to do something in R lots of times! For instance, replicate(20, 1+1) will evaluate 1+1 twenty times.\nUse replicate() to simulate 20 rolls of a single dice, and store the results in an object in your environment. Give it an easily identifiable name.\n\nHints: A single dice means num = 1\n\n\n\n\n\n Solution \n\n\n\nrolls20 <- replicate(20, dice(num = 1))\n\n\n\n\n\nQuestion 11\n\n\nCreate a barplot showing the frequency with which each number was landed on in the 20 rolls.\n\nHints: the functions table() and barplot() were used to do this in the lecture.\n\n\n\n\n\n Solution \n\n\nYour plots will look slightly different to these, because all of our dice are random!\n\n# We can get the frequency table using table()\ntable(rolls20)\n\nrolls20\n1 2 3 4 5 6 \n5 4 3 5 2 1 \n\n# Which we can then pass to the barplot() function:\nbarplot(table(rolls20))\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 12\n\n\nDo the same for 1,000 rolls, and then for 10,000. What do you notice?\n\n\n\n\n Solution \n\n\n\nmorerolls <- replicate(1000, dice(1))\nbarplot(table(morerolls))\n\n\n\n\n\n\n\nmorerolls2 <- replicate(10000, dice(1))\nbarplot(table(morerolls2))\n\n\n\n\n\n\n\n\nThe more rolls we do of the dice, the flatter the graph becomes. This is because there is an equal probability of the die landing on any of the responses - there is a uniform probability.\n\n\n\n\nQuestion 12\n\n\nCopy the code below into your script and run it. It creates a new function called wdice() which simulates the rolling of num dice which are slightly weighted.\nRoll a single weighted die 20 times and plot the frequency distribution. Do the same for 1,000 and 10,000 rolls of a single die. Does a pattern emerge? At how many rolls?\n\nwdice <- function(num = 1){\n    sum(sample(1:6, num, replace=TRUE, prob = c(0.15,0.15,0.15,0.15,0.15,0.25)))\n}\n\n\n\n\n\n Solution \n\n\n\nwdice <- function(num = 1){\n    sum(sample(1:6, num, replace=TRUE, prob = c(0.15,0.15,0.15,0.15,0.15,0.25)))\n}\n\nwd <- replicate(20, wdice(1))\nbarplot(table(wd))\n\n\n\n\n\n\n\nwd <- replicate(1000, wdice(1))\nbarplot(table(wd))\n\n\n\n\n\n\n\nwd <- replicate(10000, wdice(1))\nbarplot(table(wd))\n\n\n\n\n\n\n\n\nThe die is clearly weighted towards landing on 6. However, is 20 rolls enough to reliably observe this? In our 20 rolls above, it landed on 2 quite a bit too! The pattern becomes clearer after 1000 rolls.\n\n\n\n\nQuestion 14\n\n\nRemember, wdice() and dice() are really just relying on different functions, like sample(). Try playing around with sample() in the console again - what does the prob = c(....) bit do?\n\n\n\n\n Solution \n\n\nThe prob bit is defining the probabilities of observing each outcome - i.e. there is a 25% chance of rolling a 6.\n\n\n\n\nQuestion 15\n\n\nLet’s try to modify the wdice() function. Edit the code for wdice() so that 50% of the time it lands on number 6.\n\nHints:\n\nTo test out your modified function, you will need to re-run the code which defines the function. When we use wdice() we use the function which is in our environment. If we want to edit the function, we need to then overwrite (or “replace”/“reassign”) the object in our environment.\n\nWe need to be careful to remember that the probability of different outcomes should sum to 1 (i.e., it’s not possible to “50% of the time land on 6” as well as “70% of the time land on 5”!).\n\n\n\n\n\n\n Solution \n\n\n\nwdice <- function(num = 1){\n    sum(sample(1:6, num, replace=TRUE, prob = c(0.1,0.1,0.1,0.1,0.1,0.5)))\n}\n\n\n\n\n\nQuestion 16\n\n\nCan you observe the weighting in your new die (the one which 50% of the time lands on number 6) in only 20 rolls?\n\n\n\n\n Solution \n\n\n\nwd <- replicate(100, wdice(1))\nbarplot(table(wd))\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 17\n\n\nConceptually, what can we learn from this toy example?\n\n\n\n\n Solution \n\n\nThe bigger the effect, the smaller the sample required to observe it!"
  },
  {
    "objectID": "01a_R.html",
    "href": "01a_R.html",
    "title": "1A: A first look at R & RStudio",
    "section": "",
    "text": "R is a calculator\nWhen we first open RStudio, we should see something which looks more or less like the image in Figure 1, where there are several little windows. We are going to explore what each of these little windows offer by just diving in and starting to do things.\n\n\n\n\n\nFigure 1: RStudio, freshly opened\n\n\n\n\nStarting in the left-hand window, you’ll notice the blue sign >.\nThis is where we R code gets executed.\nType 2+2, and hit Enter ↵.\nYou should discover that R is a calculator - R responds by telling us the answer (4).\nLet’s work through some basic operations (adding, subtracting, etc). For instance, can you work out what R will give you for each of these operations?\n\n\nArithmetic operations\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n2 + 5\n\n\n\n10 - 4\n\n\n\n2 * 5\n\n\n\n10 - (2 * 5)\n\n\n\n(10 - 2) * 5\n\n\n\n10 / 2\n\n\n\n3^2\n(the ^ symbol is “to the power of”)\n\n\n\n\n\nShow me the output\n\n\n\nCode\nOutput\n\n\n\n\n2 + 5\n7\n\n\n10 - 4\n6\n\n\n2 * 5\n10\n\n\n10 - (2 * 5)\n0\n\n\n(10 - 2) * 5\n40\n\n\n10 / 2\n5\n\n\n3^2\n9(the ^ symbol is “to the power of”)\n\n\n\n\n\n\nR can get stuck\nWhenever you see the blue sign >, it means R is ready and waiting for you to provide a command.\nIf you type 10 + and press Enter, you’ll see that instead of > you are left with +. This means that R is waiting for more.\nEither give it more (finish the command), or cancel the command by pressing the Escape key on your keyboard.\n\nAs well as performing arithmetic calculations, we can ask R things for which the answer is TRUE or FALSE, such as “Is 3 less than 5?”. If we type 3 < 5 and press Enter, then R should tell us that the statement we gave it is TRUE.\nThese computations don’t return numbers, but instead return logical values. There are few operators that we need to learn about here:\n\nEquality/Inequality: We use the symbols == to mean “is equal to”, and the symbols != for “is not equal to”.\n\nLess Than/Greater Than: To determine whether a value is less/greater than another value, we have our typical symbols < and >. We also have <= and >= when we want to include “less/greater than or equal to”.\n\nWe can combine these with & for “and”, | for “or”, and ! for “not”, to ask R all sorts of things.\nTry and work out what R should give you for each of these (or try it out yourself!):\n\n\nLogical operations\n\n\n\nCode\nOutput\n\n\n\n\n3 > 5\n\n\n\n3 <= 5\n\n\n\n3 >= 3\n\n\n\n3 == 5\n\n\n\n(2 * 5) == 10\n\n\n\n(2 * 5) != 11\n\n\n\n(2 == 2) & (3 == 4)\n\n\n\n(2 == 2) | (3 == 4)\n\n\n\n(2 == 2) & !(3 == 4)\nTRUE\n\n\n\n\n\nShow me the output\n\n\n\nCode\nOutput\n\n\n\n\n3 > 5\nFALSE\n\n\n3 <= 5\nTRUE\n\n\n3 >= 3\nTRUE\n\n\n3 == 5\nFALSE\n\n\n(2 * 5) == 10\nTRUE\n\n\n(2 * 5) != 11\nTRUE\n\n\n(2 == 2) & (3 == 4)\nFALSE\n\n\n(2 == 2) | (3 == 4)\nTRUE\n\n\n(2 == 2) & !(3 == 4)\nTRUE\n\n\n\n\n\n\nFALSE and TRUE as 0 and 1\nIt will become useful to think of these logical values (TRUE and FALSE) as also having intrinsic numeric values of 0 and 1.\nThis is how R will treat them if you ask it to do something that requires the values to be numeric. For example, the code TRUE + 3 will return 4, and FALSE + 3 will return 3.\n\n\n\n\n\n\nR has a memory\nWe can also store things in R’s memory, and to do that we just need to give them a name. Type x <- 5 and press Enter.\nWhat has happened? We don’t get any answer like we did with calculations such as 2 + 4. What we’ve done is stored in R’s memory something named x which has the value 5. We can now refer to the name and it will give us the value!\n\nAssigning names to things in R\nThe <- symbol, pronounced arrow, is what we use to assign a value to a named object:\n\nname <- value\n\n\nIf we now type x and press Enter, it gives us whatever we assigned to the name “x”. So it gives us the number 5.\nWhat is going to happen when we type x * 3? It will give us 15!\nIf you are working along with us, you might have also noticed that something else happened when we executed the code x <- 5. The thing we named x with a value of 5 suddenly appeared in the top-right window. This is known as the environment (Figure 2), and it shows everything that we store in R.\n\n\n\n\n\nFigure 2: Assigning names to objects stores them in R’s environment.\n\n\n\n\nNote, there are a few rules about names in R:\n\nNo spaces - spaces inside a name are not allowed (the spaces around the <- don’t matter):\nlucky_number <- 5 ✔ lucky number <- 5 ❌\nNames must start with a letter:\nlucky_number <- 5 ✔ 1lucky_number <- 5 ❌\nCase sensitive:\nlucky_number is different from Lucky_Number\nhere is a set of words you can’t use as names, including: if, else, for, in, TRUE, FALSE, NULL, NA, NaN, function (Don’t worry about remembering these, R will tell you if you make the mistake of trying to name a variable after one of these).\n\n\n\n\n\n\nThe Console and The Environment\nWhat we’ve done so far has made use of a couple of the different panes that we see in RStudio. When we’ve been executing R code (e.g. typing 2+5 or x<-5 and pressing Enter), we’ve been doing it in the console. The console is where all R code gets executed. However, as we’ll see below, it isn’t where all R code gets written.\nWe’ve also been learning about how we can store things in R’s memory (the environment) by assigning a name to them using the <- operator. The top-right pane of RStudio shows us the environment, where we can see everything that we have stored in R. Note that this also means we can keep track of what objects we have saved that are available for our use. If we never stored an object named “peppapig”, then R will give us an error when we do something like:\n\n2*peppapig\n\nError in eval(expr, envir, enclos): object 'peppapig' not found\n\n\nNow we have an idea of what the console and the environment are for. If you want a silly analogy, the console is like R’s mouth, where we feed it things, and the environment is just its memory, where it remembers what things are what. We can see these in Figure 3. Note however, that the console has been moved down to the bottom-left, as we are introducing a new pane above it. This is where we move to next.\n\n\n\n\n\nFigure 3: RStudio panes: Code is executed in the console, and objects are stored in the environment.\n\n\n\n\n\n\n\n\n\nR Scripts and the Editor\nWhat if we want to edit our code? Whatever we write in the console just disappears upwards. What if we want to change things we did earlier on?\nWhile the console is where code gets executed, it doesn’t have to be where code gets written.. We can write and edit our code in a separate place before we then send it to the console to be executed!!\nThe standard place to write and edit things is in an R scipt. We can open one by doing File > New File > R script, and a new file will open in the top-left pane of RStudio. The console will be shoved down to the bottom-left.\nIn the R script, we can write code. For instance, we might write:\n\nx <- 210\ny <- 15\nx / y\n\nNotice that nothing happens when we write each line. It’s not like writing in the console where R tells us the answers. This is because this code is not yet being executed. We haven’t actually fed it to R.\nThere are a couple of useful ways we can send the code to R.\n\nPosition your text-cursor (blinking vertical line) on the line of code we wish to run and press Ctrl+Enter (Windows) or Cmd+Enter (MacOS)\n\nPosition your text-cursor (blinking vertical line) on the line of code we wish to run and press the “Run” button in the top right of the script.\n\nWhen we do this, the line of code will be sent down to the console, where it will be executed, and R will do it’s thing.\nFor example, if we had sent the line x <- 210 down to the console, R would then store the number 210 with the name x in our environment (as in Figure 4). Additionally, it will move the text-cursor to the next line, so we can just press Ctrl+Enter again to run the next line (and so on.).\n\n\n\n\n\nFigure 4: Code written in the script can be sent down to the console, where it is executed. In this example, the execution of the code stores an object in the environment.\n\n\n\n\nBy writing our code in a file such as an R script before sending it to the console we can edit, save, and share our code. This makes it so much more useful than just using the console (which is more like writing on scratch paper, where we can’t keep anything).\nFor instance, let’s say we made a mistake earlier, and instead of “x” being 210, it should have been 211. Well, we can just edit the script, and re-run it.\n\nRegularly save your scripts.\nTo save an R script that is open, we just\n\nFile > Save (or Ctrl+S)\nLocate to the folder where we want to save the file.\n\ngive it an appropriate name, and click save.\n\nNOTE: When you save R script files, they terminate with a .R extension.\n\n\nLooking ahead to Rmarkdown\n\nIn addition to R scripts, there is another type of document we can create, known as “Rmarkdown”.\nRmarkdown documents combine the analytical power of R and the utility of a text-processor. We can have one document which contains all of our analysis as well as our written text, and can be compiled into a nicely formatted report. This saves us doing analysis in R and copying results across to Microsoft Word. It ensures our report accurately reflects our analysis. Everything that you’re reading now has all been written in Rmarkdown!\n\n\n\nFigure 5: An example RMarkdown document\n\n\nWe’re going to learn more about Rmarkdown documents and how to write them later on, but the broad idea is that we can writing normal text interspersed with “code-chunks” (i.e., chunks of code!). RMarkdown documents looks much like an R script, only the code is contained within the grey-boxes, and text is written in between (see Figure 5). RMarkdown documents can then be compiled to create a lovely .pdf, .html, or .docx file.\n\n\n\n\n\nFigure 6: RMarkdown Workflow\n\n\n\n\n\n\n\n\n\n\nThe Four RStudio Panes\nWe’ve now seen almost all the different panes in RStudio:\n\n\nThe console is where R code gets executed\nThe environment is R’s memory, you can assign something a name and store it here, and then refer to it by name in your code.\nThe editor is where you can write and edit R code in R scripts and Rmarkdown documents. You can then send this to the console for it to be executed.\n\n\n\n\n\n\n\n\nFigure 7: The Four Panes of RStudio\n\n\n\n\n\nWe are yet to use the bottom-right window, but this is an easy one to explain. It is where we can see any plots that we create, where we can browse our files, and where we can ask R for some help documentation. We’ll make more use of this later on, but for now try typing plot(x = 4, y = 2) into the console and seeing what happens.\n\n\nProjects and file organisation\nWe’re not going to speak too much about this here but one key thing to remember is that R is working from a specific place in your computer. You can find out where by typing getwd() into the console.\nAn easy way to keep things organised is to set up an “R project”. This basically associates a specific folder on your computer with your working in R, and it means it will automatically look for things in that folder.\nWe recommend that you start a project for this course (call it something like “usmr”). This will the be project that you open whenever you work on this course (RStudio will usually re-open the previous project you were working on when you closed it).\nWith that project open, we suggest that you start a new script for each week, in which you complete your exercises, and which you then remember to save!\nIf you haven’t already, we suggest you start an R project by using (in the top menu of RStudio), File > New Project and following the instructions. It will create a folder on your computer somewhere of your choosing, and you will now notice that if you click in the “Files” tab in the bottom right pane of RStudio, you can see the project folder!\n\n\n\n\n\n\nGood Habits\nAlong with regular saving of work and organising your files, it will be very useful in the long-run if we get used to always “starting fresh” when we open R.\nWe need to start thinking of the code that we write in an R script as a set of consecutive instructions that we can give to R in order to achieve our goal. It’s just a blank slate on which we write (in language R understands) “do this. now do this. now do this..” and so on.\nThis means that the script contains all the information needed.\nSo we can now:\n\nEmpty our environment\nRestart R\nRun all the code in our script (highlight multiple lines of code to run them all at once)\n\nand we’re back to where we are! This is great for when we make mistakes (we’re going to make many many mistakes!), because we can just clear everything, start at the top of our script, and work downwards to figure out what has gone wrong.\n\nTidying up\n\nTo empty our environment, we can click on the little broomstick icon .\nTo restart the R Session (not always necessary, but good practice) in the top menu, we choose Session > Restart R (or press Ctrl+Shift+F10).\n\n\nThe other very useful thing that we can do in a script is to write comments for ourselves or for others. By starting a line with a #, R will know that that entire line is not code, and so it won’t try to do anything with it. For instance, if we write these lines in our script, and send them both down to the console, nothing happens for the first line:\n\n\nComments\n\n# The line below will add 5 to 2. \n2+5\n\n[1] 7\n\n\n\n\nIf we forget the #\n\nThe line below will add 5 to 2. \n2+5\n\n\nError: unexpected symbol in “The line”\n\n\n\n\n\n\n\n\nUseful Settings\nBelow are a couple of our recommended settings for you to change as you begin your journey in R. After you’ve changed them, take a 5 minute break before moving on to the next reading.\n\n1. Clean environments\nAs you use R more, you will store lots of things with different names. Throughout this course alone, you’ll probably name hundreds of different things. This could quickly get messy within our project.\nWe can make it so that we have a clean environment each time you open RStudio. This will be really handy.\n\nIn the top menu, click Tools > Global Options…\nThen, untick the box for “Restore .RData into workspace at startup”, and change “Save workspace to .RData on exit” to Never:\n\n\n\n\n2. Wrapping code\nIn the editor, you might end up with a line of code which is really long, but you can make RStudio ‘wrap’ the line, so that you can see it all, without having to scroll:\n\nx <- 1+2+3+6+3+45+8467+356+8565+34+34+657+6756+456+456+54+3+78+3+3476+8+4+67+456+567+3+34575+45+2+6+9+5+6\n\n\nIn the top menu, click Tools > Global Options…\nIn the left menu of the box, click “Code”\nTick the box for “Soft-wrap R source files”"
  },
  {
    "objectID": "01b_data.html",
    "href": "01b_data.html",
    "title": "1B: More R - Basic Data Skills",
    "section": "",
    "text": "This reading:\n\nHow does R store data?\nWhat can R do?\nHow can we use R to access and manipulate data?"
  },
  {
    "objectID": "01b_data.html#accessing-subsets-of-data",
    "href": "01b_data.html#accessing-subsets-of-data",
    "title": "1B: More R - Basic Data Skills",
    "section": "Accessing subsets of data",
    "text": "Accessing subsets of data\nWhat if we want to extract certain subsections of our dataset, such as specific observational units or variables? This is where we learn about two important bits of R code used to access parts of data - the dollar sign $, and the square brackets [].\n\nThe dollar sign $\nThe dollar sign allows us to extract a specific variable from a dataframe. For instance, we can pull out the variable named “eye_color” in the data, by using $eye_color after the name that we gave our dataframe.\nRemember that each variable in a dataframe is a vector (a set of values). Once extracted, we will have a vector and not a dataframe.\n\nstarwars2$eye_color\n\n [1] \"blue\"          \"yellow\"        \"red\"           \"yellow\"       \n [5] \"brown\"         \"blue\"          \"blue\"          \"red\"          \n [9] \"brown\"         \"blue-gray\"     \"blue\"          \"blue\"         \n[13] \"blue\"          \"brown\"         \"black\"         \"orange\"       \n[17] \"hazel\"         \"blue\"          \"yellow\"        \"brown\"        \n[21] \"red\"           \"brown\"         \"blue\"          \"orange\"       \n[25] \"blue\"          \"brown\"         \"black\"         \"red\"          \n[29] \"blue\"          \"orange\"        \"orange\"        \"orange\"       \n[33] \"yellow\"        \"orange\"        NA              \"brown\"        \n[37] \"yellow\"        \"pink\"          \"hazel\"         \"yellow\"       \n[41] \"black\"         \"orange\"        \"brown\"         \"yellow\"       \n[45] \"black\"         \"brown\"         \"blue\"          \"orange\"       \n[49] \"yellow\"        \"black\"         \"blue\"          \"brown\"        \n[53] \"brown\"         \"blue\"          \"yellow\"        \"blue\"         \n[57] \"blue\"          \"brown\"         \"brown\"         \"brown\"        \n[61] \"brown\"         \"yellow\"        \"yellow\"        \"black\"        \n[65] \"black\"         \"blue\"          \"unknown\"       \"unknown\"      \n[69] \"gold\"          \"black\"         \"green, yellow\" \"blue\"         \n[73] \"brown\"         \"black\"         NA             \n\n\n\n\nThe square brackets []\nSquare brackets are used to do what is known as indexing (finding specific entries in your data).\nWe can retrieve bits of data by identifying the \\(i^{th}\\) entry(s) inside the square brackets, for instance:\n\n# assign the numbers 10, 20 ... 100 to the name \"somevalues\"\nsomevalues <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\n\n# pull out the 3rd entry\nsomevalues[3]\n\n[1] 30\n\n\nIn the above example, we have a vector (a single sequence of values), and so we can retrieve entries with the syntax:\n\nvector[entry]\n\n In a dataframe we have an extra dimension - we have rows and columns. Using square brackets with a dataframe needs us to specify both:\n\n\ndataframe[rows, columns]\n\n\nLet’s look at some examples:\n\n\nExamples of Indexing\n\nSpecifying row number and column number:\n\n\n# first row, fourth column\nstarwars2[1, 4]\n# tenth row, first column\nstarwars2[10, 1]\n\n\nIf we leave either rows or columns blank, then we will get out all of them:\n\n\n# tenth row, all columns\nstarwars2[10, ]\n# all rows, 2nd column\nstarwars2[ , 2]\n\n\nThere are is another way to identify column - we can use the name in quotation marks:\n\n\n# first row, \"species\" column\nstarwars2[1, \"species\"]\n\n\nWe can also ask for multiple rows, or multiple columns, or both! To do that, we use c():\n\n\n# the 1st AND the 6th rows, and the 1st AND 3rd columns\nstarwars2[c(1,6), c(1,3)] \n\n\nAnd we can specify a sequence using the colon, from:to:\n\n\n# FROM the 1st TO the 6th row, all columns\nstarwars2[1:6, ] \n\nWhy? Because the colon operator, `from:to`, creates a vector from the value     `from` to the value `to` in steps of 1.\n\n1:6\n\n[1] 1 2 3 4 5 6\n\n\n\nWe can even use the two accessors in combination:\n\n\n# extract the variable called \"name\" and show the 20th entry\nstarwars2$name[20]  \n\nThis represents the 20th name in the data.  \nNote: When we do this, we don't have the comma inside the square brackets. When we use the `$` to pull out a variable, such as `starwars2$name`, we no longer have a dataframe - `starwars2$name` doesn't have rows and columns, it just has a series of values - _it's a vector!_. So when you are using `[]` with a __vector__ (1 dimension) rather than a __dataframe__ (2 dimensions), you don't specify `[rows, columns]`, but simply `[entry]`. \n\n\nShow me the output\n\nSpecifying row number and column number:\n\n\n# first row, fourth column\nstarwars2[1, 4]\n\n[1] \"blue\"\n\n# tenth row, first column\nstarwars2[10, 1]\n\n[1] \"Obi-Wan Kenobi\"\n\n\n\nIf we leave either rows or columns blank, then we will get out all of them:\n\n\n# tenth row, all columns\nstarwars2[10, ]\n\n             name height    hair_color eye_color homeworld species\n10 Obi-Wan Kenobi    182 auburn, white blue-gray   Stewjon   Human\n\n# all rows, 2nd column\nstarwars2[ , 2]\n\n [1] 172 167  96 202 150 178 165  97 183 182 188 180 228 180 173 175 170 180 170\n[20] 183 190 177 175 180 150  88 160 191 170 196 224 206 137 112 170 163 175 180\n[39] 178  94 122 163 188 198 196 171 184 188 264 188 196 185 157 183 183 170 166\n[58] 165 193 191 183 168 198 229 213 167  79 193 191 178 216 234 188 206 180\n\n\n\nThere are is another way to identify column - we can use the name in quotation marks:\n\n\n# first row, \"species\" column\nstarwars2[1, \"species\"]\n\n[1] \"Human\"\n\n\n\nWe can also ask for multiple rows, or multiple columns, or both! To do that, we use c():\n\n\n# the 1st AND the 6th rows, and the 1st AND 3rd columns\nstarwars2[c(1,6), c(1,3)] \n\n            name  hair_color\n1 Luke Skywalker       blond\n6      Owen Lars brown, grey\n\n\n\nAnd we can specify a sequence using the colon, from:to:\n\n\n# FROM the 1st TO the 6th row, all columns\nstarwars2[1:6, ] \n\n            name height  hair_color eye_color homeworld species\n1 Luke Skywalker    172       blond      blue  Tatooine   Human\n2          C-3PO    167        <NA>    yellow  Tatooine   Human\n3          R2-D2     96        <NA>       red     Naboo   Droid\n4    Darth Vader    202        none    yellow  Tatooine   Human\n5    Leia Organa    150       brown     brown  Alderaan   Human\n6      Owen Lars    178 brown, grey      blue  Tatooine   Human\n\n\n\nWe can even use the two accessors in combination:\n\n\n# extract the variable called \"name\" and show the 20th entry\nstarwars2$name[20]  \n\n[1] \"Boba Fett\"\n\n\n\n\n\nThe dollar sign $\nUsed to extract a variable from a dataframe:\n\ndataframe$variable\n\nThe square brackets []\nUsed to extract parts of an R object by identifying rows and/or columns, or more generally, “entries”. Left blank will return all.\n\nvector[entries]\ndataframe[rows, columns]"
  },
  {
    "objectID": "01b_data.html#accessing-by-a-condition",
    "href": "01b_data.html#accessing-by-a-condition",
    "title": "1B: More R - Basic Data Skills",
    "section": "Accessing by a condition",
    "text": "Accessing by a condition\nWe can also do something really useful, which is to access all the entries in the data for which a specific condition is true.\nLet’s take a simple example to start:\n\nsomevalues <- c(10, 10, 0, 20, 15, 40, 10, 40, 50, 35)\n\nTo only select values which are greater than 20, we can use:\n\nsomevalues[somevalues > 20]\n\n[1] 40 40 50 35\n\n\n\nUnpacking: somevalues[somevalues > 20]\n First, let’s look at what somevalues > 20 does. It returns TRUE for the entries of somevalues which are greater than 20, and FALSE for the entries of somevalues that are not (that is, which are less than, or equal to, 20.\nThis statement somevalues > 20 is called the condition.\n\nsomevalues > 20\n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE\n\n\nWe can give a name to this sequence of TRUEs and FALSEs\n\ncondition <- somevalues > 20\ncondition\n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE\n\n\nNow consider putting the sequence of TRUEs and FALSEs inside the square brackets in somevalues[]. This returns only the entries of somevalues for which the condition is TRUE.\n\nsomevalues[condition]\n\n[1] 40 40 50 35\n\n\nSo what we can do is use a condition inside the square brackets to return all the values for which that condition is TRUE.\nNote that you don’t have to always give a name to the condition. This works too:\n\nsomevalues[somevalues > 20]\n\n[1] 40 40 50 35\n\n\n\n We can extend this same logic to a dataframe. Let’s suppose we want to access all the entries in our Star Wars data who have the value “Droid” in the species variable. To work out how to do this, we first need a line of code which defines our condition - one which returns TRUE for each entry of the species variable which is “Droid”, and FALSE for those that are not “Droid”.\nWe can use the dollar sign to pull out the species variable:\n\nstarwars2$species\n\n [1] \"Human\"        \"Human\"        \"Droid\"        \"Human\"        \"Human\"       \n [6] \"Human\"        \"Human\"        \"Droid\"        \"Human\"        \"Human\"       \n[11] \"Human\"        \"Human\"        \"Wookiee\"      \"Human\"        \"Rodian\"      \n[16] \"Hutt\"         \"Human\"        \"Human\"        \"Human\"        \"Human\"       \n[21] \"Trandoshan\"   \"Human\"        \"Human\"        \"Mon Calamari\" \"Human\"       \n[26] \"Ewok\"         \"Sullustan\"    \"Neimodian\"    \"Human\"        \"Gungan\"      \n[31] \"Gungan\"       \"Gungan\"       \"Toydarian\"    \"Dug\"          \"unknown\"     \n[36] \"Human\"        \"Zabrak\"       \"Twi'lek\"      \"Twi'lek\"      \"Vulptereen\"  \n[41] \"Xexto\"        \"Toong\"        \"Human\"        \"Cerean\"       \"Nautolan\"    \n[46] \"Zabrak\"       \"Tholothian\"   \"Iktotchi\"     \"Quermian\"     \"Kel Dor\"     \n[51] \"Chagrian\"     \"Human\"        \"Human\"        \"Human\"        \"Geonosian\"   \n[56] \"Mirialan\"     \"Mirialan\"     \"Human\"        \"Human\"        \"Human\"       \n[61] \"Human\"        \"Clawdite\"     \"Besalisk\"     \"Kaminoan\"     \"Kaminoan\"    \n[66] \"Human\"        \"Aleena\"       \"Skakoan\"      \"Muun\"         \"Togruta\"     \n[71] \"Kaleesh\"      \"Wookiee\"      \"Human\"        \"Pau'an\"       \"unknown\"     \n\n\nAnd we can ask R whether each value is equal to “Droid” (Remember: in R, we ask whether something is equal to something else by using a double-equals, ==). A single equal sign would be wrong, as it denotes assignment.\n\nstarwars2$species == \"Droid\"\n\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[73] FALSE FALSE FALSE\n\n\nFinally, we can use this condition inside our square brackets to access the entries of the data for which this condition is TRUE:\n\n# I would read the code below as: \n\n# \"In the starwars2 dataframe, give me all the rows for which the\n# condition starwars2$species==\"Droid\" is TRUE, and give me all the columns.\"\n\nstarwars2[starwars2$species == \"Droid\", ]\n\n   name height hair_color eye_color homeworld species\n3 R2-D2     96       <NA>       red     Naboo   Droid\n8 R5-D4     97       <NA>       red  Tatooine   Droid"
  },
  {
    "objectID": "01b_data.html#more-complex-conditions",
    "href": "01b_data.html#more-complex-conditions",
    "title": "1B: More R - Basic Data Skills",
    "section": "More complex conditions",
    "text": "More complex conditions\nThinking back to Section 1A when we first introduced R, we talked briefly about “logical operators”. Specifically, the operators &, |, and ! (for “and”, “or”,” and “not”), will come in handy now.\nFor instance, we can now extract all those in the dataset which are humans and taller than 190cm:\n\n# \"In the starwars2 dataframe, give me all the rows for which the\n# condition starwars2$species==\"Human\" AND starwars2$height > 190 are TRUE, \n# and give me all the columns.\"\nstarwars2[starwars2$species == \"Human\" & starwars2$height > 190, ]\n\n                  name height hair_color eye_color homeworld species\n4          Darth Vader    202       none    yellow  Tatooine   Human\n59               Dooku    193      white     brown   Serenno   Human\n60 Bail Prestor Organa    191      black     brown  Alderaan   Human\n\n\nOr we can extract all those in the dataset which are either droids or ewoks:\n\n# \"In the starwars2 dataframe, give me all the rows for which the\n# condition starwars2$species==\"Droid\" OR starwars2$species==\"Ewok\" is TRUE, \n# and give me all the columns.\"\nstarwars2[starwars2$species == \"Droid\" | starwars2$species == \"Ewok\", ]\n\n                    name height hair_color eye_color homeworld species\n3                  R2-D2     96       <NA>       red     Naboo   Droid\n8                  R5-D4     97       <NA>       red  Tatooine   Droid\n26 Wicket Systri Warrick     88      brown     brown     Endor    Ewok"
  },
  {
    "objectID": "01b_data.html#editing-specific-entries",
    "href": "01b_data.html#editing-specific-entries",
    "title": "1B: More R - Basic Data Skills",
    "section": "Editing specific entries",
    "text": "Editing specific entries\nNow that we’ve seen a few ways of accessing sections of data, we can learn how to edit them! One of the most common reasons you will need to modify entries in your data is in data cleaning. This is the process of identifying incorrect/incomplete/irrelevant data, and replacing/modifying/deleting them.\nAbove, we looked at the subsection of the data where the species variable had the entry “Droid”. Some of you may have noticed earlier that we had some data on C3PO. Is he not also a droid?\n\n\n\n(Looks pretty Droid-y to me! disclaimer: I know nothing about Star Wars 🙂 )\nJust as we saw above how to access specific entries, e.g.:\n\n# 2nd row, all columns\nstarwars2[2, ]\n\n   name height hair_color eye_color homeworld species\n2 C-3PO    167       <NA>    yellow  Tatooine   Human\n\n# 2nd row, 6th column (the \"species\" column)\nstarwars2[2,6]\n\n[1] \"Human\"\n\n\nWe can change these by assigning them a new value (remember the <- symbol). In doing so, we replace / overwrite / reassign the entry in the 2nd row and 6th column of the data (starwars2[2,6]) with the value “Droid”.\n\n# C3PO is a droid, not a human\nstarwars2[2,6] <- \"Droid\"\n# Look at the 2nd row now -\n# the entry in the \"species\" column has changed:\nstarwars2[2, ]\n\n   name height hair_color eye_color homeworld species\n2 C-3PO    167       <NA>    yellow  Tatooine   Droid"
  },
  {
    "objectID": "01b_data.html#editing-entries-via-a-condition",
    "href": "01b_data.html#editing-entries-via-a-condition",
    "title": "1B: More R - Basic Data Skills",
    "section": "Editing entries via a condition",
    "text": "Editing entries via a condition\nWe saw above how to access parts of data by means of a condition, with code such as:\n\n# \"In the starwars2 dataframe, give me all the rows for which the\n# condition starwars2$homeworld==\"Naboo\" is TRUE, and give me all the columns.\"\nstarwars2[starwars2$homeworld==\"Naboo\", ]\n\n            name height hair_color eye_color homeworld species\n3          R2-D2     96       <NA>       red     Naboo   Droid\n19     Palpatine    170       grey    yellow     Naboo   Human\n30 Jar Jar Binks    196       none    orange     Naboo  Gungan\n31  Roos Tarpals    224       none    orange     Naboo  Gungan\n32    Rugor Nass    206       none    orange     Naboo  Gungan\n52  Gregar Typho    185      black     brown     Naboo   Human\n53         Cordé    157      brown     brown     Naboo   Human\n58         Dormé    165      brown     brown     Naboo   Human\n\n\nWhat if we wanted to modify it so that every character from “Naboo” was actually of species “Nabooian”?\nWe can do that in a number of ways, all of which do the same thing - namely, they access parts of the data and assign them the new value “Nabooian”.\nStudy the lines of code below and their interpretations:\n\n# In the starwars2 data, give the rows for which condition \n# starwars2$homeworld==\"Naboo\" is TRUE, and select only the \"species\" column. \n# Assign to these selected entries the value \"Nabooian\".\nstarwars2[starwars2$homeworld==\"Naboo\", \"species\"] <- \"Nabooian\"\n\n# In the starwars2 data, give the rows for which condition \n# starwars2$homeworld==\"Naboo\" is TRUE, and select only the 6th column. \n# Assign to these selected entries the value \"Nabooian\".\nstarwars2[starwars2$homeworld==\"Naboo\", 6] <- \"Nabooian\"\n\n# Extract the species variable from the starwars2 data (it's a vector).\n# Pick the entries for which the condition starwars2$homeworld==\"Naboo\" is TRUE.\n# Assign to these selected entries the value \"Nabooian\".\nstarwars2$species[starwars2$homeworld==\"Naboo\"] <- \"Nabooian\""
  },
  {
    "objectID": "01b_data.html#addingchanging-a-variable",
    "href": "01b_data.html#addingchanging-a-variable",
    "title": "1B: More R - Basic Data Skills",
    "section": "Adding/Changing a variable",
    "text": "Adding/Changing a variable\nAnother thing we might want to do is change a whole variable (a whole column) in some way.\nThe logic is exactly the same, for instance, we can take the variable “height” from the dataframe “starwars2”, dividing it by 100 via starwars2$height / 100, and then assign the result to the same variable name in the data, i.e. we overwrite the column:\n\nstarwars2$height <- starwars2$height / 100\n\nWe could instead have added a new column named “height_m” with those values if we did not want to overwrite “height”:\n\nstarwars2$height_m <- starwars2$height / 100\n\nThis would have left the “height” variable as-is, and created a new one called “height2” which was the values in “height” divided by 100."
  },
  {
    "objectID": "01b_data.html#removing-rows-or-columns",
    "href": "01b_data.html#removing-rows-or-columns",
    "title": "1B: More R - Basic Data Skills",
    "section": "Removing rows or columns",
    "text": "Removing rows or columns\nLastly, we might want to change the data by removing a row or a column. Again, the logic remains the same, in that we use <- to assign the edited data to a name (either a new name, thus creating a new object, or an existing name, thereby overwriting that object).\nFor instance, notice that the 35th and 75th rows of our data probably aren’t a valid observation - I’m reasonably sure that Marge and Homer Simpson never appeared in Star Wars:\n\nstarwars2[c(35,75), ]\n\n            name height hair_color eye_color   homeworld species\n35 Marge Simpson    1.7       Blue      <NA> Springfield unknown\n75 Homer Simpson    1.8       <NA>      <NA> Springfield unknown\n\n\nWe can remove a certain row(s) by using a minus sign - inside the square brackets\n\n# everything minus the 75th row\nstarwars2[-75, ]\n# everything minus the (35th and 75th rows)\nstarwars2[-c(35, 75), ]\n\nAnd we can simply re-use the name “starwars2” to overwrite the data and make this change take effect (rather than just print out the result, which the code above did):\n\nstarwars2 <- starwars2[-c(35, 75), ]\n\n(now, in the environment pane of Rstudio, the object named “starwars2” will say 73 observations, rather than 75, which it had before - we’ve removed the 2 rows)\n The same logic applies for columns:\n\n# Create a new object called \"anonymous_starwars2\" and assign it \n# to the values which are the \"starwars2\" dataframe minus the \n# 1st column (the \"name\" column):\nanonymous_starwars2 <- starwars2[, -1]\n# dimensions of our initial data\ndim(starwars2)\n\n[1] 73  6\n\n# the data we just assigned has one fewer columns\ndim(anonymous_starwars2)\n\n[1] 73  5"
  },
  {
    "objectID": "02_ex.html",
    "href": "02_ex.html",
    "title": "Week 2 Exercises: More R; Estimates & Intervals",
    "section": "",
    "text": "Data manipulation & visualisation\n\nQuestion 1\n\n\nCreate a new variable in the dataset which indicates whether people are taller than 6 foot (182cm).\n\nHints:\nYou might want to use mutate(). Remember to make the changes apply to the objects in your environment, rather than just printing it out.\ndata <- data %>% mutate(...)\n(see 2A #tidyverse-and-pipes)\n\n\n\n\n\n Solution \n\n\n\nlibrary(tidyverse)\nsurveydata <- read_csv(\"https://uoepsy.github.io/data/surveydata_allcourse22.csv\")\n\nsurveydata <- surveydata %>%\n  mutate(\n    over6ft = height > 182\n  )\n\n\n\n\n\nQuestion 2\n\n\nWhat percentage of respondents to the survey (for whom we have data on their height) are greater than 6 foot tall?\n\nHints:\n\nTry table(), and then think about how we can convert the counts to percentages (what does sum() of the table give you?).\n\ntable() will actually by default count only those values which aren’t missing, so this means you don’t have to do anything extra here (if you wanted it to also count the missing values, we can use table(data$variable, useNA = \"ifany\"))\n\nSee also 2A #categorical.\n\n\n\n\n\n\n Solution \n\n\nWe can divide the table by the sum of the table\n\ntable(surveydata$over6ft) / sum(table(surveydata$over6ft))\n\n\n     FALSE       TRUE \n0.95575221 0.04424779 \n\n\nWe can also use prop.table()\n\nprop.table(table(surveydata$over6ft))\n\n\n     FALSE       TRUE \n0.95575221 0.04424779 \n\n\n\n\n\n\nQuestion 3\n\n\nhow many of USMR students in 2022/23 are born in the same month as you?\n\nHints:\nThis will involve filtering your data to current USMR students first.\nIn tidyverse you can make a table using ... %>% select(variable) %>% table()\nYou can also try ... %>% count(variable) to get the same information.\n\n\n\n\n\n Solution \n\n\n\nsurveydata %>% \n  filter(course == \"usmr\", year==\"2022\") %>%\n  count(birthmonth)\n\n# A tibble: 12 × 2\n   birthmonth     n\n   <chr>      <int>\n 1 apr            6\n 2 aug            6\n 3 dec            6\n 4 feb            1\n 5 jan            3\n 6 jul           10\n 7 jun            8\n 8 mar            5\n 9 may           10\n10 nov            6\n11 oct            3\n12 sep            4\n\n\n\n\n\n\nQuestion 4\n\n\nCalculate the mean and standard deviation of heights of all respondents to the survey.\nCan you (also) do this using the tidyverse syntax?\n\nHints:\nWe can do it with mean(data$variable), but it will be useful to practice tidyverse style. You’ll want to summarise() the data.\nWe’re likely to have missing data in here, so na.rm=TRUE will be handy (see 2A #numeric)\n\n\n\n\n\n Solution \n\n\nThis returns us NA:\n\nmean(surveydata$height)\n\n[1] NA\n\n\nSo we need to make sure we use na.rm = TRUE (we can use T as a shorthand for TRUE).\n\nmean(surveydata$height, na.rm = T)\n\n[1] 167.8649\n\nsd(surveydata$height, na.rm = T)\n\n[1] 8.351367\n\nsurveydata %>% \n  summarise(\n    meanheight = mean(height, na.rm = T),\n    sdheight = sd(height, na.rm = T)\n  )\n\n# A tibble: 1 × 2\n  meanheight sdheight\n       <dbl>    <dbl>\n1       168.     8.35\n\n\n\n\n\n\nQuestion 5\n\n\nPlot the distribution of heights of all respondents. Try to make it ‘publication ready’.\n\nHints:\nhist() won’t cut it here, we’re going to want ggplot, which was introduced in 2A #ggplot.\n\n\n\n\n\n Solution \n\n\n\nggplot(surveydata, aes(x=height)) + \n  geom_histogram(binwidth = 5) + \n  labs(x = \"Height (cm)\", \n       y = \"Frequency\", \n       title = \"Heights of respondents to the survey\") + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 6\n\n\nFor respondents from each of the different courses, calculate the mean and standard deviation of heights.\n\nHints:\nThis is just like question 4 - we want to summarise our data. Only this time we need to group_by something else first.\n\n\n\n\n\n Solution \n\n\nWe’re using the same code as we did for question 4, but we’ve added in one new line using group_by().\n\nsurveydata %>% \n  group_by(course) %>%\n  summarise(\n    meanheight = mean(height, na.rm = T),\n    sdheight = sd(height, na.rm = T)\n  )\n\n# A tibble: 4 × 3\n  course meanheight sdheight\n  <chr>       <dbl>    <dbl>\n1 dapr1        168.     7.36\n2 dapr2        167.     7.79\n3 rms2         167.     7.98\n4 usmr         168.     9.08\n\n\n\n\n\n\nQuestion 7\n\n\nPlot the distributions of heights for each course.\nBased on your answer to the previous question, can you picture what the distributions are going to look like before you plot them?\n\nHints:\nTry looking up the documentation for ?facet_wrap. It is an incredibly useful extension of ggplot which allows you to create the same plot for different groups.\nYou might also want to add an extra aesthetic mapping from the course variable to some feature of your plot (e.g. ‘colour’ or ‘fill’).\n\n\n\n\n\n Solution \n\n\n\nggplot(surveydata, aes(x=height, fill = course)) + \n  geom_histogram(binwidth = 5) + \n  facet_wrap(~course) + \n  labs(x = \"Height (cm)\", \n       y = \"Frequency\", \n       title = \"Heights of respondents to the survey\") + \n  guides(fill = \"none\") + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 8\n\n\nWhat proportion of respondents to the survey are taller than you?\n\nHints:\n\nRemember that we can sum() a condition as a quick way of counting: sum(data$variable == \"thing\") adds up all the TRUE responses.\n\nWe’re going to need to make sure we tell sum() to ignore the missing values (na.rm=TRUE will come in handy again).\n\n\nWe’re also going to need to figure out what our denominator is when calculating the proportion \\(\\frac{\\text{nr people taller than me}}{\\text{total nr of people}}\\).\nThe denominator (the bit on the bottom) should really be the total number of people for whom we have height data. We should exclude the missing data because otherwise we will be counting them as if they are all shorter than you (but they might not be - we don’t know!). To find out how many in a variable are not NAs, we might need to use is.na() (see below for a little example for you to play with)\nCan you also do this in tidyverse syntax? (most of it can be done inside summarise()).\n\n\nis.na()\nThe is.na(x) function is a bit like asking x == NA. It is necessary because NA is a special thing in R, which means we can’t ask questions like 3 == NA (because we don’t know what that NA is - it could be 3 for all we know!).\n\nmynumbers <- c(1,5,NA,3,6,NA)\n# for each number, TRUE if it's an NA, otherwise FALSE\nis.na(mynumbers)\n\n[1] FALSE FALSE  TRUE FALSE FALSE  TRUE\n\n# ! means \"not\", so this is asking if each number is \"not\" an NA\n!is.na(mynumbers)\n\n[1]  TRUE  TRUE FALSE  TRUE  TRUE FALSE\n\n# how many non-NAs are there? \nsum(!is.na(mynumbers))\n\n[1] 4\n\n\n\n\n\n\n\n\n Solution \n\n\nThere are this many people who are taller than me. We need to ignore the NAs again:\n\nsum(surveydata$height > 177, na.rm = T)\n\n[1] 59\n\n\nTo get the total number of respondents with height data, we can sum the non-NA values:\n\nsum(!is.na(surveydata$height))\n\n[1] 452\n\n\nAnd if we divide the number who are taller than me by the total number of respondents, we get the proportion:\n\nsum(surveydata$height > 177, na.rm = T) / sum(!is.na(surveydata$height))\n\n[1] 0.130531\n\n\nWe can do all this inside tidyverse too!\n\nsurveydata %>% \n  summarise(\n    n_taller = sum(height > 177, na.rm = T),\n    n_heights = sum(!is.na(height)),\n    prop_taller = n_taller / n_heights\n  )\n\n# A tibble: 1 × 3\n  n_taller n_heights prop_taller\n     <int>     <int>       <dbl>\n1       59       452       0.131\n\n\n\n\n\n\n\n\n\n\nEstimates & Intervals\nFor these next exercises we are going to be focusing on self-perceived sleep quality ratings. Our survey contains a set of respondents who completed the question below. We’re going to use this sample to get an estimate of the sleep quality rating in the wider population.\n\n\n\n\n\n\n\n\n\n\nQuestion 9\n\n\nWe only asked the sleep quality rating question to students in USMR in the 2022/23 academic year, so to make things easier, let’s create a subset of the dataset which includes only those students.\n\nHints:\nThis will need some filtering, and assigning (usmrdata <-) to a new name.\n\n\n\n\n\n Solution \n\n\n\nusmrdata <- surveydata %>% \n  filter(course == \"usmr\", year == \"2022\")\ndim(usmrdata)\n\n[1] 68 21\n\n\n\n\n\n\nQuestion 10\n\n\nFor the USMR students in the 2022/23 academic cohort, calculate the following:\n\nmean Sleep-Quality rating\nstandard deviation of Sleep-Quality ratings\nnumber of respondents who completed Sleep-Quality rating\n\n\nHints:\nYou can do this with things like mean(data$variable), or you can do it all in tidyverse (see the example of summarise in the intro to tidyverse: 2A #tidyverse-and-pipes).\n\n\n\n\n\n Solution \n\n\n\nusmrdata %>% \n  summarise(\n    m_sleep = mean(sleeprating, na.rm = TRUE),\n    sd_sleep = mean(sleeprating, na.rm = TRUE),\n    n_sleep = sum(!is.na(sleeprating)), \n    n_total = n() # n() will give the total count\n  )\n\n# A tibble: 1 × 4\n  m_sleep sd_sleep n_sleep n_total\n    <dbl>    <dbl>   <int>   <int>\n1    67.4     67.4      67      68\n\n\n\n\n\n\nQuestion 11\n\n\nUsing your answers to the previous question, construct a 95% confidence interval for the average Sleep-Quality rating.\nWhy might it be a bad idea to use this as an estimate of the average Sleep-Quality rating of the global population?\n\nHints:\n\nThe previous question gives you all the pieces that you need. You’ll just need to put them together in the way seen in 2B #confidence-intervals.\n\nThink about who makes up the sample (e.g. USMR students). Are they representative of the population we are trying to generalise to?\n\n\n\n\n\n\n Solution \n\n\n\n\n\nSo we have our estimate, which is the mean sleep quality rating in our sample: \\(\\bar x = 67.37\\). And we have a standard deviation of our sleep quality ratings: \\(s = 20.98\\). While our sample has 68 students in it, only 67 responded to the sleep question, so really our \\(n\\) for this calculation is 67.\nWe can calculate our standard error as \\(SE = \\frac{s}{\\sqrt{n}}\\), which is \\(\\frac{20.98}{\\sqrt{67}} = 2.56\\).\nThis tells us that if we were to collect lots of samples of size 67, we would expect their mean sleep quality ratings to be normally distributed around 67.37 with a standard deviation of 2.56. So we can expect that 95% of the samples we could take would have means between \\(1.96 \\times 2.56\\) above and below 67.37. Those are our confidence intervals!\n\\[\n\\begin{align}\n\\text{Mean = }& 67.37 \\\\\n\\text{95\\% CI = }& 67.37 \\pm 1.96 \\times 2.56 \\\\\n&[62.35, 72.39]\n\\end{align}\n\\]\nHow well does our sample represent the global population? Well, for one thing, you’re all university students, and while there will be many students from across the globe, it’s highly likely that our sample is biased towards certain countries or continents. Additionally, we’re going to have a lot of people in our sample in a fairly narrow age range. It might be that sleep quality changes a lot as people age, in which case our results are probably not going to generalise very well to, for instance, people who are 70 years old. There are lots more ways in which our sample might be biased - you can find a nice little 1 page article at https://www.nature.com/articles/466029a to get you thinking.\n\n\n\n`"
  },
  {
    "objectID": "02a_measurement.html",
    "href": "02a_measurement.html",
    "title": "2A: Measurement & Distributions",
    "section": "",
    "text": "This reading:\n\nWhat different types of data can we collect?\nHow can we summarise distributions of different types of data?\n\nWhat are the different styles of coding in R?\nHow do we make nice plots of distributions?"
  },
  {
    "objectID": "02a_measurement.html#categorical",
    "href": "02a_measurement.html#categorical",
    "title": "2A: Measurement & Distributions",
    "section": "Categorical",
    "text": "Categorical\n\nCategorical variables tell us what group or category each individual belongs to. Each distinct group or category is called a level of the variable.\n\n\n\n\n\n\n\n\nType\nDescription\nExample\n\n\n\n\nNominal (Unordered categorical)\nA categorical variable with no intrinsic ordering among the levels.\nSpecies: Dog, Cat, Parrot, Horse, …\n\n\nOrdinal (Ordered categorical)\nA categorical variable which levels possess some kind of order\nLevel: Low, Medium, High\n\n\nBinary categorical\nA special case of categorical variable with only 2 possible levels\nisDog: Yes or No.\n\n\n\nIf we want to summarise a categorical variable into a single number, then the simplest approach is to use the mode:\n\nMode: The most frequent value (the value that occurs the greatest number of times).\n\nWhen we have ordinal variables, there is another option, and that is to use the median:\n\nMedian: For ordinal variables only, this is the value for which 50% of observations are lower and 50% are higher. It is the mid-point of the values when they are rank-ordered.\n\nWhen we use the median as our measure of “central tendency” (i.e. the middle of the distribution) and we want to discuss how spread out the spread are around it, then we will want to use quartiles. The Inter-Quartile Range (IQR) is obtained by rank-ordering all the data, and finding the points at which 25% (one quarter) and 75% (three quarters) of the data falls below (this makes the median the “2nd quartile”).\n\nIn our dataset on passwords, we have various categorical variables, such as the type of password (categories like “animal”, “fluffy” etc).\nThere are various ways we might want to summarise categorical variables like this. We have already seen the code to do this in our example of the dice simulation - we can simply counting the frequencies in each level:\n\ntable(pwords$type)\n\n\n             animal          cool-macho              fluffy                food \n                 29                  79                  44                  11 \n               name           nerdy-pop    password-related     rebellious-rude \n                183                  30                  15                  11 \nsimple-alphanumeric               sport \n                 61                  37 \n\n\nThis shows us that the mode (most common) is “name” related passwords.\nWe could also convert these to proportions, by dividing each of these by the total number of observations. For instance, here are the percentages of passwords of each type:\n\ntable(pwords$type) / sum(table(pwords$type)) * 100\n\n\n             animal          cool-macho              fluffy                food \n                5.8                15.8                 8.8                 2.2 \n               name           nerdy-pop    password-related     rebellious-rude \n               36.6                 6.0                 3.0                 2.2 \nsimple-alphanumeric               sport \n               12.2                 7.4 \n\n\n\nOften, if the entries in a variable are characters (letters), then many functions in R (like table()) will treat it the same as if it is a categorical variable. However, this is not always the case, so it is good to tell R specifically that each variable is a categorical variable. There is a special way that we tell R that a variable is categorical - we set it to be a “factor”. Note what happens when we make the “type” and “strength_cat” variables to be a factor:\n\npwords$type <- factor(pwords$type)\npwords$strength_cat <- factor(pwords$strength_cat)\nsummary(pwords)\n\n      rank         password                          type        cracked      \n Min.   :  1.0   Length:500         name               :183   Min.   : 1.290  \n 1st Qu.:125.8   Class :character   cool-macho         : 79   1st Qu.: 3.430  \n Median :250.5   Mode  :character   simple-alphanumeric: 61   Median : 3.720  \n Mean   :250.5                      fluffy             : 44   Mean   : 5.603  \n 3rd Qu.:375.2                      sport              : 37   3rd Qu.: 3.720  \n Max.   :500.0                      nerdy-pop          : 30   Max.   :92.270  \n                                    (Other)            : 66                   \n    strength      strength_cat\n Min.   : 1.000   medium:402  \n 1st Qu.: 6.000   strong: 25  \n Median : 7.000   weak  : 73  \n Mean   : 6.768               \n 3rd Qu.: 8.000               \n Max.   :10.000               \n                              \n\n\nR now recognises that there a set number of possible response options, or “levels”, for these variables. We can see what they are using:\n\nlevels(pwords$strength_cat)\n\n[1] \"medium\" \"strong\" \"weak\"  \n\n\nThe “strength_cat” variable specifically has an ordering to the levels, so we might be better off also telling R about this ordering. We do this like so:\n\npwords$strength_cat <- factor(pwords$strength_cat, ordered = TRUE, levels = c(\"weak\",\"medium\",\"strong\"))\n\n\nSometimes, we might have a variable that we know is categorical, but we might want to treat it as a set of numbers instead. A very common example in psychological research is Likert data (questions measured on scales such as “Strongly Disagree”>>“Disagree”>>…>>“Strongly Agree”).\nIt is often useful to have these responses as numbers (e.g. 1 = “Strongly Disagree” to 5 = “Strongly Agree”), as this allows us to use certain functions in R more easily. For instance, the median() and IQR() functions require the data to be numbers.\nThis will not work:\n\nmedian(pwords$strength_cat)\n\nError in median.default(pwords$strength_cat): need numeric data\n\n\nWhen we ask R to convert a factor to a numeric variable, it will give turn the first category into 1, the second category to 2, and so on. As R knows that our strength_cat variable is the ordered categories “weak”>>“medium”>>“strong”, then as.numeric(pwords$strength_cat) will turn these to 1s, 2s, and 3s.\n\nmedian(as.numeric(pwords$strength_cat))\n\n[1] 2"
  },
  {
    "objectID": "02a_measurement.html#numeric",
    "href": "02a_measurement.html#numeric",
    "title": "2A: Measurement & Distributions",
    "section": "Numeric",
    "text": "Numeric\n\nNumeric (or quantitative) variables consist of numbers, and represent a measurable quantity. Operations like adding and averaging make sense only for numeric variables.\n\n\n\n\n\n\n\n\nType\nDescription\nExample\n\n\n\n\nContinuous\nVariables which can take any real number within the specified range of measurement\nHeight: 172, 165.2, 183, …\n\n\nDiscrete\nVariables which can only take integer number values. For instance, a counts can only take positive integer values (0, 1, 2, 3, etc.)\nNumber_of_siblings: 0, 1, 2, 3, 4, …\n\n\n\nOne of the most frequently used measures of central tendency for numeric data is the mean. The mean is calculated by summing all of the observations together and then dividing by the total number of obervations (\\(n\\)).\n\nMean: \\(\\bar{x}\\)\nWhen we have sampled some data, we denote the mean of our sample with the symbol \\(\\bar{x}\\) (sometimes referred to as “x bar”). The equation for the mean is:\n\\[\\bar{x} = \\frac{\\sum\\limits_{i = 1}^{n}x_i}{n}\\]\n\n Help reading mathematical formulae.\n\n\nThis might be the first mathematical formula you have seen in a while, so let’s unpack it.\nThe \\(\\sum\\) symbol is used to denote a series of additions - a “summation”.\nWhen we include the bits around it: \\(\\sum\\limits_{i = 1}^{n}x_i\\) we are indicating that we add together all the terms \\(x_i\\) for values of \\(i\\) between \\(1\\) and \\(n\\):\n\\[\\sum\\limits_{i = 1}^{n}x_i \\qquad = \\qquad x_1+x_2+x_3+...+x_n\\]\nSo in order to calculate the mean, we do the summation (adding together) of all the values from the \\(1^{st}\\) to the \\(n^{th}\\) (where \\(n\\) is the total number of values), and we divide that by \\(n\\).\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf we are using the mean as our as our measure of central tendency, we can think of the spread of the data in terms of the deviations (distances from each value to the mean).\nRecall that the mean is denoted by \\(\\bar{x}\\). If we use \\(x_i\\) to denote the \\(i^{th}\\) value of \\(x\\), then we can denote deviation for \\(x_i\\) as \\(x_i - \\bar{x}\\).\nThe deviations can be visualised by the red lines in Figure 2.\n\n\n\n\n\nFigure 2: Deviations from the mean\n\n\n\n\n\nThe sum of the deviations from the mean, \\(x_i - \\bar x\\), is always zero\n\\[\n\\sum\\limits_{i = 1}^{n} (x_i - \\bar{x}) = 0\n\\]\nThe mean is like a center of gravity - the sum of the positive deviations (where \\(x_i > \\bar{x}\\)) is equal to the sum of the negative deviations (where \\(x_i < \\bar{x}\\)).\n\nBecause deviations around the mean always sum to zero, in order to express how spread out the data are around the mean, we must we consider squared deviations.\nSquaring the deviations makes them all positive. Observations far away from the mean in either direction will have large, positive squared deviations. The average squared deviation is known as the variance, and denoted by \\(s^2\\)\n\nVariance: \\(s^2\\)\nThe variance is calculated as the average of the squared deviations from the mean.\nWhen we have sampled some data, we denote the mean of our sample with the symbol \\(\\bar{x}\\) (sometimes referred to as “x bar”). The equation for the variance is:\n\\[s^2 = \\frac{\\sum\\limits_{i=1}^{n}(x_i - \\bar{x})^2}{n-1}\\]\n\n Optional: Why n minus 1?\n\n\nThe top part of the equation \\(\\sum\\limits_{i=1}^{n}(x_i - \\bar{x})^2\\) can be expressed in \\(n-1\\) terms, so we divide by \\(n-1\\) to get the average.\n Example: If we only have two observations \\(x_1\\) and \\(x_2\\), then we can write out the formula for variance in full quite easily. The top part of the equation would be:\n\\[\n\\sum\\limits_{i=1}^{2}(x_i - \\bar{x})^2 \\qquad = \\qquad (x_1 - \\bar{x})^2 + (x_2 - \\bar{x})^2\n\\]\nThe mean for only two observations can be expressed as \\(\\bar{x} = \\frac{x_1 + x_2}{2}\\), so we can substitute this in to the formula above.\n\\[\n(x_1 - \\bar{x})^2 + (x_2 - \\bar{x})^2 \\qquad = \\qquad \\left(x_1 - \\frac{x_1 + x_2}{2}\\right)^2 + \\left(x_2 - \\frac{x_1 + x_2}{2}\\right)^2\n\\]\nWhich simplifies down to one value:\n\\[\n\\left(x_1 - \\frac{x_1 + x_2}{2}\\right)^2 + \\left(x_2 - \\frac{x_1 + x_2}{2}\\right)^2 \\qquad = \\qquad  \\left(\\frac{x_1 - x_2}{\\sqrt{2}}\\right)^2\n\\]\n So although we have \\(n=2\\) datapoints (\\(x_1\\) and \\(x_2\\)), the top part of the equation for the variance has only 1 (\\(n-1\\)) units of information. In order to take the average of these bits of information, we divide by \\(n-1\\).\n\n\n\n\nOne difficulty in interpreting variance as a measure of spread is that it is in units of squared deviations. It reflects the typical squared distance from a value to the mean.\nConveniently, by taking the square root of the variance, we can translate the measure back into the units of our original variable. This is known as the standard deviation.\n\nStandard Deviation: \\(s\\)\nThe standard deviation, denoted by \\(s\\), is a rough estimate of the typical distance from a value to the mean.\nIt is the square root of the variance (the typical squared distance from a value to the mean).\n\\[\ns = \\sqrt{\\frac{\\sum\\limits_{i=1}^{n}(x_i - \\bar{x})^2}{n-1}}\n\\]\n\n\nIn the passwords dataset, we only have one continuous variable, and that is the “cracked” variable, which if we recall is the “Time to crack by online guessing”. You might be questioning whether the “strength” variable, which ranges from 1 to 10 is numeric? This depends on whether we think that statements like “a password of strength 10 is twice as strong as a password of strength 5”.\nFor now, we’ll just look at the “cracked” variable.\nTo calculate things like means and standard deviations in R is really easy, because there are functions that do them all for us.\nFor instance, we can do the calculation by summing the cracked variable, and dividing by the number of observations (in our case we have 500 passwords):\n\n# get the values in the \"cracked\" variable from the \"pwords\" dataframe, and\n# sum them all together. Then divide this by 500\nsum(pwords$cracked)/500\n\n[1] 5.60266\n\n\nOr, more easily, we can use the mean() function:\n\nmean(pwords$cracked)\n\n[1] 5.60266\n\n\nWe can get R to calculate the variance and standard deviation with the var() and sd() functions:\n\nvar(pwords$cracked)\n\n[1] 71.16618\n\nsd(pwords$cracked)\n\n[1] 8.436005\n\n\nand just to prove to ourselves:\n\nsd(pwords$cracked)^2 == var(pwords$cracked)\n\n[1] TRUE\n\n\n\nIf a column of our dataset contains only numbers, R will typically just interpret it as a numeric variable. However, we should still be careful; remember what happens if we have just one erroneous entry in there - they can all change to be characters (surrounded by quotation marks):\n\nc(1,3,6,\"peppapig\",3)\n\n[1] \"1\"        \"3\"        \"6\"        \"peppapig\" \"3\"       \n\n\nWe can force a variable to be numeric by using as.numeric(), which will also coerce any non-numbers to be NA (not applicable):\n\nas.numeric(c(1,3,6,\"peppapig\",3))\n\n[1]  1  3  6 NA  3\n\n\nIf there is an NA in the variable, many functions like mean(), var() and sd() will not compute:\n\nx <- c(1, 3, 6, NA, 3)\nmean(x)\n\n[1] NA\n\n\nHowever, we can ask these functions to remove the NAs prior to the computation:\n\nmean(x, na.rm = TRUE)\n\n[1] 3.25"
  },
  {
    "objectID": "02a_measurement.html#boxplots",
    "href": "02a_measurement.html#boxplots",
    "title": "2A: Measurement & Distributions",
    "section": "Boxplots",
    "text": "Boxplots\nBoxplots provide a useful way of visualising the interquartile range (IQR). You can see what each part of the boxplot represents in Figure Figure 4.\n\n\n\n\n\nFigure 4: Anatomy of a boxplot\n\n\n\n\nWe can create a boxplot of our age variable using the following code:\n\n# Notice, we put strength on the x axis, making the box plot vertical. \n# If we had set aes(y = strength) instead, then it would simply be rotated 90 degrees \nggplot(data = pwords, aes(x = strength)) +\n  geom_boxplot()"
  },
  {
    "objectID": "02a_measurement.html#histograms",
    "href": "02a_measurement.html#histograms",
    "title": "2A: Measurement & Distributions",
    "section": "Histograms",
    "text": "Histograms\nNow that we have learned about the different measures of central tendency and of spread, we can look at how these map to how visualisations of numeric variables look.\nWe can visualise numeric data using a histogram, which shows the frequency of values which fall within bins of an equal width.\nTo do this, we’re going to use some new data, on 120 participants’ IQ scores (measured on the Wechsler Adult Intelligence Scale (WAIS)), their ages, and their scores on 2 other tests. The data are available at https://uoepsy.github.io/data/wechsler.csv\n\nwechsler <- read_csv(\"https://uoepsy.github.io/data/wechsler.csv\")\n\n\n# make a ggplot with the \"wechsler\" data. \n# on the x axis put the possible values in the \"iq\" variable,\n# add a histogram geom (will add bars representing the count \n# in each bin of the variable on the x-axis)\nggplot(data = wechsler, aes(x = iq)) + \n  geom_histogram()\n\n\n\n\n\n\n\n\nWe can specifiy the width of the bins:\n\nggplot(data = wechsler, aes(x = iq)) + \n  geom_histogram(binwidth = 5)\n\n\n\n\n\n\n\n\nLet’s take a look at the means and standard deviations of participants’ scores on the other tests (the test1 and test2 variables).\nNote how nicely we can do this with our newfound tidyverse skills!\n\nwechsler %>% \n  summarise(\n    mean_test1 = mean(test1),\n    sd_test1 = sd(test1),\n    mean_test2 = mean(test2),\n    sd_test2 = sd(test2)\n  )\n\n# A tibble: 1 × 4\n  mean_test1 sd_test1 mean_test2 sd_test2\n       <dbl>    <dbl>      <dbl>    <dbl>\n1       49.3     7.15       51.2     14.4\n\n\nTests 1 and 2 have similar means (around 50), but the standard deviation of Test 2 is almost double that of Test 1. We can see this distinction in the visualisation below - the histograms are centered at around the same point (50), but the one for Test 2 is a lot wider than that for Test 1."
  },
  {
    "objectID": "02a_measurement.html#density",
    "href": "02a_measurement.html#density",
    "title": "2A: Measurement & Distributions",
    "section": "Density",
    "text": "Density\nIn addition to grouping numeric data into bins in order to produce a histogram, we can also visualise a density curve.\nBecause there are infinitely many values that numeric variables could take (e.g., 50, 50.1, 50.01, 5.001, …), we could group the data into infinitely many bins. This is essentially what we are doing with a density curve.\nYou can think of “density” as a bit similar to the notion of “relative frequency” (or “proportion”), in that for a density curve, the values on the y-axis are scaled so that the total area under the curve is equal to 1. In creating a curve for which the total area underneath is equal to one, we can use the area under the curve in a range of values to indicate the proportion of values in that range.\n\nggplot(data = wechsler, aes(x = iq)) + \n  geom_density()\n\n\n\n\n\n\n\n\n\nArea under the curve\nThink about the barplots we have been looking at in the exercises where we simulate dice rolling :\n\n# our function to simulate the roll of a die/some dice\ndice <- function(num = 1) {\n  sum(sample(1:6, num, replace=TRUE))\n}\n# simulate 1000 rolls of a single die\nroll1000 <- replicate(1000, dice(1))\n# tabulate and plot:\ntable(roll1000) %>%\n  barplot(.,ylab=\"count\")\n\n\n\n\n\n\n\n\nTo think about questions like “what proportion of 1000 rolls does the die land on 6?”, we are simply interested in the count of 6s divided by the count of all rolls:\n\ntab1000 <- table(roll1000)\ntab1000\n\nroll1000\n  1   2   3   4   5   6 \n162 169 167 189 152 161 \n\ntab1000[6] / sum(tab1000)\n\n    6 \n0.161 \n\n\nSo Another way of thinking of this is that we are just dividing the count in each category by the total number. Or, Put another way, imagine we divide the area of each bar by the total area. The area now sums to 1, and our question is asking about the ratio of the red area to the total area (grey + red):\n\n\n\n\n\n\n\n\n\nNothing really changes with a density curve! If we want to ask what proportion of our distribution of IQ scores is >120, then we are asking about the area under the curve that is to the right of 120:\n\n\n\n\n\n\n\n\n\nIt looks like about a third, maybe a little less. Let’s calculate this proportion directly:\n\nsum(wechsler$iq>110) / length(wechsler$iq)\n\n[1] 0.2\n\n\nIt might seem a little odd to think about area under the curve when we are asking about “what proportion of the data is …?”. If we have the data, then we can just calculate the answer (like we did above). However, a lot of statistics is really concerned with the probability of events. When we discuss probability, we move from talking about a specific set of observed data to thinking about a theoretical/mathematical model that defines the way in which data is generated. This where it becomes more useful to think about distributions in a more abstract sense.\nFor instance, with a fair six-sided die, we have a probability distribution (Figure 5) in which each side is given the probability \\(\\frac{1}{6}\\):\n\\[\n\\begin{gather*}\nP(x) = \\begin{cases}\n  \\frac{1}{6} & \\text{if $x \\in \\{1,2,3,4,5,6\\}$}\\\\\n  0 & \\text{otherwise.}\n  \\end{cases}\n\\end{gather*}\n\\]\nInstead of rolling a die, suppose that we are picking a person off the street and measuring their IQ. Given that IQ scales are designed to have a mean of 100 and standard deviation of 15, what is the probability that we pick a person with an IQ of greater than 110?\n\n\n\n\n\nFigure 5: Left: Discrete probability distribution of a fair six-sided die. Right: Continuous probability distribution of IQ scores"
  },
  {
    "objectID": "02b_sampling.html",
    "href": "02b_sampling.html",
    "title": "2B: Curves & Sampling",
    "section": "",
    "text": "This reading:\n\nWhat are probability distributions and why are they relevant?\n\nHow does using a sample to approximate a population lead to uncertainty?\nHow can we quantify uncertainty due to sampling?"
  },
  {
    "objectID": "02b_sampling.html#the-standard-normal-distribution",
    "href": "02b_sampling.html#the-standard-normal-distribution",
    "title": "2B: Curves & Sampling",
    "section": "The Standard Normal Distribution",
    "text": "The Standard Normal Distribution\nNote that if we translate our “IQ >120” to being in terms of standard deviations - \\(\\frac{120 - 100}{15} = 1\\frac{1}{3}\\) - then we can perform the same computations as we have done above, but comparing against against a normal distribution with mean of 0 and standard deviation of 1 (which are the defaults for the pnorm() function):\n\npnorm((120-100)/15, lower.tail = FALSE)\n\n[1] 0.09121122\n\n\n\n\n\n\n\nFigure 7: pnorm() with the ‘standard normal distribution’: the normal distribution with mean = 0 and sd = 1\n\n\n\n\nWhat we’re doing here is re-expressing the observed distribution into one which has mean of 0 and standard deviation of 1 - we are standardising them. This idea will become incredibly useful. For one thing it makes comparisons possible, for example, consider the two statements below:\n\n“I am 15 IQ points higher than average, and 24cm taller than average”\n“I am 1 standard deviation above the average IQ, and 2 standard deviations above average height”\n\nThe standard normal distribution - the normal distribution with mean = 0, sd = 1, is going to be seen a lot more frequently."
  },
  {
    "objectID": "03_ex.html",
    "href": "03_ex.html",
    "title": "Week 3 Exercises: T-tests",
    "section": "",
    "text": "Heights\n\n\nResearch Question Is the average height of students taking the USMR statistic course in Psychology at Edinburgh University in 2021/2022 is different from 165cm?\n\n\n\n\n\n\n\n\n\n\nThe data for students from all psychology statistics courses last year and USMR this year, are available at https://uoepsy.github.io/data/surveydata_allcourse22.csv.\n\n\nQuestion 6\n\n\nNo more manual calculations of test statistics and p-values for this week.\nConduct a one sample \\(t\\)-test to evaluate whether the average height of students taking the USMR courses in Psychology at Edinburgh University in 2022/23 is different from 165cm.\n\nHints:\n\nThis is real data, and real data is rarely normal! If you conduct a Shapiro-Wilk test, you may well find \\(p<.05\\) and conclude that your data is not normal.\nSo what do we do if a test indicates our assumptions are violated?\nWell, we should bear a couple of things in mind.\n\nA decision rule such as \\(p<.05\\) on Shapiro-Wilk test creates very dichotomous thinking for something which is in reality not black and white. Real life distributions are not either normal or non-normal. Plot the data, and make a judgement!\n\nAs it happens, the t-test is actually reasonably robust against slight deviations from normality! Plot your data and make a judgement!\nThe deeper you get into statistics, the more you discover that it is not simply a case of following step-by-step rules:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Solution \n\n\nRead in the data:\nWe need to filter it to just the USMR students this year\n\nsurvey_data <- read_csv(\"https://uoepsy.github.io/data/surveydata_allcourse22.csv\")\n\nusmr_data <- survey_data %>% \n  filter(course==\"usmr\", year==2022)\n\nDescriptives:\n\nusmr_data %>% \n  summarise(\n    mheight = mean(height, na.rm = T),\n    sdheight = sd(height, na.rm = T)\n  )\n\n# A tibble: 1 × 2\n  mheight sdheight\n    <dbl>    <dbl>\n1    168.     9.10\n\n\nAssumptions:\nThe shapiro.test() suggests that our assumption of normality is okay!\n(the p-value is \\(>.05\\), suggesting that we do not reject the hypothesis that the data are drawn from a normally distributed population)\n\nshapiro.test(usmr_data$height)\n\n\n    Shapiro-Wilk normality test\n\ndata:  usmr_data$height\nW = 0.96628, p-value = 0.06591\n\n\nHowever, as always, visualisations are vital here. The histogram below does not look too bad to me.\n\nggplot(data = usmr_data, aes(x = height)) + \n  geom_histogram(bins=15) +\n  # adding our hypothesised mean\n  geom_vline(xintercept = 165)\n\n\n\n\n\n\n\n\nIn fact, the t.test is quite robust against slight violations of normality, especially as sample sizes increase beyond 30, and our data here doesn’t look too non-normal (this is a judgement call here - over time you will start to get a sense of what you might deem worrisome in these plots!).\nConduct test\n\nt.test(usmr_data$height, mu = 165, alternative = \"two.sided\")\n\n\n    One Sample t-test\n\ndata:  usmr_data$height\nt = 2.6287, df = 66, p-value = 0.01065\nalternative hypothesis: true mean is not equal to 165\n95 percent confidence interval:\n 165.7027 170.1415\nsample estimates:\nmean of x \n 167.9221 \n\n\n\n\n\n\n\nNames and Tips\n\n\nResearch Question Can a server earn higher tips simply by introducing themselves by name when greeting customers?\n\nResearchers investigated the effect of a server introducing herself by name on restaurant tipping. The study involved forty, 2-person parties eating a $23.21 fixed-price buffet Sunday brunch at Charley Brown’s Restaurant in Huntington Beach, California, on April 10 and 17, 1988. Each two-person party was randomly assigned by the waitress to either a name or a no name introduction condition using a random mechanism. The waitress kept track of the two-person party condition and how much the party paid at the end of the meal.\nThe data are available at https://uoepsy.github.io/data/gerritysim.csv. (This is a simulated example based on Garrity and Degelman (1990))\n\n\nQuestion 7\n\n\nConduct an independent samples \\(t\\)-test to assess whether higher tips are earned when the server introduces themselves by name, in comparison to when they do not.\n\nHints:\n\nWe’ll want to check the normality (either visually or with a test) of the variable of interest for each group.\n\nSome researchers suggest using the Welch t-test by default. This means you can relax the assumption of equal variances in the groups. If you want to test whether two variances are equal, try the var.test() function.\n\n\n\n\n\n\n Solution \n\n\nRead in the data\n\ntipdata <- read_csv(\"https://uoepsy.github.io/data/gerritysim.csv\")\n\n#make a \"tip\" column, which is minus the meal amount\ntipdata <- \n  tipdata %>% mutate(\n    tip = paid - 23.21\n  )\n\nDescriptives and a plot\n\ntipdata %>% \n  group_by(condition) %>%\n  summarise(\n    meantip = mean(tip),\n    sdtip = sd(tip)\n  )\n\n# A tibble: 2 × 3\n  condition meantip sdtip\n  <chr>       <dbl> <dbl>\n1 name         4.94  1.88\n2 no name      3.18  1.35\n\nggplot(data = tipdata, aes(x = tip, y = condition)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nAssumptions\nAccording to these tests, we have normally distributed data for both groups, with equal variances.\n\nshapiro.test(tipdata$tip[tipdata$condition==\"name\"])\n\n\n    Shapiro-Wilk normality test\n\ndata:  tipdata$tip[tipdata$condition == \"name\"]\nW = 0.96267, p-value = 0.5985\n\nshapiro.test(tipdata$tip[tipdata$condition==\"no name\"])\n\n\n    Shapiro-Wilk normality test\n\ndata:  tipdata$tip[tipdata$condition == \"no name\"]\nW = 0.94405, p-value = 0.2857\n\nvar.test(tip ~ condition, data = tipdata)\n\n\n    F test to compare two variances\n\ndata:  tip by condition\nF = 1.9344, num df = 19, denom df = 19, p-value = 0.1595\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.7656473 4.8870918\nsample estimates:\nratio of variances \n           1.93437 \n\n\nConduct test:\nBecause the variances do not appear to be unequal, we can actually use the standard t-test with var.equal = TRUE if we want. However, we’ll continue with the Welch t-test.\nRemember that our alternative hypothesis here is that the average tips in the “name” condition is greater than in the “no name” condition.\nR will take the levels in order here (alphabetically), and assume that the alternative is for that group, so we use alternative = \"greater\" here to say that the alternative is \\(\\text{name}-\\text{no name} > 0\\).\n\nt.test(tip ~ condition, data = tipdata, alternative = \"greater\")\n\n\n    Welch Two Sample t-test\n\ndata:  tip by condition\nt = 3.4117, df = 34.502, p-value = 0.0008314\nalternative hypothesis: true difference in means between group name and group no name is greater than 0\n95 percent confidence interval:\n 0.8893105       Inf\nsample estimates:\n   mean in group name mean in group no name \n               4.9450                3.1825 \n\n\n\n\n\n\n\nOptional Extras\n\nQuestion Extra\n\n\nHere are a few extra questions for you to practice performing tests and making plots:\n\nAre dogs heavier on average than cats?\n\n\n\nData are at https://uoepsy.github.io/data/pets_seattle.csv\n\nRemember from week 1 - not everything in that data is either a cat or a dog!\n\n\n\nIs taking part in a cognitive behavioural therapy (CBT) based programme associated with a greater reduction, on average, in anxiety scores in comparison to a Control group?\n\n\n\nData are at https://uoepsy.github.io/data/dapr1_2122_report_data.csv. The dataset contains information on each person in an organisation, recording their professional role (management vs employee), whether they are allocated into the CBT programme or not (control vs cbt), and scores on anxiety at both the start and the end of the study period.\n\nyou might have to make a new variable in order to test the research question.\n\n\n\n\n\n\n\n Solution \n\n\nCats v Dogs\n\npets <- read.csv(\"https://uoepsy.github.io/data/pets_seattle.csv\")\ncatsndogs <- pets[pets$species != \"Goat\", ]\n\nIn this case, we want to test whether \\(dogs > cats\\). What we are testing then, whether \\(dogs - cats > 0\\) or \\(cats - dogs < 0\\).\nBy default, as the species variable is a character, it will use alphabetical ordering, and t.test() will test \\(cats - dogs\\). So we want our alternative hypothesis to be “less”:\n\nt.test(weight_kg ~ species, catsndogs,\n       alternative = \"less\")\n\nAn alternative is to set it as a factor, and specify the levels in the order we want:\n\ncatsndogs$species2 <- factor(catsndogs$species, levels = c(\"Dog\",\"Cat\"))\n\nWhich would then allow us to shove that into the t.test() and perform the same test, but using \\(dogs - cats\\) instead.\n\nt.test(weight_kg ~ species2, catsndogs,\n       alternative = \"greater\")\n\n\n    Welch Two Sample t-test\n\ndata:  weight_kg by species2\nt = 92.4, df = 1335.2, p-value < 2.2e-16\nalternative hypothesis: true difference in means between group Dog and group Cat is greater than 0\n95 percent confidence interval:\n 15.60965      Inf\nsample estimates:\nmean in group Dog mean in group Cat \n        20.377489          4.484731 \n\n\n\ncatsndogs %>%\n  ggplot(aes(x=species,y=weight_kg)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\nCBT & Anxiety\nBecause we’re testing the reduction in anxiety, we need to calculate it. By subtracting anxiety at time 2 from anxiety at time 1, we create a variable for which bigger values represent more reduction in anxiety\n\ncbtanx <- read.csv(\"https://uoepsy.github.io/data/dapr1_2122_report_data.csv\")\n\ncbtanx <- cbtanx %>% mutate(reduction = anx_t1 - anx_t2)\n\nAnd we can then test whether \\(cbt - control > 0\\):\n\nt.test(reduction ~ cbt, data = cbtanx, \n       alternative = \"greater\")\n\n\n    Welch Two Sample t-test\n\ndata:  reduction by cbt\nt = 2.5953, df = 56.621, p-value = 0.006007\nalternative hypothesis: true difference in means between group cbt and group control is greater than 0\n95 percent confidence interval:\n 0.2744051       Inf\nsample estimates:\n    mean in group cbt mean in group control \n            1.0266667             0.2551724 \n\n\nAnd to make sure we’re getting things the right way around, make a plot:\n\nggplot(cbtanx, aes(x=cbt, y=reduction))+\n  geom_boxplot() + \n  labs(x=\"Experimental Group\",y=\"Reduction in Anxiety across study\")"
  },
  {
    "objectID": "03a_inference.html",
    "href": "03a_inference.html",
    "title": "3A: Foundations of Inference",
    "section": "",
    "text": "This reading:\n\nHow do we quantify uncertainty due to sampling?\n\nHow can we make decisions (what to believe/how to act, etc) that take uncertainty into account?\n\nHow likely are we to make the wrong decision?\nWe use statistics primarily to estimate parameters in a population. Whether we are polling people to make predictions about the proportion of people who will vote for a certain party in the next election, or conducting a medical trial and assessing the change in blood pressure for patients given drug X vs those given a placebo in order to decide whether to put the drug into circulation in health service.\nWe have seen this already last week: We observed a sample of peoples’ life satisfaction ratings (scale 0-100), and we wanted to use these to make some statement about the wider population."
  },
  {
    "objectID": "03a_inference.html#test-statistics-p-values",
    "href": "03a_inference.html#test-statistics-p-values",
    "title": "3A: Foundations of Inference",
    "section": "Test-statistics & p-values",
    "text": "Test-statistics & p-values\nThe p-value is a formal way of testing a statistic against a null hypothesis. To introduce the p-value, instead of thinking first about what we have observed in our sample, we need to think about what we would expect to observe if our null hypothesis is true.\nWith our Stroop Task example, our null hypothesis is that there is no difference between matching and mismatching conditions (\\(H_0: \\mu = 0\\)). Under \\(H_0\\), the average ‘mismatching-matching’ score in the population is zero, and we would expect most of the samples we might take to have a mean ‘mismatching-matching’ score of close to this (not exactly 0, but centered around 0). We saw above that we could express the sampling distribution of means taken from samples of size \\(n=131\\) using the standard error. Under \\(H_0\\) we would expect the samples of \\(n=131\\) we might take to have means that follow something like the distribution in Figure 3. We can think of this as the sampling distribution of \\(\\bar{x}\\), but centered on our null hypothesis (in this case, \\(\\mu = 0\\)). We call this the ‘null distribution’.\n\n\n\n\n\nFigure 3: Sampling distribution for mean of sample size 131, assuming population mean = 0. Observed sample mean shown in red\n\n\n\n\n\nTest-statistic\nThe first step now is to create a test-statistic. That is, a statistic that tell us, in some standardised units, how big our observed effect is from the null hypothesis (i.e. in this case, how far from \\(\\mu=0\\) our sample mean is).\nThe straightforward way to do this is to express how far away from \\(\\mu=0\\) our sample mean is in terms of standard errors. We’ll call our test statistic \\(Z\\):\n\\[\nZ = \\frac{\\text{estimate}-\\text{null}}{SE}\n\\]\nOur mean and standard error are:\n\nmean(stroopdata$diff)\n\n[1] 2.402977\n\nsd(stroopdata$diff) / sqrt(nrow(stroopdata))\n\n[1] 0.4382302\n\n\nSo our test-statistic is\n\\[\nZ = \\frac{2.40 - 0}{0.438} = 5.479\n\\]\n\n\np-value\nWe can now calculate how likely it is to see values at least as extreme as our observed test-statistic, if the null is true. If the null hypothesis is true (there was no ‘mismatching-matching’ difference) then we would expect Z-statistics to be normally distributed with a mean of 0 and a standard deviation of 1.\nWe have seen the process of how we might calculate a probability from a distribution like this already: the pnorm() function gives us the area of a distribution to the one side of a given value:\n\npnorm(??, mean = 0, sd = 1, lower.tail = FALSE)\n\n\n\n\n\n\nFigure 4: pnorm() provides us with a p-value for a z-statistic\n\n\n\n\nRemember, our Z-statistic we calculated above is 5.479. If the null hypothesis were true then the probability that we would see a sample (\\(n=131\\)) with a Z-statistic at least that large is:\n\npnorm(5.479, lower.tail = FALSE)\n\n[1] 2.138682e-08\n\n\nwhich is R’s way of printing 0.00000002138682.\nThere is one last thing, and that the direction of our hypotheses. Recall from earlier that we stated \\(H_0: \\mu = 0\\) and \\(H_1: \\mu \\neq 0\\). This means that we are interested in the probability of getting results this far away from 0 in either direction.\nWe are interested in both tails:\n\n2 * pnorm(5.479, lower.tail = FALSE)\n\n[1] 4.277364e-08\n\n\n\n\n\n\n\nFigure 5: 2*pnorm gives the two tails\n\n\n\n\n\np-value\nThe p-value is the probability4 that we observe a test statistic at least as extreme as the one we observed, assuming the null hypothesis \\(H_0\\) to be true."
  },
  {
    "objectID": "03a_inference.html#making-decisions",
    "href": "03a_inference.html#making-decisions",
    "title": "3A: Foundations of Inference",
    "section": "Making Decisions",
    "text": "Making Decisions\nNow that we have our p-value of 0.00000004277364, we need to use it to make a decision about our hypotheses.\nTypically, we pre-specify the probability level at which we will consider results to be so unlikely to have arisen from the null distribution that we will take them as evidence to reject the null hypothesis. This pre-specified level is commonly referred to as \\(\\alpha\\) (“alpha”). Setting \\(\\alpha = 0.05\\) means that we will reject \\(H_0\\) when we get a result which is extreme enough to only occur 0.05 (5%) of the time or less if the \\(H_0\\) is true.\nIn our case, 0.00000004277364 \\(< 0.05\\), so we reject the null hypothesis that there is no difference in the mismatching/matching conditions of the Stroop Task.\n\nThere’s a lot of convention to how we talk about NHST, but the typical process is as follows:\n\nClearly specify the null and alternative hypotheses.\n\nSpecify \\(\\alpha\\)\nCalculate statistic\nCompute p-value\n\nIf \\(p<\\alpha\\), then reject the null hypothesis.\nIf \\(p\\geq\\alpha\\), then fail to reject* the null hypothesis.\n\n\n*Note, we don’t “accept” anything, we just “reject” or “fail to reject” the null hypothesis. Think of it like a criminal court, and we are trying the null hypothesis - \\(H_0\\) is “innocent until proven guilty”."
  },
  {
    "objectID": "03a_inference.html#making-mistakes",
    "href": "03a_inference.html#making-mistakes",
    "title": "3A: Foundations of Inference",
    "section": "Making Mistakes",
    "text": "Making Mistakes\nWhether our eventual decision is a) reject the null hypothesis, or b) fail to reject the null hypothesis, there’s always a chance that we might be making a mistake. There are actually two different types of mistakes we might make. An often used analogy (Figure 6) is the idea of criminal trials in which an innocent person can be wrongfully convicted, or a guilty person can be set free.\n\n\n\n\n\nFigure 6: Making errors in NHST is like a criminal court making errors in its decision on the defendent\n\n\n\n\nWe can actually quantify the chance that we’re making errors in our different decisions. Thinking back to the definition of a p-value, it is the probability of seeing our results if the null hypothesis is true. If we make a decision to reject the null hypothesis based on whether \\(p<\\alpha\\), then the probability that this decision is a mistake is \\(\\alpha\\).\nThe probability that we the other sort of error (failing to reject the null hypothesis when the null hypothesis is actually false), we denote with \\(\\beta\\).\nDoing statistics is partly a matter of balancing these possibilities. If we used a very low \\(\\alpha\\)-level (e.g. we reject when \\(p<.0001\\) rather than \\(p<.05\\)) then we increase the probability of making a type II error.\n\nTypes of Errors in NHST\n\n\n\n\n\nFigure 7: Probabilities of making different errors in NHST\n\n\n\n\n\n\nPower (\\(1-\\beta\\))\nA key notion in conducting studies is “statistical power”. Studies want to increase the probability of correctly rejecting the null hypothesis (i.e. correctly identifying that there is something more than chance going on).\nThis is the bottom right cell of the tables in Figure 6 and Figure 7. We know that this will depend on the \\(\\alpha\\)-level that we choose, but there are other important factors that influence \\(1-\\beta\\):\n\npower increases as sample size increases\n\ne.g. it’s easier to determine that cats weigh less than dogs if we measure 100 animals vs if we measure only 10 animals\n\npower increases the farther away the true value is from the null hypothesis value\n\ne.g. it’s easier to determine that cats weigh less than elephants than it is to determine that cats weigh less than dogs"
  },
  {
    "objectID": "03b_inference2.html",
    "href": "03b_inference2.html",
    "title": "3B: Practical Inference",
    "section": "",
    "text": "This reading:\n\nHow does hypothesis testing work in practice?\n\nHow do we do all this in R?\n\nspoiler: it’s easier than you think\n\nWhat are some basic hypothesis tests that we can conduct?\nIn the previous section we saw how we can apply the logic of Null Hypothesis Significance Testing (NHST), allowing us to draw inferences about parameters in the population, based on statistics computed on the sample we have collected.\nWhile in practice NHST follows the logic described above, there is something important that we have been sweeping under the carpet.\nIn our estimation of the standard error we have used the formula that includes \\(\\sigma\\), which refers to the population standard deviation. However, we never know this value (because we don’t have data for the population), so we have been using the sample standard deviation \\(s\\) instead. This is an approximation, and might be okay when we have a very large \\(n\\) (meaning \\(s\\) provides accurate estimate of \\(\\sigma\\)), but in practice is not always feasible.\n\\[\nSE = \\frac{\\sigma}{\\sqrt{n}} \\approx \\frac{s}{\\sqrt{n}}\n\\]"
  },
  {
    "objectID": "03b_inference2.html#checkingtesting-assumptions",
    "href": "03b_inference2.html#checkingtesting-assumptions",
    "title": "3B: Practical Inference",
    "section": "Checking/Testing Assumptions",
    "text": "Checking/Testing Assumptions\nThese sort of tests often require us to meet a set of conditions in order for our inferences to be valid. When we perform tests like these that involve estimating a mean, a common requirement is that the deviations from that mean are close to normally distributed.\n\nAssumption Plots\nWe can evaluate how close to normal a distribution is by visualising it via histograms and density plots and making a judgment call, but this can sometimes be hard:\n\n\nCode\ndata <- tibble(mysample = mysample)\nggplot(data,aes(x=mysample))+geom_histogram(bins=14) +\nggplot(data,aes(x=mysample))+geom_density()\n\n\n\n\n\nFigure 4: Am I normal?\n\n\n\n\nAnother useful visualisation tool is the QQplot. The closer to the diagonal line, the closer our data is to being normally distributed:\n\nqqnorm(data$mysample) # make the plot\nqqline(data$mysample) # add the line\n\n\n\n\nFigure 5: A QQplot\n\n\n\n\n\n Optional: What are the ‘theoretical quantiles’?\n\n\nThe theoretical quantiles are the equivalent quantiles of the standard normal distribution (see #2B standard-normal-distribution).\nIn the data$mysample example above, we have 10 datapoints. If we cut the standard normal distribution into 10 sections of equal area (see Figure 6), it is the points on the x-axis at the center of each area that we are plotting our data against.\n\n\n\n\n\nFigure 6: 10 quantiles of the normal distribution\n\n\n\n\n\n\n\n\n\nAssumption Tests\nThere are also, if we wish to make use of them, specific hypothesis tests that assess normality, such as the ‘Shapiro-Wilks’ Test. The null hypothesis for this test is that the data we give it are drawn from a normal distribution. This means that we want a p-value greater than .05. So in the example below, we have no reason to reject the hypothesis that our data are drawn from a normal distribution. This means we can continue to conduct a t-test.\n\nshapiro.test(mysample)\n\n\n    Shapiro-Wilk normality test\n\ndata:  mysample\nW = 0.94722, p-value = 0.6358"
  },
  {
    "objectID": "03b_inference2.html#one-sample-t-test",
    "href": "03b_inference2.html#one-sample-t-test",
    "title": "3B: Practical Inference",
    "section": "One sample t-test",
    "text": "One sample t-test\n\nPurpose\nThe one sample t-test is what we have already seen above. We use it to test whether the mean is different from/greater than/less than some hypothesised value.\n\nExamples:\n\nIs the mean age of USMR students different from 20?\nIs the mean IQ different from 100?\n\nDo people read more than 250 words per minute?\n\n\nAssumptions:\n\nThe data are continuous (not discrete)\nThe data are independent (i.e. the value of a datapoint does not depend on the value of another datapoint in any way)\nThe data are normally distributed OR the sample size is large enough (rule-of-thumb n = 30) and the data are not strongly skewed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResearch Question: Do people read more than 250 words per minute?\n\nFifty participants were recruited and tasked with reading a passage of text that was 2000 words long. Their reading times (in words per minute) was recorded, and these are accessible at https://uoepsy.github.io/data/usmr_tread.csv.\n\nwpmtime <- read_csv(\"https://uoepsy.github.io/data/usmr_tread.csv\")\nhead(wpmtime)\n\n# A tibble: 6 × 2\n  id      wpm\n  <chr> <dbl>\n1 ppt_1   307\n2 ppt_2   265\n3 ppt_3   205\n4 ppt_4   300\n5 ppt_5   207\n6 ppt_6   300\n\n\n\n\n The quick and easy way\n\n\nBelow are some quick descriptives, and we should also make sure that our distribution is roughly normally distributed:\n\nmean(wpmtime$wpm)\n\n[1] 258.36\n\nsd(wpmtime$wpm)\n\n[1] 32.08646\n\nhist(wpmtime$wpm)\n\n\n\n\n\n\n\nshapiro.test(wpmtime$wpm)\n\n\n    Shapiro-Wilk normality test\n\ndata:  wpmtime$wpm\nW = 0.9636, p-value = 0.1258\n\n\nPaying careful attention to the research question (“Do people read more than 250 words per minute?”), our null hypothesis here is that reading time is \\(\\leq 250\\) words per minute (wpm), and our alternative hypothesis is that it is \\(>250\\) wpm.\nWe specify the alternative in the t.test() function:\n\nt.test(wpmtime$wpm, mu = 250, alternative = \"greater\")\n\n\n    One Sample t-test\n\ndata:  wpmtime$wpm\nt = 1.8423, df = 49, p-value = 0.03574\nalternative hypothesis: true mean is greater than 250\n95 percent confidence interval:\n 250.7523      Inf\nsample estimates:\nmean of x \n   258.36 \n\n\n\nA one-sample t-test was conducted in order to determine if the average reading time was significantly (\\(\\alpha=.05\\)) higher than 250 words per minute (wpm).\nThe sample of 50 participants read on average at 258 words per minute (Mean=258, SD=32). This was significantly above 250 (\\(t(49)=1.84, p = .036\\), one-tailed).\n\n\n\n\n\n Manually\n\n\nOur test-statistic is calculated as\n\\[\nt =  \\frac{\\bar x - \\mu_0}{\\frac{s}{\\sqrt{n}}}\n\\]\nThere’s a lot of brackets here, so go through it piece by piece if you are unsure of how it matches to the formula above\n\n(mean(wpmtime$wpm) - 250 ) / (sd(wpmtime$wpm) / sqrt(nrow(wpmtime)))\n\n[1] 1.842338\n\n\nThe test we are performing is against the null hypothesis that \\(\\mu_0 \\leq 250\\). So we will only reject the null hypothesis if we get a test statistic indicating the mean is \\(>250\\). This means that our p-value will be just the one tail of the \\(t\\)-distribution:\n\npt(1.842338, df = 49, lower.tail = FALSE)\n\n[1] 0.0357404"
  },
  {
    "objectID": "03b_inference2.html#two-sample-t-test",
    "href": "03b_inference2.html#two-sample-t-test",
    "title": "3B: Practical Inference",
    "section": "Two sample t-test",
    "text": "Two sample t-test\n\nPurpose\nThe two sample t-test is used to test whether the mean of one group is different from/greater than/less than the mean of another.\n\nExamples:\n\nIs the mean age of cat people different from the mean age of dog people?\nDo people who identify as “morning people” have a higher average rating of sleep quality than those who identify as “evening people”?\nIs the average reaction time different between people who do and don’t drink caffeinated drinks?\n\n\nAssumptions:\n\nThe data are continuous (not discrete)\nThe data are independent (i.e. the value of a datapoint does not depend on the value of another datapoint in any way)\nThe data are normally distributed for each group, OR the sample size is large enough (rule-of-thumb n = 30) and the data are not strongly skewed\nThe variance is equal across groups*.\n\n*We can relax this assumption by using an adjusted test called the “Welch \\(t\\)-test”, which calculates the standard error slightly differently, and estimates the degrees of freedom differently too. This is actually the default in R, and we change this easily in R using t.test(...., var.equal = FALSE/TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResearch Question: Is the average reaction time different between people who do and don’t drink caffeinated drinks?\n\nOne hundred participants were recruited and completed a simple reaction time task. They were also surveyed on whether they regularly drank caffeine in any form. The data are accessible at https://uoepsy.github.io/data/usmr_tcaff.csv.\n\ntcaff <- read_csv(\"https://uoepsy.github.io/data/usmr_tcaff.csv\")\nhead(tcaff)\n\n# A tibble: 6 × 2\n     rt caff \n  <dbl> <chr>\n1  482. yes  \n2  389. yes  \n3  484. no   \n4  601. no   \n5  409. yes  \n6  368. no   \n\n\n\n\n The quick and easy way\n\n\nFirst some quick descriptives, and a plot:\n\ntcaff %>% \n  group_by(caff) %>%\n  summarise(\n    m = mean(rt),\n    s = sd(rt)\n  )\n\n# A tibble: 2 × 3\n  caff      m     s\n  <chr> <dbl> <dbl>\n1 no     408.  88.9\n2 yes    465. 109. \n\n\n\nggplot(tcaff, aes(x = rt)) +\n  geom_histogram() + \n  facet_wrap(~caff)\n\n\n\n\n\n\n\n\nThe data look fairly close to normally distributed for each group here. One thing to note is that the variances look like they may be different between the two groups. The caffeine drinkers’ reaction time’s have a standard deviation of 109ms, and the non-caffeine drinkers have an sd of only 89ms.\nHowever, we’ll perform the Welch t-test here, which doesn’t require us to assume equal variances.\nWe can give R the two sets of data in two ways. Either by extracting the relevant entries:\n\nt.test(x = tcaff$rt[tcaff$caff==\"no\"], \n       y = tcaff$rt[tcaff$caff==\"yes\"])\n\nOr using the formula notation, with the ~ (“tilde”) symbol. In R, you can interpret y ~ x as “y is modeled as a function of x”. By splitting the numeric values (rt variable) by the categories of the caff variable, we can conduct a \\(t\\)-test using:\n\nt.test(rt ~ caff, data = tcaff)\n\n\n    Welch Two Sample t-test\n\ndata:  rt by caff\nt = -2.8497, df = 93.971, p-value = 0.005377\nalternative hypothesis: true difference in means between group no and group yes is not equal to 0\n95 percent confidence interval:\n -96.20205 -17.19423\nsample estimates:\n mean in group no mean in group yes \n         408.0505          464.7486 \n\n\n\nAn Welch two sample t-test was used to assess whether the mean reaction time of people who regularly drink caffeine (\\(n = 60\\)) was different to that of people who do not (\\(n=40\\)). There was a significant difference in average reaction time between the caffeine (Mean=465; SD=109) and non-caffeine (Mean=408; SD=89) groups (\\(t(94)=-2.85, p = .005\\), two-tailed). Therefore, we reject the null hypothesis that there is no difference in reaction times between caffeine drinkers and non-caffeine drinkers.\n\n\nCode\nggplot(tcaff, aes(x = caff, y = rt)) +\n  geom_boxplot()+\n  labs(x=\"drinks caffeine\",y=\"reaction time (ms)\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Manually\n\n\nOur test statistic here is:\n\\[\n\\begin{align}\n& t =  \\frac{\\bar x_1 - \\bar x_2}{SE}\\\\\n\\ \\\\\n& \\text{where:} \\\\\n& \\bar x_1 : \\text{sample mean group 1} \\\\\n& \\bar x_2 : \\text{sample mean group 2} \\\\\n& SE : \\sqrt{\\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}} \\\\\n& s_1 : \\text{sample standard deviation of group 1} \\\\\n& s_2 : \\text{sample standard deviation of group 2} \\\\\n& n_1 : \\text{sample size group 1} \\\\\n& n_2 : \\text{sample size group 2} \\\\\n\\end{align}\n\\]\nWe can calculate each part:\n\ntcaff %>%\n  group_by(caff) %>%\n  summarise(\n    xbar = mean(rt),\n    s = sd(rt),\n    s2 = var(rt),\n    n = n()\n  )\n\n# A tibble: 2 × 5\n  caff   xbar     s     s2     n\n  <chr> <dbl> <dbl>  <dbl> <int>\n1 no     408.  88.9  7906.    40\n2 yes    465. 109.  11892.    60\n\n\nplugging these bits in gives us:\n\\[\n\\begin{align}\nSE & = \\sqrt{\\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}} \\\\\n& = \\sqrt{\\frac{7906}{40} + \\frac{11892}{60}} \\\\\n& = \\sqrt{395.85} \\\\\n& = 19.9\n\\end{align}\n\\]\nand\n\\[\n\\begin{align}\n& t =  \\frac{\\bar x_1 - \\bar x_2}{SE} \\\\\n\\qquad \\\\\n& =  \\frac{408 - 465}{19.9} \\\\\n\\qquad \\\\\n& = -2.86 \\\\\n\\end{align}\n\\]\nOur \\(p\\)-value is determined against a \\(t\\)-distribution with a specific number of degrees of freedom. We are estimating two means here, the standard two-sample t-test uses \\(df = n-2\\). However, the Welch t-test, which we performed quickly with t.test(), where we didn’t assume equal variances, makes the calculation of the degrees of freedom much more complicated.\nUsing the same degrees of freedom as was used in the quick use of t.test() above, we get out our same p-value (or thereabouts - we have some rounding error):\n\n2*pt(abs(-2.86), df = 93.971, lower.tail = FALSE)\n\n[1] 0.005219781"
  },
  {
    "objectID": "03b_inference2.html#paired-sample-t-test",
    "href": "03b_inference2.html#paired-sample-t-test",
    "title": "3B: Practical Inference",
    "section": "Paired sample t-test",
    "text": "Paired sample t-test\n\nPurpose\nThe paired sample t-test is used to test whether the mean difference between two sets of paired observations is different from 0.\n\nExamples:\n\nIs the mean cognitive score of participants at age 60 different from when they are re-tested at age 70?\n\nAre scores on test 1 different on average from scores on test 2 (with participants completing both tests).\n\n\nAssumptions:\n\nThe data are continuous (not discrete)\nThe differences are independent (i.e. the value of a the difference for one pair does not depend on the values of another pair in any way)\nThe differences are normally distributed OR the sample size is large enough (rule-of-thumb n = 30) and the data are not strongly skewed\n\n\n\n\nResearch Question: Is the mean cognitive score of participants at age 60 different from when they are re-tested at age 70?\n\nAddenbrooke’s Cognitive Examination-III (ACE-III) is a brief cognitive test that assesses five cognitive domains: attention, memory, verbal fluency, language and visuospatial abilities. The total score is 100 with higher scores indicating better cognitive functioning. A research project is examining changes in cognitive functioning with age, and administers the ACE-III to a set of participants at age 60, then again at age 70. The data is accessible at https://uoepsy.github.io/data/usmr_tcaff.csv.\n\nacedata <- read_csv(\"https://uoepsy.github.io/data/acedata.csv\")\nhead(acedata)\n\n# A tibble: 6 × 3\n  participant ace_60 ace_70\n  <chr>        <dbl>  <dbl>\n1 sub1            93     85\n2 sub2            95     92\n3 sub3            93     90\n4 sub4            93     95\n5 sub5            96     88\n6 sub6            91     85\n\n\n\n\n The paired t test is the one sample t test in disguise\n\n\nWe can either perform this with the data exactly as it is:\n\nt.test(x = acedata$ace_60, y = acedata$ace_70, \n       paired = TRUE)\n\n\n    Paired t-test\n\ndata:  acedata$ace_60 and acedata$ace_70\nt = 2.2542, df = 24, p-value = 0.03359\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n 0.2093364 4.7506636\nsample estimates:\nmean difference \n           2.48 \n\n\nOr we can compute the differences, and perform a one sample test on the mean of those differences being different from 0.\nIt’s just the same result:\n\nacedata <- acedata %>%\n  mutate(diff_score = ace_60 - ace_70)\n\nt.test(acedata$diff_score, mu = 0)\n\n\n    One Sample t-test\n\ndata:  acedata$diff_score\nt = 2.2542, df = 24, p-value = 0.03359\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n 0.2093364 4.7506636\nsample estimates:\nmean of x \n     2.48"
  },
  {
    "objectID": "04_ex.html",
    "href": "04_ex.html",
    "title": "Week 4 Exercises: Chi-Square Tests",
    "section": "",
    "text": "Eye-Colours\n\n\nResearch Question: Do the proportions of people with different eye-colours correspond to those suggested by the internet?\n\nAccording one part of the internet (that reliable source of information!), 76% of people in the world have brown eyes, 10% have blue, 5% hazel, 5% amber, 2% green, 1% grey, and 1% have some other eye colouring (red/violet/heterochromia).\nWe’ll use the same data from the course survey’s here:\n\nsurvey_data <- \n  read_csv(\"https://uoepsy.github.io/data/surveydata_allcourse22.csv\")\n\n\n\nQuestion 7\n\n\nPerform a \\(\\chi^2\\) goodness of fit test to assess the extent to which our sample of students conform to this theorised distribution of eye-colours.\nNo need to do this manually - once is enough. Just go straight to using the chisq.test() function.\n\nHint: Try using chisq.test(..., p = c(?,?,?,...) ).\nWe saw this in the example goodness of fit test, 4A #example\n\n\n\n\n\n Solution \n\n\nLet’s look at the observed counts:\n\ntable(survey_data$eyecolour)\n\n\namber  blue brown green  grey hazel other \n    3   104   215    59     9    49    18 \n\n\nOur theoretical probabilities of different eye colours must match the order in the table which we give chisq.test(). They must also always sum to 1.\n\nchisq.test(table(survey_data$eyecolour), p = c(.05,.1,.76,.02,.01,.05,.01))\n\n\n    Chi-squared test for given probabilities\n\ndata:  table(survey_data$eyecolour)\nX-squared = 487.71, df = 6, p-value < 2.2e-16\n\n\n\n\n\n\nQuestion 8\n\n\nWhat are the observed proportions of our sample with each eyecolour?\nCan you figure out how to use the prop.table() function?\n\n\n\n\n Solution \n\n\nFrom the help documentation (?prop.table()), we see that we can pass prop.table() the argument x, which needs to be a table.\n\nprop.table(table(survey_data$eyecolour))*100\n\n\n     amber       blue      brown      green       grey      hazel      other \n 0.6564551 22.7571116 47.0459519 12.9102845  1.9693654 10.7221007  3.9387309 \n\n\n\nbarplot(prop.table(table(survey_data$eyecolour))*100)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJokes and Tips\n\nData: TipJokes\n\nResearch Question: Can telling a joke affect whether or not a waiter in a coffee bar receives a tip from a customer?\n\nA study published in the Journal of Applied Social Psychology1 investigated this question at a coffee bar of a famous seaside resort on the west Atlantic coast of France. The waiter randomly assigned coffee-ordering customers to one of three groups. When receiving the bill, one group also received a card telling a joke, another group received a card containing an advertisement for a local restaurant, and a third group received no card at all.\nThe data are available at https://uoepsy.github.io/data/TipJoke.csv.\nThe dataset contains the variables:\n\nCard: None, Joke, Ad.\nTip: 1 = The customer left a tip, 0 = The customer did not leave tip.\n\n\n\nQuestion 9\n\n\nProduce a plot and a table to display the relationship between whether or not the customer left a tip, and what (if any) card they received alongside the bill.\nDon’t worry about making it all pretty. Mosaic plots in R are a bit difficult.\n\nHint:\nplot(table(...)) will give you something. You can see one in the example \\(\\chi^2\\) test of independence,4A #example-1.\n\n\n\n\n\n Solution \n\n\n\ntipjoke <- read_csv('https://uoepsy.github.io/data/TipJoke.csv')\n\ntable(tipjoke$Card, tipjoke$Tip)\n\n      \n        0  1\n  Ad   60 14\n  Joke 42 30\n  None 49 16\n\nplot(table(tipjoke$Card, tipjoke$Tip))\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 10\n\n\nWhat would you expect the cell counts to look like if there were no relationship between what the waiter left and whether or not the customer tipped?\n\n\n\n\n Solution \n\n\nIn total, 60 customers tipped (14+30+16), and 151 did not. So overall, 0.28 (\\(\\frac{60}{(60+151)}\\)) of customers tip.\n74 customers got an Ad card, 72 customers got a Joke, and 65 got None. If this were independent of whether or not they left a tip, we would expect equal proportions of tippers in each group.\nSo we would expect 0.28 of each group to leave a tip.\nYou can think about observed vs expected by looking at the two-way table along with the marginal row and column totals given:\n\n\n\n\n \n  \n      \n    0 \n    1 \n     \n  \n \n\n  \n    Ad \n     \n     \n    74 \n  \n  \n    Joke \n     \n     \n    72 \n  \n  \n    None \n     \n     \n    65 \n  \n  \n     \n    151 \n    60 \n    211 \n  \n\n\n\n\n\nFor a given cell of the table we can calculate the expected count as \\(\\text{row total} \\times \\frac{\\text{column total}}{\\text{samplesize}}\\):\nExpected:\n\n\n\n\n \n  \n      \n    0 \n    1 \n     \n  \n \n\n  \n    Ad \n    52.96 \n    21.04 \n    74 \n  \n  \n    Joke \n    51.53 \n    20.47 \n    72 \n  \n  \n    None \n    46.52 \n    18.48 \n    65 \n  \n  \n     \n    151.00 \n    60.00 \n    211 \n  \n\n\n\n\n\nIf you’re wondering how we do this in R.. here’s our table:\n\nt <- tipjoke %>%\n  select(Card, Tip) %>% table()\nt\n\n      Tip\nCard    0  1\n  Ad   60 14\n  Joke 42 30\n  None 49 16\n\n\nHere are the row totals:\n\nrowSums(t)\n\n  Ad Joke None \n  74   72   65 \n\n\nand column totals divided by total:\n\ncolSums(t) / sum(t)\n\n        0         1 \n0.7156398 0.2843602 \n\n\nthere’s a complicated bit of code using %o% which could do this for us. You don’t need to remember %o%, it’s very rarely used):\n\ne <- rowSums(t) %o% colSums(t) / sum(t)\ne\n\n            0        1\nAd   52.95735 21.04265\nJoke 51.52607 20.47393\nNone 46.51659 18.48341\n\n\nOr, alternatively, do it one by one:\n\nrowSums(t) * (colSums(t) / sum(t))[1]\n\n      Ad     Joke     None \n52.95735 51.52607 46.51659 \n\nrowSums(t) * (colSums(t) / sum(t))[2]\n\n      Ad     Joke     None \n21.04265 20.47393 18.48341 \n\n\n\n\n\n\nQuestion 11\n\n\nJust like we gave the chisq.test() function a table of observed frequencies when we conducted a goodness of fit test in earlier exercises, we can give it a two-way table of observed frequencies to conduct a test of independence.\nTry it now.\n\n\n\n\n Solution \n\n\n\nchisq.test(table(tipjoke$Card, tipjoke$Tip))\n\n\n    Pearson's Chi-squared test\n\ndata:  table(tipjoke$Card, tipjoke$Tip)\nX-squared = 9.9533, df = 2, p-value = 0.006897\n\n\n\n\n\n\n\n\n\n\nSome RMarkdown\nFor one of the \\(t\\)-tests we saw in the previous week’s exercises, we can use an RMarkdown document in which we write our results so that they get compiled to look nice and pretty:\n\n\nWriting this\n\n\n\n\n\n\n\n\n\n\n\nCompiles to this\n\nA one-sided one-sample t-test was conducted in order to determine if the average score on the Procrastination Assessment Scale for Students (PASS) for a sample of 20 students at Edinburgh University was significantly lower (\\(\\alpha = .05\\)) than the average score obtained during development of the PASS.\nEdinburgh University students scored lower (Mean = 30.7, SD = 3.31) than the score reported by the authors of the PASS (Mean = 33). This difference was statistically significant (t(19)=-3.11, p < .05, one-tailed).\n\n\n\nThis is one of the huge benefits of RMarkdown. Imagine we collected more data - we wouldn’t have to edit all the results, we could simply recompile and they would update for us!\nNote how it works:\n\nthe code chunk saves the results of the t.test() function as a named object res2.\nin text, the backticks `r … … … ` are used to execute small bits of R code, and include the output within the text. For instance, the line `r res2$statistic %>% round(2)` gets the t-statistic from the results, and rounds it to 2 decimal places, which get’s printed out as -3.11.\nthe bits between the dollar signs, e.g. $\\alpha$ will get printed as mathematical symbols such as \\(\\alpha\\).\n\n\nRMarkdown documents are self-contained.\nYou need to to put everything that is needed to reproduce your analysis in the correct order.\nFor instance, if you have used the console (bottom left window) to define an object peppapig <- 30, you will have an object in your environment (top right window) called “peppapig” which has the value 30.\nIf you were to refer to that object in your RMarkdown document, you will be able to run a line of code such as peppapig/10 because it will find the “peppapig” object in your environment. BUT you won’t be able to compile the document because it “starts fresh” (i.e., compiles within its own environment). In order for it to compile, you would need to define what “peppapig” is inside your document, and before the document then refers to it.\nThe same applies with using functions in from packages. The RMarkdown document needs to know what packages to load before it uses functions from them. Just because you yourself have loaded a package in your session, it does not mean the compilation process for your RMarkdown has access to it.\n\nIf you want some extra explanations on these aspects of RMarkdown, then please see Lessons 0-3 of our Rmd-bootcamp.\n\nQuestion 12\n\n\nCan you create an RMarkdown document which:\n\nReads in the https://uoepsy.github.io/data/TipJoke.csv data.\nConducts and reports a \\(\\chi^2\\) test of independence examining whether telling a joke affect whether or not a waiter in a coffee bar receives a tip from a customer.\nSuccessfully compiles (“knits”) into an .html file.\n\n\n\n\n\n\n\n\n\n\n\n\nFootnotes\n\n\nGueaguen, N. (2002). The Effects of a Joke on Tipping When It Is Delivered at the Same Time as the Bill. Journal of Applied Social Psychology, 32(9), 1955-1963.↩︎"
  },
  {
    "objectID": "04a_chisq.html",
    "href": "04a_chisq.html",
    "title": "4A: Chi-Square Tests",
    "section": "",
    "text": "This reading:\n\nWhat are the basic hypothesis tests that we can conduct when we are interested in variables that have categories instead of numbers?\nHere we continue with our brief explainers of different basic statistical tests. The past few weeks have focused on tests for numeric outcome variables, where we have been concerned with the mean of that variable (e.g. whether that mean is different from some specific value, or whether it is different between two groups). We now turn to investigate tests for categorical outcome variables.\nThe test-statistics for these tests (denoted \\(\\chi^2\\), spelled chi-square, pronounced “kai-square”) are obtained by adding up the standardized squared deviations in each cell of a table of frequencies:\n\\[\n\\chi^2 = \\sum_{all\\ cells} \\frac{(\\text{Observed} - \\text{Expected})^2}{\\text{Expected}}\n\\]\nwhere:"
  },
  {
    "objectID": "04a_chisq.html#example",
    "href": "04a_chisq.html#example",
    "title": "4A: Chi-Square Tests",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nResearch Question: Have proportions of adults suffering no/mild/moderate/severe depression changed from 2019?\n\nIn 2019, it was reported that 80% of adults (18+) experienced no symptoms of depression, 12% experienced mild symptoms, 4% experienced moderate symptoms, and 4% experienced severe symptoms.\nThe dataset is accessible at https://uoepsy.github.io/data/usmr_chisqdep.csv contains data from 1000 people to whom the PHQ-9 depression scale was administered in 2022.\n\ndepdata <- read_csv(\"https://uoepsy.github.io/data/usmr_chisqdep.csv\") \nhead(depdata)\n\n# A tibble: 6 × 3\n  id    dep    fam_hist\n  <chr> <chr>  <chr>   \n1 ID1   severe n       \n2 ID2   mild   n       \n3 ID3   no     n       \n4 ID4   no     n       \n5 ID5   no     n       \n6 ID6   no     n       \n\n\nWe can see our table of observed counts with the table() function:\n\ntable(depdata$dep)\n\n\n    mild moderate       no   severe \n     143       34      771       52 \n\n\n\n\n The quick and easy way\n\n\nWe can perform the \\(\\chi^2\\) test very easily, by simply passing the table to the chisq.test() function, and passing it the hypothesised proportions. If we don’t give it any, it will assume they are equal.\n\nNote: the proportions must be in the correct order as the entries in the table!\n\nThis will give us the test statistic, degrees of freedom, and the p-value:\n\n# note the order of the table is mild, moderate, no, severe. \n# so we put the proportions in that order\nchisq.test(table(depdata$dep), p = c(.12, .04, .8, .04))\n\n\n    Chi-squared test for given probabilities\n\ndata:  table(depdata$dep)\nX-squared = 9.9596, df = 3, p-value = 0.01891\n\n\nIf the distribution of no/mild/moderate/severe depression were as suggested (80%/12%/4%/4%), then the probability that we would obtain a test statistic this large (or larger) by random chance alone is .019. With an \\(\\alpha = 0.05\\), we reject the null hypothesis that the proportion of people suffering from different levels of depression are the same as those indicated previously in 2019.\n\n\\(\\chi^2\\) goodness of fit test indicated that the observed proportions of people suffering from no/mild/moderate/severe depression were significantly different (\\(\\chi^2(3)=9.96, p = .019\\)) from those expected under the distribution suggested from a 2019 study (80%/12%/4%/4%).\n\nWe can examine where the biggest deviations from the hypothesised distribution are by examining the ‘residuals’:\n\nchisq.test(table(depdata$dep), p = c(.12, .04, .8, .04))$residuals\n\n\n      mild   moderate         no     severe \n 2.0996031 -0.9486833 -1.0253048  1.8973666 \n\n\nThis matches with what we see when we look at the table of counts. With \\(n=1000\\), under our 2019 distribution, we would expect 800 to have no depression, 120 mild, 40 moderate, and 40 severe.\n\ntable(depdata$dep)\n\n\n    mild moderate       no   severe \n     143       34      771       52 \n\n\nThe difference in the moderate “observed - expected” is 6, and the difference in the “no depression” is 29. But these are not comparable, because really the 6 is a much bigger amount of the expected for that category than 29 is for the no depression category. The residuals are a way of standardising these.\nThey are calculated as:\n\\[\n\\text{residual} = \\frac{\\text{observed} - \\text{expected}}{\\sqrt{expected}}\n\\]\n\n\n\n\n Manually\n\n\nFirst we calculate the observed counts:\n\ndepdata %>% \n  count(dep)\n\n# A tibble: 4 × 2\n  dep          n\n  <chr>    <int>\n1 mild       143\n2 moderate    34\n3 no         771\n4 severe      52\n\n\nLet’s add to this the expected counts:\n\ndepdata %>% \n  count(dep) %>%\n  mutate(\n    expected = c(.12, .04, .8, .04)*1000\n  )\n\n# A tibble: 4 × 3\n  dep          n expected\n  <chr>    <int>    <dbl>\n1 mild       143      120\n2 moderate    34       40\n3 no         771      800\n4 severe      52       40\n\n\nHow do we measure how far the observed counts are from the expected counts under the null? If we simply subtracted the expected counts from the observed counts and then add them up, you will get 0. Instead, we will square the differences between the observed and expected counts, and then add them up.\nOne issue, however, remains to be solved. A squared difference between observed and expected counts of 100 has a different weight in these two scenarios:\nScenario 1: \\(O = 30\\) and \\(E = 20\\) leads to a squared difference \\((O - E)^2 = 10^2 = 100\\).\nScenario 2: \\(O = 3000\\) and \\(E = 2990\\) leads to a squared difference \\((O - E)^2 = 10^2 = 100\\)\nHowever, it is clear that a squared difference of 100 in Scenario 1 is much more substantial than a squared difference of 100 in Scenario 2. It is for this reason that we divide the squared differences by the the expected counts to “standardize” the squared deviation.\n\\[\n\\chi^2 = \\sum_{i} \\frac{(\\text{Observed}_i - \\text{Expected}_i)^2}{\\text{Expected}_i}\n\\]\nWe can calculate each part of the equation:\n\ndepdata %>% \n  count(dep) %>%\n  mutate(\n    expected = c(.12, .04, .8, .04)*1000,\n    sq_diff = (n - expected)^2,\n    std_sq_diff = sq_diff/expected\n  )\n\n# A tibble: 4 × 5\n  dep          n expected sq_diff std_sq_diff\n  <chr>    <int>    <dbl>   <dbl>       <dbl>\n1 mild       143      120     529        4.41\n2 moderate    34       40      36        0.9 \n3 no         771      800     841        1.05\n4 severe      52       40     144        3.6 \n\n\nThe test-statistic \\(\\chi^2\\) is obtained by adding up all the standardized squared deviations:\n\ndepdata %>% \n  count(dep) %>%\n  mutate(\n    expected = c(.12, .04, .8, .04)*1000,\n    sq_diff = (n - expected)^2,\n    std_sq_diff = sq_diff/expected\n  ) %>% \n  summarise(\n    chi = sum(std_sq_diff)\n  )\n\n# A tibble: 1 × 1\n    chi\n  <dbl>\n1  9.96\n\n\nThe p-value for a \\(\\chi^2\\) Goodness of Fit Test is computed using a \\(\\chi^2\\) distribution with \\(df = \\text{nr categories} - 1\\).\nWe calculate our p-value by using pchisq() and we have 4 levels of depression, so \\(df = 4-1 = 3\\).\n\npchisq(9.959583, df=3, lower.tail=FALSE)\n\n[1] 0.01891284"
  },
  {
    "objectID": "04a_chisq.html#example-1",
    "href": "04a_chisq.html#example-1",
    "title": "4A: Chi-Square Tests",
    "section": "Example",
    "text": "Example\n\n\nResearch Question: Is severity of depression associated with having a family history of depression?\n\nThe dataset accessible at https://uoepsy.github.io/data/usmr_chisqdep.csv contains data from 1000 people to whom the PHQ-9 depression scale was administered in 2022, and for which respondents were asked a brief family history questionnaire to establish whether they had a family history of depression.\n\ndepdata <- read_csv(\"https://uoepsy.github.io/data/usmr_chisqdep.csv\")\nhead(depdata)\n\n# A tibble: 6 × 3\n  id    dep    fam_hist\n  <chr> <chr>  <chr>   \n1 ID1   severe n       \n2 ID2   mild   n       \n3 ID3   no     n       \n4 ID4   no     n       \n5 ID5   no     n       \n6 ID6   no     n       \n\n\nWe can create our contingency table:\n\ntable(depdata$dep, depdata$fam_hist)\n\n          \n             n   y\n  mild      93  50\n  moderate  23  11\n  no       532 239\n  severe    37  15\n\n\nAnd even create a quick and dirty visualisation of this too:\n\nplot(table(depdata$dep, depdata$fam_hist))\n\n\n\n\n\n\n\n\n\n\n The quick and easy way\n\n\nAgain, we can perform this test very easily by passing the table to the chisq.test() function. We don’t need to give it any hypothesised proportions here - it will work them out based on the null hypothesis that the two variables are independent.\n\nchisq.test(table(depdata$dep, depdata$fam_hist))\n\n\n    Pearson's Chi-squared test\n\ndata:  table(depdata$dep, depdata$fam_hist)\nX-squared = 1.0667, df = 3, p-value = 0.7851\n\n\nIf there was no association between depression severity and having a family history of depression, then the probability that we would obtain a test statistic this large (or larger) by random chance alone is 0.79. With an \\(\\alpha=.05\\), we fail to reject the null hypothesis that there is no association between depression severity and family history of depression.\n\nA \\(\\chi^2\\) test of independence indicated no significant association between severity and family history (\\(\\chi^2(3)=1.07, p=.785\\)), suggesting that a participants’ severity of depression was not dependent on whether or not they had a family history of depression.\n\nWe can see the expected and observed counts:\n\nchisq.test(table(depdata$dep, depdata$fam_hist))$expected\n\n          \n                 n       y\n  mild      97.955  45.045\n  moderate  23.290  10.710\n  no       528.135 242.865\n  severe    35.620  16.380\n\nchisq.test(table(depdata$dep, depdata$fam_hist))$observed\n\n          \n             n   y\n  mild      93  50\n  moderate  23  11\n  no       532 239\n  severe    37  15\n\n\n\n\n\n\n Manually\n\n\nWe have our observed table:\n\ntable(depdata$dep, depdata$fam_hist)\n\n          \n             n   y\n  mild      93  50\n  moderate  23  11\n  no       532 239\n  severe    37  15\n\n\nTo work out our expected counts, we have to do something a bit tricky. Let’s look at the variables independently:\n\ntable(depdata$fam_hist)\n\n\n  n   y \n685 315 \n\ntable(depdata$dep)\n\n\n    mild moderate       no   severe \n     143       34      771       52 \n\n\nWith \\(\\frac{315}{315+685} = 0.315\\) of the sample having a family history, then if depression severity is independent of family history, we would expect that 0.315 of each severity group to have a family history of depression. For example, for the mild depression, with 143 people, we would expect \\(143 \\times 0.315 = 45.045\\) people in that group to have a family history of depression.\nFor a given cell of the table we can calculate the expected count as \\(\\text{row total} \\times \\frac{\\text{column total}}{\\text{samplesize}}\\).\nOr, quickly in R:\n\nobs <- table(depdata$dep, depdata$fam_hist)\nexp <- rowSums(obs) %o% colSums(obs) / sum(obs)\nexp\n\n               n       y\nmild      97.955  45.045\nmoderate  23.290  10.710\nno       528.135 242.865\nsevere    35.620  16.380\n\n\nNow that we have our table of observed counts, and our table of expected counts, we can actually fit these into our formula to calculate the test statistic:\n\nsum ( (obs - exp)^2 / exp )\n\n[1] 1.066686\n\n\nThe p-value is computed using a \\(\\chi^2\\) distribution with \\(df = (\\text{nr rows} - 1) \\times (\\text{nr columns} - 1)\\).\nWhy is this? Well, remember that the degrees of freedom is the number of values that are free to vary as we estimate parameters. In a table such as the one below, where we have 4 rows and 2 columns, the degrees of freedom is the number of cells in the table that can vary before we can simply calculate the values of the other cells (where we’re constrained by the need to sum to our row/column totals).\nWe have 4 rows, and 2 columns, so \\(df = (4-1) \\times (2-1) = 3\\).\n\npchisq(1.066686, df = 3, lower.tail=FALSE)\n\n[1] 0.7851217"
  },
  {
    "objectID": "04b_revisitnhst.html",
    "href": "04b_revisitnhst.html",
    "title": "4B: Revisiting NHST",
    "section": "",
    "text": "In the last couple of weeks we have performed a number of different types of statistical hypothesis test, and it is worth revisiting the general concept in order to consolidate what we’ve been doing.\n\nStep 1. We have been starting by considering what a given statistic is likely to be if a given hypothesis (the null) were true.\n\nFor the \\(t\\)-tests, if the null hypothesis is true (there is no difference between group means/between our observed mean and some value), then our \\(t\\)-statistics (if we could do our study loads of times) will mainly fall around 0, and follow a \\(t\\)-distribution. The precise \\(t\\)-distribution depends on the degrees of freedom, which in turn depends on how much data we have.\n\nFor the \\(\\chi^2\\) tests, if the null hypothesis is true and there is no difference between the observed and expected frequencies, then our \\(\\chi^2\\)-statistics will follow the \\(\\chi^2\\) distribution (i.e., with 2 categories, most of them will be between 0 and 2, with fewer falling >2, see the yellow line in Figure 1).\n\nStep 2. We calculate our statistic from our observed data.\nStep 3. We ask what the probability is of getting a statistic at least as extreme as we get from Step 2, assuming the null hypothesis we stated in Step 1.\n\n\n\n\n\n\n\n\nFigure 1: Chi-Square Distributions\n\n\n\n\n\nIf you’re finding the programming easy, but the statistical concepts difficult\nAnother way which might help to think about this is that if we can make a computer do something over and over again, we can do stats! You may already be familiar with this idea from exercises with the function replicate()!\n\n\nmake the computer generate random data, based on some null hypothesis. Do it lots of times.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwhat proportion of the simulations produce results similar to the observed data (i.e., as extreme or more extreme)? This is \\(p\\). The only difference between this and “statistics” is that we calculate \\(p\\) using math, rather than having to generate random data.\n\n\n\n\n\n\nStatistical vs Practical Significance\nLet’s suppose that an agricultural company is testing out a new fertiliser they have developed to improve tomato growth. They know that, on average, for every 5cm taller a tomato plant is, it tends to provide 1 more tomato. Taller plants = more tomatoes.\nThey plant 1000 seeds (taken from the same tomato plant) in the same compost and place them in positions with the same amount of sunlight. 500 of the plants receive 100ml of water daily, and the other 500 receive a 100ml of the fertiliser mixed with water. After 100 days, they measure the height of all the tomato plants (in cm).\n\n\n\n\n\n\n\n\n\nYou can find the data at https://uoepsy.github.io/data/tomatogrowth.csv.\nWe want to conduct the appropriate test to determine whether the fertiliser provides a statistically significant improvement to tomato plant growth.\nOur outcome variable is growth, which is continuous, and our predictor variable is the grouping (whether they received fertiliser or not). So we’re looking at whether there is a difference in mean growth between the two groups. A t-test will do here.\nOur alternative hypothesis is that the difference in means \\((treatment - control)\\) is greater than 0 (i.e., it improves growth). The t.test() function will use alphabetical ordering of the group variable, so if we say alternative=\"less\" then it is the direction we want \\((control - treatment < 0)\\):1:\n\ntomato <- read_csv(\"https://uoepsy.github.io/data/tomatogrowth.csv\")\nt.test(tomato$height ~ tomato$group, alternative = \"less\")\n\n\n    Welch Two Sample t-test\n\ndata:  tomato$height by tomato$group\nt = -2.0085, df = 997.97, p-value = 0.02243\nalternative hypothesis: true difference in means between group control and group treatment is less than 0\n95 percent confidence interval:\n       -Inf -0.2296311\nsample estimates:\n  mean in group control mean in group treatment \n               115.1955                116.4692 \n\n\n\n\n\nHooray, it is significant! So should we use this fertiliser on all our tomatoes? We need to carefully consider the agricultural company’s situation: given that the fertiliser is comparitively pricey for them to manufacture, is it worth putting into production?\nWhile the fertiliser does improve plant growth to a statistically significant (at \\(\\alpha=0.05\\)) degree, the improvement is minimal. The difference in means is only 1.2737cm. Will this result in many more tomatoes? Probably not.\nFurthermore, if we take a look at the confidence interval provided by the t.test() function, we can see that a plausible value for the true difference in means is 0.23cm, which is tiny!\n\n\n\n\n\nFurther Thoughts\nThe above example is just a silly demonstration that whether or not our p-value is below some set criteria (e.g., .05, .01, .001) is only a small part of the picture. There are many things which are good to remember about p-values:\n\nWith a big enough sample size, even a tiny tiny effect is detectable at <.05. For example, you might be interested in testing if the difference in population means across two groups is 0 (\\(\\mu_1 - \\mu_2 = 0\\). Your calculated sample difference could be \\(\\bar{x}_1 - \\bar{x}_2 = 0.00002\\) but with a very small p-value of 0.00000001. This would tell you that there is strong evidence that the observed difference in means (0.00002) is significantly different from 0. However, the practical difference, that is - the magnitude of the distance between 0.00002 and 0 - is negligible and of pretty much no interest to practitioners. This is the idea we saw in the tomato-plant example.\nThe criteria (\\(\\alpha\\)) which we set (at .05, .01, etc.), is arbitrary.\nTwo things need to be kept in mind: there is the true status of the world (which is unknown to us) and the collected data (which are available and reveal the truth only in part).\nAn observed p-value smaller than the chosen alpha does not imply the true presence of an effect. The observed difference might be due to sampling variability.\n\n\n\n\n\n\nFigure 2: Two possible samples (blue dots) drawn from two populations with same mean. On the left, the selected sample shows a big difference. On the right, the sample shows no difference. Samples such as that on the left are very unlikely to happen (e.g., 5% of the time). It is for these unlikely samples that we would reject the null hypothesis incorrectly 5% of the time.\n\n\n\n\n\nEven if a null hypothesis about the population is actually true, then 5% (if \\(\\alpha\\) = 0.05) of the test-statistics computed on different samples from that population would result in a p-value <.05. If you were to obtain 100 random samples from that population, five out of the 100 p-values are likely to be <.05 even if the null hypothesis about the population was actually true.\nIf you have a single dataset, and you perform several tests of hypotheses on those data, each test comes with a probability of incorrectly rejecting the null (making a type I error) of 5%. Hence, considering the entire family of tests computed, your overall type I error probability will be larger than 5%. In simple words, this means that if you perform enough tests on the same data, you’re almost sure to reject one of the null hypotheses by mistake. This concept is known as multiple comparisons.\n\n\n\n\n\n\nFurther Reading (Optional)\nThere are many different competing approaches to doing statistical analyses.\nIn this course we are learning about what is known as the frequentist framework. Roughly speaking, this is where probabilities are defined as “long-run frequencies” (i.e., the probability of \\(x\\) happening over many many trials2). Even within the frequentist approach, there are different views as to how to how this definition of probability is best utilised.\nThe following links provide some introductory readings to some of the different schools of thought:\n\nPerezgonzalez, J. D. (2015). Fisher, Neyman-Pearson or NHST? A tutorial for teaching data testing. Frontiers in Psychology, 6, 223.\nCalin-Jageman, R. J., & Cumming, G. (2019). The new statistics for better science: ask how much, how uncertain, and what else is known. The American Statistician, 73(sup1), 271-280.\nThe correctly-used p value needs an effect size and CI - don’t worry too much about the background of this blog, but it offers some useful visualisations to show how important it is to remember about the uncertainty in our estimates.\n\n\n\n\n\n\n\n\n\nFootnotes\n\n\nWe could instead make the group variable a factor and specify the order of the levels↩︎\nFor those of you who are interested in what alternative definitions there are, do a google search for “frequentist vs bayesian”. Be prepared that this will open a big can of worms!↩︎"
  },
  {
    "objectID": "05_ex.html",
    "href": "05_ex.html",
    "title": "Week 5 Exercises: Cov, Cor, Models",
    "section": "",
    "text": "Q1: Go to http://guessthecorrelation.com/ and play the “guess the correlation” game for a little while to get an idea of what different strengths and directions of \\(r\\) can look like.\n\n\n\n\nSleepy time\n\nData: Sleep levels and daytime functioning\nA researcher is interested in the relationship between hours slept per night and self-rated effects of sleep on daytime functioning. She recruited 50 healthy adults, and collected data on the Total Sleep Time (TST) over the course of a seven day period via sleep-tracking devices.\nAt the end of the seven day period, participants completed a Daytime Functioning (DTF) questionnaire. This involved participants rating their agreement with ten statements (see Table 1). Agreement was measured on a scale from 1-5. An overall score of daytime functioning can be calculated by:\n\nreversing the scores for items 4,5 and 6 (because those items reflect agreement with positive statements, whereas the other ones are agreement with negative statement);\nsumming the scores on each item; and\nsubtracting the sum score from 50 (the max possible score). This will make higher scores reflect better perceived daytime functioning.\n\nThe data is available at https://uoepsy.github.io/data/sleepdtf.csv.\n\n\n\n\n\n\nTable 1:  Daytime Functioning Questionnaire \n  \n  \n    \n      Item\n      Statement\n    \n  \n  \n    Item_1\nI often felt an inability to concentrate\n    Item_2\nI frequently forgot things\n    Item_3\nI found thinking clearly required a lot of effort\n    Item_4\nI often felt happy\n    Item_5\nI had lots of energy\n    Item_6\nI worked efficiently\n    Item_7\nI often felt irritable\n    Item_8\nI often felt stressed\n    Item_9\nI often felt sleepy\n    Item_10\nI often felt fatigued\n  \n  \n  \n\n\n\n\n\n\n\nQuestion 2\n\n\nRead in the data, and calculate the overall daytime functioning score, following the criteria outlined above. Make this a new column in your dataset.\n\nTo reverse items 4, 5 and 6, we we need to make all the scores of 1 become 5, scores of 2 become 4, and so on… What number satisfies all of these equations: ? - 5 = 1, ? - 4 = 2, ? - 3 = 3?\nTo quickly sum accross rows, you might find the rowSums() function useful (you don’t have to use it though)\n\n\n\n\n\n Solution \n\n\n\nsleepdtf <- read_csv(\"https://uoepsy.github.io/data/sleepdtf.csv\")\nsummary(sleepdtf)\n\n      TST             item_1         item_2         item_3         item_4    \n Min.   : 4.900   Min.   :1.00   Min.   :1.00   Min.   :1.00   Min.   :1.00  \n 1st Qu.: 7.225   1st Qu.:1.00   1st Qu.:2.00   1st Qu.:1.25   1st Qu.:1.00  \n Median : 7.900   Median :1.00   Median :2.00   Median :2.00   Median :1.00  \n Mean   : 8.004   Mean   :1.58   Mean   :2.46   Mean   :2.38   Mean   :1.26  \n 3rd Qu.: 9.025   3rd Qu.:2.00   3rd Qu.:3.00   3rd Qu.:3.00   3rd Qu.:1.00  \n Max.   :11.200   Max.   :3.00   Max.   :5.00   Max.   :5.00   Max.   :3.00  \n     item_5         item_6         item_7         item_8        item_9    \n Min.   :1.00   Min.   :1.00   Min.   :1.00   Min.   :1.0   Min.   :1.00  \n 1st Qu.:2.00   1st Qu.:2.00   1st Qu.:1.00   1st Qu.:2.0   1st Qu.:2.00  \n Median :2.00   Median :3.00   Median :2.00   Median :2.5   Median :3.00  \n Mean   :2.36   Mean   :2.78   Mean   :2.04   Mean   :2.5   Mean   :2.96  \n 3rd Qu.:3.00   3rd Qu.:4.00   3rd Qu.:3.00   3rd Qu.:3.0   3rd Qu.:4.00  \n Max.   :4.00   Max.   :5.00   Max.   :4.00   Max.   :4.0   Max.   :5.00  \n    item_10    \n Min.   :1.00  \n 1st Qu.:2.00  \n Median :3.00  \n Mean   :2.54  \n 3rd Qu.:3.00  \n Max.   :5.00  \n\n\nTo reverse the items, we can simply do 6 minus the score:\n\nsleepdtf <- \n  sleepdtf %>% mutate(\n    item_4=6-item_4,\n    item_5=6-item_5,\n    item_6=6-item_6\n  ) \n\nNow we can use rowSums(), and subtract the sum scores from from 50 (the max score):\n\nsleepdtf$dtf = 50-rowSums(sleepdtf[, 2:11])\n\nAn alternative way to do this would be:\n\nsleepdtf %>% \n  mutate(\n    dtf = 50 - (item_1 + item_2 + item_3 + item_4 + item_5 + item_6 + item_7 + item_8 + item_9 + item_10)\n  )\n\n\n\n\n\nQuestion 3\n\n\nCalculate the correlation between the total sleep time (TST) and the overall daytime functioning score calculated in the previous question.\nConduct a test to establish the probability of observing a correlation this strong in a sample of this size assuming the true correlation to be 0.\nWrite a sentence or two summarising the results.\n\nHints: You can do this all with one function, see 5A #correlation-test.\n\n\n\n\n\n Solution \n\n\n\ncor.test(sleepdtf$TST, sleepdtf$dtf)\n\n\n    Pearson's product-moment correlation\n\ndata:  sleepdtf$TST and sleepdtf$dtf\nt = 6.244, df = 48, p-value = 1.062e-07\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.4807039 0.7989417\nsample estimates:\n      cor \n0.6694741 \n\n\n\nThere was a strong positive correlation between total sleep time and self-reported daytime functioning score (\\(r\\) = 0.67, \\(t(48)\\) = 6.24, \\(p < .001\\)) in the current sample. As total sleep time increased, levels of self-reported daytime functioning increased.\n\n\n\n\n\nQuestion 4 (open-ended)\n\n\nThink about this relationship in terms of causation.\n Claim: Less sleep causes poorer daytime functioning.\n Why might it be inappropriate to make the claim above based on these data alone? Think about what sort of study could provide stronger evidence for such a claim.\n\nThings to think about:\n\ncomparison groups.\n\nrandom allocation.\n\nmeasures of daytime functioning.\n\nmeasures of sleep time.\n\nother (unmeasured) explanatory variables.\n\n\n\n\n\n\n\n\n\n\nAttendance and Attainment\n\nData: Education SIMD Indicators\nThe Scottish Government regularly collates data across a wide range of societal, geographic, and health indicators for every “datazone” (small area) in Scotland.\nThe dataset at https://uoepsy.github.io/data/simd20_educ.csv contains some of the education indicators (see Table 2).\n\n\n\n\n\n\nTable 2:  Education indicators from the 2020 SIMD data \n  \n  \n    \n      variable\n      description\n    \n  \n  \n    intermediate_zone\nAreas of scotland containing populations of between 2.5k-6k household residents\n    attendance\nAverage School pupil attendance\n    attainment\nAverage attainment score of School leavers (based on Scottish Credit and Qualifications Framework (SCQF))\n    university\nProportion of 17-21 year olds entering university\n  \n  \n  \n\n\n\n\n\n\n\nQuestion 5\n\n\nConduct a test of whether there is a correlation between school attendance and school attainment in Scotland.\nPresent and write up the results.\n\nHints:\nThe readings have not included an example write-up for you to follow. Try to follow the logic of those for t-tests and \\(\\chi^2\\)-tests.\n\ndescribe the relevant data\nexplain what test was conducted and why\npresent the relevant statistic, degrees of freedom (if applicable), statement on p-value, etc.\nstate the conclusion.\n\nBe careful figuring out how many observations your test is conducted on. cor.test() includes only the complete observations.\n\n\n\n\n\n Solution \n\n\n\nsimd <- read_csv(\"https://uoepsy.github.io/data/simd20_educ.csv\")\n\nHere are the means of the two variables. We should remember that these calculations will include some observations which have missing data on the other variable.\n\nsimd %>% \n  summarise(\n    m_attendance = mean(attendance, na.rm = TRUE),\n    m_attainment = mean(attainment, na.rm = TRUE)\n)\n\n# A tibble: 1 × 2\n  m_attendance m_attainment\n         <dbl>        <dbl>\n1        0.811         5.53\n\n\nInstead, to match with out analysis, we might be inclined to filter our data to complete data:\n\nsimd_comp <- simd %>% \n  filter(!is.na(attendance) & !is.na(attainment))\n\nsimd_comp %>%\n  summarise(\n    m_attendance = mean(attendance),\n    m_attainment = mean(attainment),\n    sd_attendance = sd(attendance),\n    sd_attainment = sd(attainment)\n)\n\n# A tibble: 1 × 4\n  m_attendance m_attainment sd_attendance sd_attainment\n         <dbl>        <dbl>         <dbl>         <dbl>\n1        0.811         5.53        0.0696         0.386\n\n\n\ncor.test(simd_comp$attendance, simd_comp$attainment)\n\n\n    Pearson's product-moment correlation\n\ndata:  simd_comp$attendance and simd_comp$attainment\nt = 51.495, df = 1242, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.8066637 0.8421951\nsample estimates:\n      cor \n0.8252442 \n\n\n\n\n\n\nA correlation test was conducted to assess whether there is a relationship between an area’s average school attendance, and its average school attainment level. A total of 1244 geographical areas were included in the analysis, with a mean school attendance of 0.81 (SD = 0.07) and a mean school attainment score of 5.53 (SD = 0.39).\nThere was a strong positive correlation between a geographical area’s level of school attendance and its school attainment (\\(r\\) = 0.83, \\(t(1242\\) = 51.5, \\(p < 0.001\\)). We therefore reject the null hypothesis that there is no correlation between an area’s school attendance and attainment. Figure 1 provides a visualisation of the relationship.\n\n\nCode\nggplot(simd_comp, aes(x=attendance, y=attainment)) + \n  geom_point() + \n  labs(x = \"School attendance\",\n       y = \"School attainment\")\n\n\n\n\n\nFigure 1: Positive relationship between geographical areas’ level of school attendance and school attainment\n\n\n\n\n\n\n Optional Optional: some extra plotting bits\n\n\nSometimes we may want to highlight certain parts of a plot. We can do that using the gghighlight package, and giving it a set of conditions (like we do for filter()) in order for it to decide which points to highlight.\nYou can see an example below.\nWe have also created the title by referring to the cor() function, and ’paste’ing it together to “r =”\n\nlibrary(gghighlight)\n\nggplot(simd_comp, aes(x=attendance, y=attainment)) + \n  geom_point() + \n  gghighlight( (attainment>6 & attendance<.75) | \n               attendance > .95 | \n               (attendance > .82 & attainment<5),\n               label_key = intermediate_zone) + \n  labs(x = \"School attendance\",\n       y = \"School attainment\",\n       title = paste0(\"r = \",\n                       round(\n                         cor(simd_comp$attendance,\n                                  simd_comp$attainment),\n                         2)\n                       ))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions and Models\n\nQuestion 6\n\n\nThe Scottish National Gallery kindly provided us with measurements of side and perimeter (in metres) for a sample of 10 square paintings.\nThe data are provided below:\nNote: this is a way of creating a “tibble” (a dataframe in ‘tidyverse-style’ language) in R, rather than reading one in from an external file.\n\nsng <- tibble(\n  side = c(1.3, 0.75, 2, 0.5, 0.3, 1.1, 2.3, 0.85, 1.1, 0.2),\n  perimeter = c(5.2, 3.0, 8.0, 2.0, 1.2, 4.4, 9.2, 3.4, 4.4, 0.8)\n)\n\nPlot the data from the Scottish National Gallery using ggplot(), with the side measurements of the paintings on the x-axis, and the perimeter measurements on the y-axis.\nWe know that there is a mathematical model for the relationship between the side-length and perimeter of squares: \\(perimeter = 4 \\times \\ side\\).\nTry adding the following line to your plot:\n\n  stat_function(fun = ~.x * 4)\n\n\n\n\n\n Solution \n\n\n\nsng <- tibble(\n  side = c(1.3, 0.75, 2, 0.5, 0.3, 1.1, 2.3, 0.85, 1.1, 0.2),\n  perimeter = c(5.2, 3.0, 8.0, 2.0, 1.2, 4.4, 9.2, 3.4, 4.4, 0.8)\n)\n\nggplot(data = sng, aes(x = side, y = perimeter)) +\n  geom_point(colour = 'black', alpha = 0.5, size = 3) +\n  labs(x = 'Side (m)', y = 'Perimeter (m)')+\n  stat_function(fun = ~.x * 4)\n\n\n\n\nFigure 2: The exact relationship between side and perimeter of squares.\n\n\n\n\nThe above plot shows perfect agreement between the observed data and the model.\n\n\n\n\nQuestion 7\n\n\nUse our mathematical model to predict the perimeter of a painting with a side of 1.5 metres.\n\nHints:\nWe don’t have a painting with a side of 1.5 metres within the random sample of paintings from the Scottish National Gallery, but we can work out the perimeter of an hypothetical square painting with 1.5m sides, using our model - either using the plot from the previous question, or calculating it algebraically.\n\n\n\n\n\n Solution \n\n\nVisual approach\n\n\n\n\n\n\n\n\n\nSometimes we can directly read a predicted value from the graph of the functional relationship.\nConsider the plot created in the previous question. First, we need to check where x = 1.5. Then, we draw a vertical dashed line until it meets the blue line. The y value corresponding to x = 1.5 can be read off the y-axis.\nHowever, in this case it is not that easy to read it from the drawing… Let’s try the next approach.\n Algebraic approach\nYou can substitute the x value in the formula and calculate the corresponding y value.\n\\[\n\\begin{align}\nperimeter &= 4 \\times \\ side \\\\\n&= 4 \\times \\ (1.5) \\\\\n&= 6\n\\end{align}\n\\]\n\n\nThe predicted perimeter of squared paintings having a 1.5m side is 6m.\n\nNOTE: Don’t forget to always include the measurement units when reporting/writing-up results!\n\n\n\n\nData: HandHeight\nThis dataset, from Jessican M Utts and Robert F Heckard. 2015. Mind on Statistics (Cengage Learning)., records the height and handspan reported by a random sample of 167 students as part of a class survey.\nThe variables are:\n\nheight, measured in inches\nhandspan, measured in centimetres\n\nThe data are available at https://uoepsy.github.io/data/handheight.csv\n\n\nQuestion 8\n\n\nConsider the relationship between height (in inches) and handspan (in cm).\nRead the handheight data into R, and investigate (visually) how handspan varies as a function of height for the students in the sample.\nDo you notice any outliers or points that do not fit with the pattern in the rest of the data?\nComment on any main differences you notice between this relationship and the relationship between sides and perimeter of squares.\n\n\n\n\n Solution \n\n\nThe handheight data set contains two variables, height and handspan, which are both numeric and continuous. We display the relationship between two numeric variables with a scatterplot.\nWe can also add marginal boxplots for each variable using the package ggExtra. Before using the package, make sure you have it installed via install.packages('ggExtra').\n\nhandheight <- read_csv(file = 'https://uoepsy.github.io/data/handheight.csv')\n\nlibrary(ggExtra)\n\nplt <- ggplot(handheight, aes(x = height, y = handspan)) +\n  geom_point(size = 3, alpha = 0.5) +\n  labs(x = 'Height (in.)', y = 'Handspan (cm)')\n\nggMarginal(plt, type = 'boxplot')\n\n\n\n\nFigure 3: The statistical relationship between height and handspan.\n\n\n\n\nOutliers are extreme observations that do not seem to fit with the rest of the data. This could either be:\n\nmarginally along one axis: points that have an unusual (too high or too low) x-coordinate or y-coordinate;\njointly: observations that do not fit with the rest of the point cloud.\n\nThe boxplots in fig-handheight-scatterplot do not highlight any outliers in the marginal distributions of height and handspan. Furthermore, from the scatterplot we do not notice any extreme observations or points that do not fit with the rest of the point cloud.\nWe notice a moderate, positive (that is, increasing) linear relationship between height and handspan.\nRecall Figure 2, displaying the relationship between side and perimeters of squares. In the plot we notice two points on top of each other, reflecting the fact that two squares having the same side will always have the same perimeter. In fact, the data from the Scottish National Gallery include two squared paintings with a side of 1.1m, both having a measured perimeter of 4.4m.\nfig-handheight-scatterplot, instead, displays the relationship between height and handspan of a sample of students. The first thing that grabs our attention is the fact that students having the same height do not necessarily have the same handspan. Rather, we clearly see a variety of handspan values for students all having a height of, for example, 70in. To be more precise, the seven students who are 70 in. tall all have differing handspans.\n\n\n\n\nQuestion 9\n\n\nHopefully, as part of the previous question, you created a scatterplot of handspans against heights. If not, make one now.\nTry adding the following line of code to the scatterplot. It will add a best-fit line describing how handspan varies as a function of height. For the moment, the argument se = FALSE tells R to not display uncertainty bands.\n\ngeom_smooth(method = lm, se = FALSE)\n\nThink about the differences you notice with between this and the figure you made in Question 6.\n\n\n\n\n Solution \n\n\n\nggplot(handheight, aes(x = height, y = handspan)) +\n  geom_point(size = 3, alpha = 0.5) +\n  geom_smooth(method = lm, se = FALSE) +\n  labs(x = 'Height (in.)', y = 'Handspan (cm)')\n\n\n\n\nFigure 4: The best-fit line.\n\n\n\n\nThe line representing the relationship between side and perimeter of squares (Figure 2) is able to predict the actual perimeter value from the measurement of the side of a square. This is possible because the relationship between side and perimeter is an exact one. That is, any squares having the same side will have the same perimeter, and there will be no variation in those values.\nThe line that best fits the relationship between height and handspan (Figure 4) is only able to predict the average handspan for a given value of height. This is because there will be a distribution of handspans at each value of height. The line will fit the trend/pattern in the values, but there will be individual-to-individual variability that we must accept around that average pattern.\n\n\n\n\nRelationships such as that between height and handspan show deviations from an “average pattern”. To model this, we need need to create a model that allows for deviations from the linear relationship. This is called a statistical model.\nA statistical model includes both a deterministic function and a random error term:\n\\[\nHandspan = \\beta_0 + \\beta_1 \\ Height + \\epsilon\n\\]\nor, in short,\n\\[\ny = \\underbrace{\\beta_0 + \\beta_1 \\ x}_{f(x)} + \\underbrace{\\epsilon}_{\\text{random error}}\n\\]\nThe deterministic function \\(f(x)\\) need not be linear if the scatterplot displays signs of nonlinearity, but in this course we focus primarily on linear relationships.\nIn the equation above, the terms \\(\\beta_0\\) and \\(\\beta_1\\) are numbers specifying where the line going through the data meets the y-axis and its slope (rate of increase/decrease).\n\n\nQuestion 10\n\n\n\n\n\nThe line of best-fit is given by:1\n\\[\n\\widehat{Handspan} = -3 + 0.35 \\ Height\n\\]\nWhat is your best guess for the handspan of a student who is 73in tall?\nAnd for students who are 5in?\n\n\n\n\n Solution \n\n\nThe predicted average handspan for students who are 73in tall is \\(-3 + 0.35 * 73 = 22.55\\)cm.\nThe predicted average handspan for students who are 5in tall is \\(-3 + 0.35 * 5 = -1.25\\)cm. But wait, handspan can not be negative… This does not make any sense! That’s right, we went too far off the range of the available data on heights, which were between 57in and 78in. We extrapolated. This is very dangerous…\n\n\n\n\n\nFigure 5: Source: Randall Munroe, xkcd.com\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFootnotes\n\n\nYes, the error term is gone. This is because the line of best-fit gives you the prediction of the average handspan for a given height, and not the individual handspan of a person, which will almost surely be different from the prediction of the line.↩︎"
  },
  {
    "objectID": "05a_covcor.html",
    "href": "05a_covcor.html",
    "title": "Covariance, Correlation, and Modelling",
    "section": "",
    "text": "In the last couple of weeks we have covered a range of the basic statistical tests that can be conducted when we have a single outcome variable, and sometimes also a single explanatory variable. Our outcome variables have been both continuous (\\(t\\)-tests) and categorical (\\(\\chi^2\\)-tests). We’re going to look at one more relationship now, which is that between two continuous variables. This will also provide us with our starting point for the second block of the course.\n\n\n\n\n \n  \n    outcome \n    explanatory \n    test \n    examines \n  \n \n\n  \n    continuous \n     \n    t.test(y, mu = ?) \n    is the mean of y different from [specified value]? \n  \n  \n    continuous \n    binary \n    t.test(y ~ x) \n    is the mean of y different between the two groups? \n  \n  \n    categorical \n     \n    chisq.test(table(y), prob = c(?,...,?)) \n    is the distribution of categories of y different from [specified proportions]? \n  \n  \n    categorical \n    categorical \n    chisq.test(table(y,x)) \n    is the distribution of categories of y dependent on the category of x? \n  \n  \n    continuous \n    continuous \n    ??? \n    ??? \n  \n\n\n\n\n\n\n\nResearch Question: Is there a correlation between accuracy and self-perceived confidence of memory recall?\n\nOur data for this walkthrough is from a (hypothetical) study on memory. Twenty participants studied passages of text (c500 words long), and were tested a week later. The testing phase presented participants with 100 statements about the text. They had to answer whether each statement was true or false, as well as rate their confidence in each answer (on a sliding scale from 0 to 100). The dataset contains, for each participant, the percentage of items correctly answered, and the average confidence rating. Participants’ ages were also recorded.\nThe data are available at “https://uoepsy.github.io/data/recalldata.csv.\n\nLet’s take a look visually at the relationships between the percentage of items answered correctly (recall_accuracy) and participants’ average self-rating of confidence in their answers (recall_confidence). Let’s also look at the relationship between accuracy and age.\n\nlibrary(tidyverse)\nlibrary(patchwork)\n\nrecalldata <- read_csv('https://uoepsy.github.io/data/recalldata.csv')\n\nggplot(recalldata, aes(x=recall_confidence, recall_accuracy))+\n  geom_point() + \nggplot(recalldata, aes(x=age, recall_accuracy))+\n  geom_point()\n\n\n\n\n\n\n\n\nThese two relationships look quite different.\n\nFor participants who tended to be more confident in their answers, the percentage of items they correctly answered tends to be higher.\n\nThe older participants were, the lower the percentage of items they correctly answered tended to be.\n\nWhich relationship should we be more confident in and why?\nIdeally, we would have some means of quantifying the strength and direction of these sorts of relationship. This is where we come to the two summary statistics which we can use to talk about the association between two numeric variables: Covariance and Correlation.\n\nCovariance\nCovariance is the measure of how two variables vary together. It is the change in one variable associated with the change in another variable.\nFor samples, covariance is calculated using the following formula:\n\\[\\mathrm{cov}(x,y)=\\frac{1}{n-1}\\sum_{i=1}^n (x_{i}-\\bar{x})(y_{i}-\\bar{y})\\]\nwhere:\n\n\\(x\\) and \\(y\\) are two variables; e.g., age and recall_accuracy;\n\\(i\\) denotes the observational unit, such that \\(x_i\\) is value that the \\(x\\) variable takes on the \\(i\\)th observational unit, and similarly for \\(y_i\\);\n\\(n\\) is the sample size.\n\n\nCovariance in R\nWe can calculate covariance in R using the cov() function.\ncov() can take two variables cov(x = , y = ).\n\ncov(x = recalldata$recall_accuracy, y = recalldata$recall_confidence)\n\n[1] 118.0768\n\n\nIf necessary, we can choose to remove NAs using na.rm = TRUE inside the cov() function.\n\n\n Covariance explained visually\n\n\n\n\n\nConsider the following scatterplot:\n\n\n\n\n\n\n\n\n\n Now let’s superimpose a vertical dashed line at the mean of \\(x\\) (\\(\\bar{x}\\)) and a horizontal dashed line at the mean of \\(y\\) (\\(\\bar{y}\\)):\n\n\n\n\n\n\n\n\n\n Now let’s pick one of the points, call it \\(x_i\\), and show \\((x_{i}-\\bar{x})\\) and \\((y_{i}-\\bar{y})\\).\n Notice that this makes a rectangle.\n As \\((x_{i}-\\bar{x})\\) and \\((y_{i}-\\bar{y})\\) are both positive values, their product - \\((x_{i}-\\bar{x})(y_{i}-\\bar{y})\\) - is positive.\n\n\n\n\n\n\n\n\n\n In fact, for all these points in red, the product \\((x_{i}-\\bar{x})(y_{i}-\\bar{y})\\) is positive (remember that a negative multiplied by a negative gives a positive):\n\n\n\n\n\n\n\n\n\n And for these points in blue, the product \\((x_{i}-\\bar{x})(y_{i}-\\bar{y})\\) is negative:\n\n\n\n\n\n\n\n\n\n Now take another look at the formula for covariance:\n\\[\\mathrm{cov}(x,y)=\\frac{\\sum_{i=1}^n (x_{i}-\\bar{x})(y_{i}-\\bar{y})}{n-1}\\]\nIt is the sum of all these products divided by \\(n-1\\). It is the average of the products! Sort of like the average area of the rectangles!\n\n\n\n\n Optional: Manually calculating covariance\n\n\n\nCreate 2 new columns in the memory recall data, one of which is the mean recall accuracy, and one which is the mean recall confidence.\n\n\nrecalldata <-\n  recalldata %>% mutate(\n    maccuracy = mean(recall_accuracy),\n    mconfidence = mean(recall_confidence)\n  )\n\n\nNow create three new columns which are:\n\nrecall accuracy minus the mean recall accuracy - this is the \\((x_i - \\bar{x})\\) part.\n\nconfidence minus the mean confidence - and this is the \\((y_i - \\bar{y})\\) part.\n\nthe product of i. and ii. - this is calculating \\((x_i - \\bar{x})\\)\\((y_i - \\bar{y})\\).\n\n\n\nrecalldata <- \n  recalldata %>% \n    mutate(\n      acc_minus_mean_acc = recall_accuracy - maccuracy,\n      conf_minus_mean_conf = recall_confidence - mconfidence,\n      prod_acc_conf = acc_minus_mean_acc * conf_minus_mean_conf\n    )\n\nrecalldata\n\n# A tibble: 20 × 9\n   ppt    recall_accuracy recall…¹   age maccu…² mconf…³ acc_m…⁴ conf_…⁵ prod_…⁶\n   <chr>            <dbl>    <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 ppt_1               72     66.6    72    69.2    55.4    2.75  11.2     30.9 \n 2 ppt_2               66     47.1    35    69.2    55.4   -3.25  -8.30    27.0 \n 3 ppt_3               47     43.8    48    69.2    55.4  -22.2  -11.7    259.  \n 4 ppt_4               84     58.9    52    69.2    55.4   14.8    3.46    51.0 \n 5 ppt_5               84     75.1    46    69.2    55.4   14.8   19.7    291.  \n 6 ppt_6               58     53.5    41    69.2    55.4  -11.2   -1.90    21.4 \n 7 ppt_7               52     48.5    86    69.2    55.4  -17.2   -6.94   120.  \n 8 ppt_8               76     67.1    58    69.2    55.4    6.75  11.7     79.0 \n 9 ppt_9               41     40.4    59    69.2    55.4  -28.2  -15.0    424.  \n10 ppt_10              67     46.8    22    69.2    55.4   -2.25  -8.62    19.4 \n11 ppt_11              60     50.6    62    69.2    55.4   -9.25  -4.78    44.2 \n12 ppt_12              67     28.7    40    69.2    55.4   -2.25 -26.7     60.1 \n13 ppt_13              76     69.0    47    69.2    55.4    6.75  13.5     91.4 \n14 ppt_14              93     67.9    51    69.2    55.4   23.8   12.5    297.  \n15 ppt_15              71     54.5    34    69.2    55.4    1.75  -0.940   -1.65\n16 ppt_16              71     64.6    37    69.2    55.4    1.75   9.22    16.1 \n17 ppt_17              99     66.3    37    69.2    55.4   29.8   10.9    324.  \n18 ppt_18              66     49.0    51    69.2    55.4   -3.25  -6.46    21.0 \n19 ppt_19              77     58.5    41    69.2    55.4    7.75   3.06    23.7 \n20 ppt_20              58     51.4    57    69.2    55.4  -11.2   -3.98    44.8 \n# … with abbreviated variable names ¹​recall_confidence, ²​maccuracy,\n#   ³​mconfidence, ⁴​acc_minus_mean_acc, ⁵​conf_minus_mean_conf, ⁶​prod_acc_conf\n\n\n\nFinally, sum the products, and divide by \\(n-1\\)\n\n\nrecalldata %>%\n  summarise(\n    prod_sum = sum(prod_acc_conf),\n    n = n()\n  )\n\n# A tibble: 1 × 2\n  prod_sum     n\n     <dbl> <int>\n1    2243.    20\n\n2243.46 / (20-1)\n\n[1] 118.0768\n\n\nWhich is the same result as using cov():\n\ncov(x = recalldata$recall_accuracy, y = recalldata$recall_confidence)\n\n[1] 118.0768\n\n\n\n\n\n\n\nCorrelation\nYou can think of correlation as a standardised covariance. It has a scale from negative one to one, on which the distance from zero indicates the strength of the relationship.\nJust like covariance, positive/negative values reflect the nature of the relationship.\nThe correlation coefficient is a standardised number which quantifies the strength and direction of the linear relationship between two variables. In a population it is denoted by \\(\\rho\\), and in a sample it is denoted by \\(r\\).\nWe can calculate \\(r\\) using the following formula:\n\\[\nr_{(x,y)}=\\frac{\\mathrm{cov}(x,y)}{s_xs_y}\n\\]\nWe can actually rearrange this formula to show that the correlation is simply the covariance, but with the values \\((x_i - \\bar{x})\\) divided by the standard deviation (\\(s_x\\)), and the values \\((y_i - \\bar{y})\\) divided by \\(s_y\\):\n\\[\nr_{(x,y)}=\\frac{1}{n-1} \\sum_{i=1}^n \\left( \\frac{x_{i}-\\bar{x}}{s_x} \\right) \\left( \\frac{y_{i}-\\bar{y}}{s_y} \\right)\n\\]\n The correlation is the simply the covariance of standardised variables (variables expressed as the distance in standard deviations from the mean).\n\nProperties of correlation coefficients\n\n\\(-1 \\leq r \\leq 1\\)\nThe sign indicates the direction of association\n\npositive association (\\(r > 0\\)) means that values of one variable tend to be higher when values of the other variable are higher\nnegative association (\\(r < 0\\)) means that values of one variable tend to be lower when values of the other variable are higher\nno linear association (\\(r \\approx 0\\)) means that higher/lower values of one variable do not tend to occur with higher/lower values of the other variable\n\nThe closer \\(r\\) is to \\(\\pm 1\\), the stronger the linear association\n\\(r\\) has no units and does not depend on the units of measurement\nThe correlation between \\(x\\) and \\(y\\) is the same as the correlation between \\(y\\) and \\(x\\)\n\n\n\nCorrelation in R\nJust like R has a cov() function for calculating covariance, there is a cor() function for calculating correlation:\n\ncor(x = recalldata$recall_accuracy, y = recalldata$recall_confidence)\n\n[1] 0.6993654\n\n\nIf necessary, we can choose to remove NAs using na.rm = TRUE inside the cor() function.\n\n\n Optional: Manually calculating correlation\n\n\nWe calculated above that \\(\\text{cov}(\\text{recall-accuracy}, \\text{recall-confidence})\\) = 118.077.\nTo calculate the correlation, we can simply divide this by the standard deviations of the two variables \\(s_{\\text{recall-accuracy}} \\times s_{\\text{recall-confidence}}\\)\n\nrecalldata %>% summarise(\n  s_ra = sd(recall_accuracy),\n  s_rc = sd(recall_confidence)\n)\n\n# A tibble: 1 × 2\n   s_ra  s_rc\n  <dbl> <dbl>\n1  14.5  11.6\n\n118.08 / (14.527 * 11.622)\n\n[1] 0.6993902\n\n\nWhich is the same result as using cor():\n\ncor(x = recalldata$recall_accuracy, y = recalldata$recall_confidence)\n\n[1] 0.6993654\n\n\n\n\n\n\n\n\n\n\nCorrelation Test\nNow that we’ve seen the formulae for covariance and correlation, as well as how to quickly calculate them in R using cov() and cor(), we can use a statistical test to establish the probability of finding an association this strong by chance alone.\n\nHypotheses\nThe hypotheses of the correlation test are, as always, statements about the population parameter (in this case the correlation between the two variables in the population - i.e., \\(\\rho\\)).\nHypotheses:\nIf we are conducting a two tailed test, then\n\n\\(H_0: \\rho = 0\\). There is not a linear relationship between \\(x\\) and \\(y\\) in the population.\n\n\\(H_1: \\rho \\neq 0\\) There is a linear relationship between \\(x\\) and \\(y\\).\n\nIf we instead conduct a one-tailed test, then we are testing either\n\n\\(H_0: \\rho \\leq 0\\) There is a negative or no linear relationship between \\(x\\) and \\(y\\)\nvs\n\\(H_1: \\rho > 0\\) There is a positive linear relationship between \\(x\\) and \\(y\\).\n\\(H_0: \\rho \\geq 0\\) There is a positive or no linear relationship between \\(x\\) and \\(y\\)\nvs\n\\(H_1: \\rho < 0\\) There is a negative linear relationship between \\(x\\) and \\(y\\).\n\nTest Statistic\nThe test statistic for this test here is another \\(t\\) statistic, the formula for which depends on both the observed correlation (\\(r\\)) and the sample size (\\(n\\)):\n\\[t = r \\sqrt{\\frac{n-2}{1-r^2}}\\]\np-value\nWe calculate the p-value for our \\(t\\)-statistic as the long-run probability of a \\(t\\)-statistic with \\(n-2\\) degrees of freedom being less than, greater than, or more extreme in either direction (depending on the direction of our alternative hypothesis) than our observed \\(t\\)-statistic.\nAssumptions\nFor a test of Pearson’s correlation coefficient \\(r\\), we need to make sure a few conditions are met:\n\nBoth variables are quantitative\nBoth variables should be drawn from normally distributed populations.\nThe relationship between the two variables should be linear.\n\n\nIn R\nWe can test the significance of the correlation coefficient really easily with the function cor.test():\n\ncor.test(recalldata$recall_accuracy, recalldata$recall_confidence)\n\n\n    Pearson's product-moment correlation\n\ndata:  recalldata$recall_accuracy and recalldata$recall_confidence\nt = 4.1512, df = 18, p-value = 0.0005998\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.3719603 0.8720125\nsample estimates:\n      cor \n0.6993654 \n\n\nby default, cor.test() will include only observations that have no missing data on either variable.\ne.g., running cor.test() on x and y in the dataframe below will include only the yellow rows:\n\n\n\n\n \n  \n    x \n    y \n  \n \n\n  \n    1 \n    NA \n  \n  \n    2 \n    6 \n  \n  \n    NA \n    8 \n  \n  \n    4 \n    7 \n  \n  \n    5 \n    9 \n  \n\n\n\n\n\n\n\n Optional: Manually conducting the correlation test\n\n\nOr, if we want to calculate our test statistic manually:\n\n#calculate r\nr = cor(recalldata$recall_accuracy, recalldata$recall_confidence)\n\n#get n\nn = nrow(recalldata)\n\n#calculate t    \ntstat = r * sqrt((n - 2) / (1 - r^2))\n\n#calculate p-value for t, with df = n-2 \n2*(1-pt(tstat, df=n-2))\n\n[1] 0.0005998222\n\n\n\n\n\n\n\n\n\n\n\nCautions!\nCorrelation is an invaluable tool for quantifying relationships between variables, but must be used with care.\nBelow are a few things to be aware of when we talk about correlation.\n\nCorrelation can be heavily affected by outliers. Always plot your data!\nThe two plots below only differ with respect to the inclusion of one observation. However, the correlation coefficient for the two sets of observations is markedly different.\n\n\n\n\n\n\n\n\n\n\n\nr = 0 means no linear association. The variables could still be otherwise associated. Always plot your data!\nThe correlation coefficient in Figure 1 below is negligible, suggesting no linear association. The word “linear” here is crucial - the data are very clearly related.\n\n\n\n\n\nFigure 1: Unrelated data?\n\n\n\n\nSimilarly, take look at all the sets of data in Figure 2 below. The summary statistics (means and standard deviations of each variable, and the correlation) are almost identical, but the visualisations suggest that the data are very different from one another.\n\n\n\n\n\nFigure 2: Datasaurus! From Matejka, J., & Fitzmaurice, G. (2017, May): Same stats, different graphs: generating datasets with varied appearance and identical statistics through simulated annealing.\n\n\n\n\n\n\nCorrelation does not imply causation!\n\n\n\n\n\nFigure 3: https://twitter.com/quantitudepod/status/1309135514839248896\n\n\n\n\nYou will have likely heard the phrase “correlation does not imply causation”. There is even a whole wikipedia entry devoted to the topic.\nJust because you observe an association between x and y, we should not deduce that x causes y\nAn often cited paper which appears to fall foul of this error took a correlation between a country’s chocolate consumption and its number of nobel prize winners (see Figure 4) to suggest a causal relationship between the two (“chocolate intake provides the abundant fertile ground needed for the sprouting of Nobel laureates”):\n\n\n\n\n\nFigure 4: Chocolate consumption causes more Nobel Laureates?"
  },
  {
    "objectID": "06_wt.html",
    "href": "06_wt.html",
    "title": "WalkThrough: Advanced Data Wrangling",
    "section": "",
    "text": "For this reason, we’re going to take a little detour away from statistics to get some more practice wrangling and cleaning data in R. Don’t worry about the trying to remember all of the new R functions introduced in this topic - there are a lot. Use them as a means of learning about some of the different ways of doing things in R.\n\nStudy Background & Data\nThe data we’re going to look at now is from an experiment on language comprehension, looking at whether people perceive blinking as a sign of lying.\n\nResearch Question: Is the rate of blinking during speech interpreted as a sign of dishonesty (in the context of a lie-detection game)?\n\nParticipants were informed that they were going to take part in a lie-detection game. They were presented with audiovisual recordings of a speaker stating behind which of two objects (displayed on screen) there was hidden treasure. Utterances took the form of “The treasure is behind the [target name]”.\nOver 20 trials, participants were tasked with using the mouse to click on the object they believed the treasure to be behind. They were told that the speaker in the video was attempting to mislead them, meaning that sometimes they told the truth, and sometimes they lied. Crucially, in the videos presented of the speaker producing the utterances, we manipulated the number of times the speaker blinked (from 1 to 10 times). Participants eyes were tracked for the duration of the experiment, with the time spent looking at either object taken as an implicit indication of perceiving a truthful utterance (in which the participant looks at and clicks on the ‘target object’ (the one identified by the speaker as hiding the treasure)) or a dishonest one (in which the participant would look at and click on the alternative ‘distractor’ object).\n\nblink_setup.csv\n\nThe data from the experimental design are available at https://uoepsy.github.io/data/blink_setup.csv. In this data, each participant is a row, and the information about what video is presented in each trial are presented in separate columns for each trial. The first bit of the data looks like this:\n\n\n\n\n\n\n\n\n\n\n\n\n1\nsubject_1\n/files/vids/blinks_1.mp4\n/files/vids/blinsk_8.mp4\n…\n\n\n2\nsubject_2\n/files/vids/blinks_2.mp4\n/files/vids/blinks_4.mp4\n…\n\n\n3\nsubject_3\n/files/vids/blinks_4.mp4\n/files/vids/blinks_5.mp4\n…\n\n\n4\nsubject_4\n/files/vids/blinks_4.mp4\n/files/vids/blinks_7.mp4\n…\n\n\n5\nsubject_5\n/files/vids/blinks_1.mp4\n/files/vids/blinks_4.mp4\n…\n\n\n6\nsubject_6\n/files/vids/blinks_2.mp4\n/files/vids/blinks_3.mp4\n…\n\n\n…\n…\n…\n…\n…\n\n\n…\n…\n…\n…\n…\n\n\n\n\n\n\nblink_eyegaze.xlsx\n\nThe data from the eye-tracker, which has been processed to show the proportion of time spent looking at the distractor object in each trial, can be found at https://uoepsy.github.io/data/blink_eyegaze.xlsx. In contrast to the blink_setup.csv data, in this data each trial is a row, so we have 20 rows per participant.\n\n\n\n\n\n\n\n\n\nvariable_names\ndescription\n\n\n\n\nsub\nParticipant number\n\n\ntrial_no\nTrial number\n\n\ndistractor_fix\nTime spent looking at distractor object (measured in milliseconds from onset of noun phrase)\n\n\nrt\nTime taken to click on an object (measured in milliseconds from the onset of the noun phrase\n\n\n\n\n\nThe top of the data looks like this:\n\n\n\n\n\nsub\ntrial_no\ndistractor_fix\nrt\n\n\n\n\n1\n1\n503.990657311976\n2812\n\n\n1\n2\n2810.1367654\n2974\n\n\n1\n3\n706.739099152984\n2257\n\n\n1\n4\nNA\nNA\n\n\n1\n5\n223.327680772201\n4546\n\n\n1\n6\nNA\nNA\n\n\n…\n…\n…\n…\n\n\n…\n…\n…\n…\n\n\n\n\n\n\n\nDifferent Data Formats\nData can come in lots of different formats, meaning that we need lots of different ways to read data into R. Below is some information on some of the more common functions for reading and writing different types of data.\nText based files\n\n\n\n\n\n\n\n\n\nfiletype\ndescription\nreading\nwriting\n\n\n\n\n.csv\ncomma separated values\ntidyverse - read_csv()read.csv()read.table(..., sep = \",\")\ntidyverse - write_csv()write.csv()write.table(..., sep=\",\")\n\n\n.tsv\ntab separated values\ntidyverse - read_tsv()read.table(..., sep = \"\\t\")\ntidyverse - write_tsv()write.table(..., sep = \"\\t\")\n\n\n.txt\nanything-separated values!\nread.table(..., sep = ...)\nwrite.table(..., sep = ...)\n\n\n\nR files\n\n\n\n\n\n\n\n\n\nfiletype\ndescription\nreading\nwriting\n\n\n\n\n.RDS\n1 file = a single R object\nreadRDS()\nsaveRDS()\n\n\n.RData\n1 file = a collection of R objects\nload()\nsave()save.image() - to save all objects in the environment)\n\n\n\nExcel files\nThe package readxl provides a variety of functions for reading in different types of Microsoft Excel spreadsheet, such as read_excel(), read_xls(), read_xlsx().\nOther software\nThe package haven provides functions for files which have been saved from other statistical software, for instance with read_spss()/read_sav() and read_sas() for files from SPSS and SAS.\nGoogle sheets\nThe googlesheets4 package can read in data directly from a spreadsheet stored on google drive. You simply find the id of the sheet (it’s the big long string of numbers & letters in the url of your google sheet), and pass it to read_sheet().\nIt will prompt you to authenticate your account via your browser, but it’s really easy!\n\n\n\n\nRead in the two data-sets. Take care to look at the file extension (e.g., .csv, .tsv, .xlsx) as indicators of what function to try.\nMake sure you assign them identifiable names.\nOnce you’ve loaded the data-set, take a look at them using functions like summary(), str(), dim()/nrow(), or viewing them by clicking on them in the environment.\n\nHints:\n\nSome functions like read_excel() don’t allow you to download directly from a url, like we have been doing with .csv files.\n\nSolution 1:\n\nDownload the data to your computer\nupload to the rstudio server if you are using it\nDirect the function to read it from the place you stored it.\n\nSolution 2:\n\nMake R download the data directly to somewhere in your working directory (see download.file()).\n\n\nDo both the data-sets have column names? By default R will assume the first row is the name of the column. Look in the help documentation to see how to stop this from happening.\n\n\n\n\n\n\n Solution \n\n\n\nlibrary(tidyverse)\nlibrary(readxl)\n\ndownload.file('https://uoepsy.github.io/data/blink_eyegaze.xlsx', 'data/blink_eyegaze.xlsx', mode=\"wb\")\neyedata <- read_excel(path = 'data/blink_eyegaze.xlsx')\n\nsetupdata <- read_csv(\"https://uoepsy.github.io/data/blink_setup.csv\", col_names = FALSE)\n\n\n\n\n\n\nRenaming Columns\nYou can access the column names from a data-set using names() or colnames().\n\nnames(data)\ncolnames(data)\n\nAnd we can easily rename these using indexing:\n\n#name the third column \"peppapig\"\nnames(data)[3]<-\"peppapig\"\n\nOr in tidyverse, using rename():\n\ndata %>%\n  rename(newname = currentname)\n\n\n\n\n\nProblem\nThe blink_setup.csv file doesn’t have any column names!\nWe know that there are 20 trials for each participant, and we can see that the 2nd column has information about which subject it is.\nColumns 3:22 are trials 1 to 20.\n\nhead(setupdata)\n\n\n\n   X1        X2                       X3 ...\n1   1 subject_1 /files/vids/blinks_1.mp4 ...\n2   2 subject_2 /files/vids/blinks_2.mp4 ...\n3   3 subject_3 /files/vids/blinks_4.mp4 ...\n4   4 subject_4 /files/vids/blinks_4.mp4 ...\n5   5 subject_5 /files/vids/blinks_1.mp4 ...\n6   6 subject_6 /files/vids/blinks_2.mp4 ...\n7 ...       ...                      ... ...\n8 ...       ...                      ... ...\n\n\nTask\n\nRemove the first column\nRename columns 2 to 22 with sensible names.\n\n\nHints:\n\nnames(setupdata) # what are the names\nnames(setupdata)[2] # what is the 2nd name\nnames(setupdata) <- c(\"...\", \"...\", \"...\",..) # set the names\n\n\nc(\"kermit\", paste(\"peppapig\", 1:3, sep=\"_\"))\n\n[1] \"kermit\"     \"peppapig_1\" \"peppapig_2\" \"peppapig_3\"\n\n\n\n\n\n\n\n Solution \n\n\nremove the first column\n\nsetupdata <- setupdata[,-1]\n\nSet the names\n\nnames(setupdata) <- c(\"sub\",paste(\"trial\", 1:20, sep = \"_\"))\n\nCheck:\n\nhead(setupdata)\n\n\n\n        sub                  trial_1 ...\n1 subject_1 /files/vids/blinks_1.mp4 ...\n2 subject_2 /files/vids/blinks_2.mp4 ...\n3 subject_3 /files/vids/blinks_4.mp4 ...\n4 subject_4 /files/vids/blinks_4.mp4 ...\n5 subject_5 /files/vids/blinks_1.mp4 ...\n6 subject_6 /files/vids/blinks_2.mp4 ...\n7       ...                      ... ...\n8       ...                      ... ...\n\n\n\n\n\n\n\nReshaping data\nPivot!\nOne of the more confusing things to get to grips with is the idea of reshaping a dataframe.\nFor different reasons, you might sometimes want to have data in wide, or in long format.\n\n\n\n\n\nSource: https://fromthebottomoftheheap.net/2019/10/25/pivoting-tidily/\n\n\n\n\nWhen the data is wide, we can make it long using pivot_longer(). When we make data longer, we’re essentially making lots of columns into 2 longer columns. Above, in the animation, the wide variable x, y and z go into a new longer column called name that specifies which (x/y/z) it came from, and the values get put into the val column.\nThe animation takes a shortcut in the code it displays above, but you could also use pivot_longer(c(x,y,z), names_to = \"name\", values_to = \"val\"). To reverse this, and put it back to being wide, we tell R which columns to take the names and values from: pivot_wider(names_from = name, values_from = val).\n\n\n\n\nProblem\nThe blink_setup.csv file has the data in a different shape to the blink_eyegaze.xlsx file.\n\nblink_setup.csv : one row per participant\n\nblink_eyegaze.xlsx : one row per trial\n\nTask\nReshape the data to make it so that there is one row per trial.\n\nHint\n\nin the tidyverse functions, you can specify all columns between column x and column z by using the colon, x:z.\n\n\n\n\n\n\n Solution \n\n\n(Note that this will depend on what you called your columns in the previous question - we just called them “trial_1”, … , “trial_20”).\n\nsetuplong <- \n  setupdata %>%\n  pivot_longer(trial_1:trial_20, names_to = \"trial_number\", values_to = \"video\")\n\nsetuplong\n\n# A tibble: 460 × 3\n   sub       trial_number video                    \n   <chr>     <chr>        <chr>                    \n 1 subject_1 trial_1      /files/vids/blinks_1.mp4 \n 2 subject_1 trial_2      /files/vids/blinsk_8.mp4 \n 3 subject_1 trial_3      /files/vids/blinks_1.mp4 \n 4 subject_1 trial_4      /files/vids/blinks_5.mp4 \n 5 subject_1 trial_5      /files/vids/blinks_4.mp4 \n 6 subject_1 trial_6      /files/vids/blinks_10.mp4\n 7 subject_1 trial_7      /files/vids/blinks_1.mp4 \n 8 subject_1 trial_8      /files/vids/blinks_5.mp4 \n 9 subject_1 trial_9      /files/vids/blinks_6.mp4 \n10 subject_1 trial_10     /files/vids/blinks_4.mp4 \n# … with 450 more rows\n\n\n\n\n\n\n\nDealing with character strings\nThere are loads of functions we can use to do various things with character strings in R.\nHere are a few examples:\n\n gsub()\n\n\nsubstitute a string of characters for another string:\n\ngsub(\"don't like\",\"love\", \"i really really really don't like statistics!\")\n\n[1] \"i really really really love statistics!\"\n\n\n\n\n\n\n separate()\n\n\nseparate a column into multiple columns by splitting at a set of characters\n\nmupsimp <- read_csv(\"https://uoepsy.github.io/data/muppet_simp.csv\")\nmupsimp\n\n# A tibble: 18 × 1\n   show_name                     \n   <chr>                         \n 1 simpsons_Marge Simpson        \n 2 muppets_Scooter               \n 3 muppets_Rowlf the Dog         \n 4 muppets_Fozzie Bear           \n 5 simpsons_Abraham Simpson      \n 6 muppets_Walter                \n 7 muppets_Pepe the King Prawn   \n 8 muppets_Gonzo                 \n 9 simpsons_Santa's Little Helper\n10 simpsons_Snowball II/V        \n11 simpsons_Maggie Simpson       \n12 simpsons_Lisa Simpson         \n13 simpsons_Bart Simpson         \n14 muppets_Animal                \n15 simpsons_Homer Simpson        \n16 muppets_Miss Piggy            \n17 muppets_Rizzo the Rat         \n18 muppets_Kermit the Frog       \n\nmupsimp %>% \n  separate(show_name, into = c(\"show\",\"name\"), sep = \"_\")\n\n# A tibble: 18 × 2\n   show     name                 \n   <chr>    <chr>                \n 1 simpsons Marge Simpson        \n 2 muppets  Scooter              \n 3 muppets  Rowlf the Dog        \n 4 muppets  Fozzie Bear          \n 5 simpsons Abraham Simpson      \n 6 muppets  Walter               \n 7 muppets  Pepe the King Prawn  \n 8 muppets  Gonzo                \n 9 simpsons Santa's Little Helper\n10 simpsons Snowball II/V        \n11 simpsons Maggie Simpson       \n12 simpsons Lisa Simpson         \n13 simpsons Bart Simpson         \n14 muppets  Animal               \n15 simpsons Homer Simpson        \n16 muppets  Miss Piggy           \n17 muppets  Rizzo the Rat        \n18 muppets  Kermit the Frog      \n\n\n\n\n\n\n substr()\n\n\nExtract or replace substrings in a character vector.\n\n# get the first 3 letters\nsubstr(mupsimp$show_name, 1, 3)\n\n [1] \"sim\" \"mup\" \"mup\" \"mup\" \"sim\" \"mup\" \"mup\" \"mup\" \"sim\" \"sim\" \"sim\" \"sim\"\n[13] \"sim\" \"mup\" \"sim\" \"mup\" \"mup\" \"mup\"\n\n\nCan be combined with functions like nchar() (to find the number of characters in each string). Additionally, can be used in tidyverse easily:\n\nmupsimp %>%\n  mutate(\n    first3 = substr(show_name, 1, 3),\n    last3 = substr(show_name, nchar(show_name)-2, nchar(show_name))\n  )\n\n# A tibble: 18 × 3\n   show_name                      first3 last3\n   <chr>                          <chr>  <chr>\n 1 simpsons_Marge Simpson         sim    son  \n 2 muppets_Scooter                mup    ter  \n 3 muppets_Rowlf the Dog          mup    Dog  \n 4 muppets_Fozzie Bear            mup    ear  \n 5 simpsons_Abraham Simpson       sim    son  \n 6 muppets_Walter                 mup    ter  \n 7 muppets_Pepe the King Prawn    mup    awn  \n 8 muppets_Gonzo                  mup    nzo  \n 9 simpsons_Santa's Little Helper sim    per  \n10 simpsons_Snowball II/V         sim    I/V  \n11 simpsons_Maggie Simpson        sim    son  \n12 simpsons_Lisa Simpson          sim    son  \n13 simpsons_Bart Simpson          sim    son  \n14 muppets_Animal                 mup    mal  \n15 simpsons_Homer Simpson         sim    son  \n16 muppets_Miss Piggy             mup    ggy  \n17 muppets_Rizzo the Rat          mup    Rat  \n18 muppets_Kermit the Frog        mup    rog  \n\n\n\n\n\n\n paste()\n\n\npaste() can quickly combine two character vectors:\n\npaste(\"hello\",\"everyone\",sep=\" \")\n\n[1] \"hello everyone\"\n\n\nYou can also use it to collapse a vector into a single string:\n\npaste(mupsimp$show_name, collapse=\" \")\n\n[1] \"simpsons_Marge Simpson muppets_Scooter muppets_Rowlf the Dog muppets_Fozzie Bear simpsons_Abraham Simpson muppets_Walter muppets_Pepe the King Prawn muppets_Gonzo simpsons_Santa's Little Helper simpsons_Snowball II/V simpsons_Maggie Simpson simpsons_Lisa Simpson simpsons_Bart Simpson muppets_Animal simpsons_Homer Simpson muppets_Miss Piggy muppets_Rizzo the Rat muppets_Kermit the Frog\"\n\n\nand paste0() is a quick shortcut for using sep=\"\":\n\npaste0(\"hello\",\"everyone\")\n\n[1] \"helloeveryone\"\n\n\n\n\n\n\n\n\n\nProblem\nIf you look at what data was captured by the software to indicate which video was used in each trial, there is a lot of unnecessary data there. The number of the filename indicates how many blinks are in the video. This is the only bit of information we want.\n\nhead(setuplong$video)\n\n[1] \"/files/vids/blinks_1.mp4\"  \"/files/vids/blinsk_8.mp4\" \n[3] \"/files/vids/blinks_1.mp4\"  \"/files/vids/blinks_5.mp4\" \n[5] \"/files/vids/blinks_4.mp4\"  \"/files/vids/blinks_10.mp4\"\n\n\nTask\n\nIn your (now reshaped to long) blink_setup.csv data, make a new, or edit an existing column, which is a numeric variable containing the number of blinks presented in the video in each trial\n\n\nHints:\n\nthere are lots of different ways you could do this.\n\nyou can substitute out multiple different strings by separating them with the | symbol:\n\n\n  gsub(\"dog|cat\", \"horse\", \"I have a dog and a cat and the dogs name is Graham\")\n\n[1] \"I have a horse and a horse and the horses name is Graham\"\n\n\n\n\n\n\n\n Solution \n\n\n\nsetuplong <- setuplong %>%\n  mutate(\n    nr_blinks = as.numeric(gsub(\"/files/vids/|blinks_|blinsk_|.mp4\",\"\",video))\n  )\n\nsetuplong\n\n# A tibble: 460 × 4\n   sub       trial_number video                     nr_blinks\n   <chr>     <chr>        <chr>                         <dbl>\n 1 subject_1 trial_1      /files/vids/blinks_1.mp4          1\n 2 subject_1 trial_2      /files/vids/blinsk_8.mp4          8\n 3 subject_1 trial_3      /files/vids/blinks_1.mp4          1\n 4 subject_1 trial_4      /files/vids/blinks_5.mp4          5\n 5 subject_1 trial_5      /files/vids/blinks_4.mp4          4\n 6 subject_1 trial_6      /files/vids/blinks_10.mp4        10\n 7 subject_1 trial_7      /files/vids/blinks_1.mp4          1\n 8 subject_1 trial_8      /files/vids/blinks_5.mp4          5\n 9 subject_1 trial_9      /files/vids/blinks_6.mp4          6\n10 subject_1 trial_10     /files/vids/blinks_4.mp4          4\n# … with 450 more rows\n\n\n\n\n\n\n\nJoining/merging\nNow comes a fun bit.\nRecall that the research question is interested in the relationship between the number of times the speaker was seen to blink, and the time the participants spent looking at the distractor object (indicating perceived dishonesty).\nYou may have noticed that these variables are currently in different data-sets! The blink_setup.csv contains information about the numbers of blinks in the videos, and the blink_eyegaze.xlsx contains the data on the fixations.\nSolution: we need to join them together!\nNote that because both data-sets contain information on participant number and trial number, which uniquely identifies each observation, we can join them together matching on these variables!\nThere are lots of different ways to join data-sets, depending on whether we want to keep rows from one data-set or the other, or keep only those in both data-sets etc.\n\n\n\n\n\nCheck out the help documentation for them all using ?full_join.\n\n\n\n\n\n\n\n\nProblem\nVariables are in different data-sets.\nTask\n\nJoin the two data-sets (the reshaped-to-long blink_setup.csv data, and the blink_eyegaze.xlsx data) together, and store the joined data in a new object (you can use your own name, but the solutions will use the name blinks_full).\n\n\nHints:\nWe want to match the observations based on two columns which are present in each data-set, indicating which participant, and which trial.\n\nRemember that R doesn’t have your intelligence - it doesn’t know that in one data-set the variable is called e.g., trial_no and in the other it is called trial_number.\n\nAnother thing which R doesn’t know is that “subject_1” in setup data is the same participant as “1” in the eye gaze data. It needs to match the same symbols, and what is more, it needs the variables to be the same type (character, numeric, factor etc).\n\nyou might want to make use of the skills you learned for manipulating character strings.\n\n\n\n\n\n\n\n Solution \n\n\nIn this solution, let’s build up a sequence step by step. Work through the steps, adding lines of code each time. Between each step, run the code to quickly see what the output looks like at each step.\n\nFirst, let’s see how we can remove the “subject_” from “subject_1” etc..\n\n\nsetuplong %>%\n  mutate(\n    sub = gsub(\"subject_\",\"\",sub)\n  )\n\n\nBut we also want it to be numeric, to match the sub variable in the eyegaze data, so let’s edit it to:\n\n\nsetuplong %>%\n  mutate(\n    sub = as.numeric(gsub(\"subject_\",\"\",sub))\n  )\n\n\nWe’ll also need to do the same for the trial_number variable, so let’s add that line too:\n\n\nsetuplong %>%\n  mutate(\n    sub = as.numeric(gsub(\"subject_\",\"\",sub)),\n    trial_number = as.numeric(gsub(\"trial_\",\"\",trial_number))\n  )\n\n\nAnd then, we’ll note that we need to have the same name for variables indicating trial number in both data-sets, so lets rename it:\n\n\nsetuplong %>%\n  mutate(\n    sub = as.numeric(gsub(\"subject_\",\"\",sub)),\n    trial_number = as.numeric(gsub(\"trial_\",\"\",trial_number))\n  ) %>%\n  rename(trial_no = trial_number)\n\n\nAnd now… add the join!\n\n\nsetuplong %>%\n  mutate(\n    sub = as.numeric(gsub(\"subject_\",\"\",sub)),\n    trial_number = as.numeric(gsub(\"trial_\",\"\",trial_number))\n  ) %>%\n  rename(trial_no = trial_number) %>%\n  full_join(x = ., y = eyedata)\n\nNOTE the solution has x = ., y = eyedata to make it clear that we are ‘piping in’ (using %>%) the thing coming out of the previous lines of code, and putting it where the . is. .... %>% full_join(eyedata) would do the same.\nWe use full_join here because we want to keep all the data, but left_join would do the same. right_join would be slightly different, because there are 3 observations in the setup data (when reshaped to long, n = 460) which aren’t in the eye gaze data (n = 457). You can see which ones they are by using anti_join.\n6. Finally - we need to give the whole output a name to store it in our environment!\n\nblinks_full <- \n  setuplong %>%\n  mutate(\n    sub = as.numeric(gsub(\"subject_\",\"\",sub)),\n    trial_number = as.numeric(gsub(\"trial_\",\"\",trial_number))\n  ) %>%\n  rename(trial_no = trial_number) %>%\n  full_join(x = ., y = eyedata)\n\n\n\n\n\n\nImpossible Values\nIt’s important to check that there are no values in the data which are impossible, given what you know about how the data was measured. This is where exploratory plots and descriptive statistics come in handy.\n\nhist(as.numeric(blinks_full$distractor_fix))\n\n\n\n\n\n\n\n\nIn some trials, participants spent less that 0ms fixating on the distractor object!?!?!?\nWe have a couple of options as to how to deal with them.\n\nDelete the entire row\nChange the specific entry/s in that variable to be NA (Not Applicable) - this has the benefit of keeping the rows should we consider those row to have a valid observation in other variables (for instance the rt - reaction time?)\n\nSome of the tools we learned in the Reading 1B will come in handy here.\n\n\n\n\nProblem\nSome impossible values in the distractor_fix variable.\nTask\n- Assign the entries of the distractor_fix variable which are < 0 to be NA.\n- Are there any other impossible values (or combinations of values) in the data?\n\nHints:\n\nWhile you’re there, why not convert any variables to the right type (numeric, factor, etc).\n\nWe might not have come across this before, but there is a really useful function called ifelse().\nPlay around with the below code to learn:\n\n\ntibble(x = 1:10) %>%\n  mutate(\n    new_variable = ifelse(x>5,1,0),\n    another_new_variable = ifelse(x>5,\"peppapig\",\"kermit\"),\n    morevariables = ifelse(another_new_variable == \"kermit\",\"kermit the frog\", another_new_variable)\n  )\n\n\n\n\n\n\n Solution \n\n\nBelow we’ve taken similar steps for both the distractor_fix and rt variables. Neither can be <0 or >5000.\nHowever, we know that the distractor_fix variable has no entries >5000 (because of the histogram above).\n\nblinks_full <- \n  blinks_full %>%\n  mutate(\n    distractor_fix = as.numeric(distractor_fix),\n    distractor_fix = ifelse(distractor_fix<0, NA, distractor_fix),\n    rt = ifelse(as.numeric(rt)>5000 | as.numeric(rt)<0, NA, as.numeric(rt))\n  )\n\nNote how two steps (making it numeric, and replacing values with NAs) are combined for the rt variable. Note also how we have specified that we replace with NAs entries which meet either on condition (>5000) or (using |) another (<0).\n\n\n\n\n\nMissing Data in R\nMissing data can be a big problem for statistics. For those of you thinking of taking Multivariate Statistics & Methodology in R next semester, you can look forward to discussions around this sort of issue.\nHere, however, we are simply going to discuss the practicalities of how to make R code work when some of your values are NAs.\nConsider:\n\nvec <- c(1,2,3,4,NA)\nmean(vec)\n\n[1] NA\n\n\nThink about why this is:\n\\[\n\\text{mean(vec)} = \\frac{1+2+3+4+\\text{NA}}{5} = \\frac{\\text{??}}{5} = \\text{??}\n\\]\nThere are numerous different ways that functions in R cope with missing values, but if you’re ever in doubt, try na.rm = TRUE. This will basically tell R to “remove the NAs before doing the calculation”.\n\nmean(vec, na.rm=T)\n\n[1] 2.5\n\n\nOther functions include na.omit(), which remove any row with has an NA anywhere in it:\n\ncomplete_data <- na.omit(data)\n\n\n\nOutliers\nOutliers are the extreme - but plausible - values in variables. There is no one way to identify what is extreme enough to consider and outlier, nor is there one way to handle them.\nSome outliers could be considered important observations which we would not want to exclude. However, being an outlier can (but not always) result in an observation exerting too great an influence on our analysis.\n\nSome common approaches to identifying outliers:\n\nobservations which are \\(> 3\\) (sometimes \\(> 2.5\\)) standard deviations away from the mean.\nobservations greater than \\(1.5 \\times IQR\\) below the first quartile \\(Q_1\\) or above the third quartile \\(Q_3\\).\n\nSome common approaches to handling outliers:\n\nExclude now - for instance, set as NA\n“Winsorize” - set to a specified percentile. For example, all observations below the 5th percentile set to the 5th percentile, and all observations above the 95th percentile set to the 95th percentile\nExclude from analysis later, based on measures of influence (we’ll learn about this in future topics)\n\n\n\n\n\n\nMake a bloxplot of the distractor_fix variable. Does it look like there might be any outliers?\n\n\n\n\n Solution \n\n\nThe last line of this is there just because I personally don’t like the default look of geom_boxplot where it is really wide, so this line changes the limits of the x-axis (and also removes the ticks).\n\nggplot(data = blinks_full, aes(y = distractor_fix)) +\n  geom_boxplot()+\n  scale_x_continuous(limits = c(-2,2), breaks = NULL)\n\n\n\n\n\n\n\n\nIt looks like there are possibly some outliers at the upper end of the distribution. One of them looks really quite anomalous!\n\n\n\n\n\nCustom Functions\n\n\n\n\nWriting your own function\nWe already saw some custom functions in the first week, where we made some called dice() and wdice().\nCan you write a function which, given a vector, returns TRUE if it is an outlier and FALSE if it is not, based on the criterion of being \\(>3\\) sd away from the mean.\n\noutliers <- function(obs){\n ...\n ...\n ...\n}\n\n\n\n\n\n Solution \n\n\n\n Working out the internal code\n\n\nLet’s do the calculation on a little vector, keeping it all outside of a function first:\n\n# a random vector (length = 20)\nvec <- rnorm(n = 20, mean = 0, sd = 1)\n# pick two random entries and make them outliers (one in each direction)\nvec[3] <- 150\nvec[16] <- -150\nvec\n\n [1]    0.03504199   -0.85948126  150.00000000   -0.41709518   -0.16518922\n [6]   -0.53958366    0.66794503    0.37178906   -1.61547016   -0.29967313\n[11]    0.57153864   -2.43270944    0.41337800    0.57773358   -1.58642491\n[16] -150.00000000    0.06456576   -1.86068772   -0.98163378   -0.97986823\n\n# deviations from each point to mean\nvec - mean(vec)\n\n [1]    0.48683322   -0.40769003  150.45179123    0.03469605    0.28660201\n [6]   -0.08779242    1.11973627    0.82358030   -1.16367893    0.15211810\n[11]    1.02332988   -1.98091821    0.86516923    1.02952481   -1.13463368\n[16] -149.54820877    0.51635699   -1.40889649   -0.52984255   -0.52807700\n\n# and three times the standard deviation\n3 * sd(vec)\n\n[1] 146.0238\n\n# but this won't work because some are below, rather than above the mean. \n(vec - mean(vec)) > (3 * sd(vec))\n\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n# instead we want the ABSOLUTE value \nabs(vec - mean(vec)) > (3 * sd(vec))\n\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\n\n\n\n\n\n Writing it as a function\n\n\nOkay, now that we’ve worked out the code, we want to make this a function. The template function in the question had an input called obs:\n\noutliers <- function(obs){\n\n}\n\nSo we would want to add our code to the function, but change it to use obs (which is whatever we give the function)\n\noutliers <- function(obs){\n  abs(obs - mean(obs)) > (3 * sd(obs))\n}\n\n\n\n\n\n Testing the function\n\n\nwe can test it on the vec object we created earlier.\n\noutliers(obs = vec)\n\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\n\nWe can use it to access and edit those entries:\n\nvec[outliers(vec)]\n\n[1]  150 -150\n\nvec[outliers(vec)] <- NA\n\n\n\n\n\n Extra - adding more arguments\n\n\nWe could edit the function so that we can also vary how many standard deviations away we are wanting to identify!\n\noutliers <- function(obs, x = 3){\n  abs(obs - mean(obs)) > (x * sd(obs))\n}\n\nthe x = 3 means that the function will default to looking 3 standard deviations away, but if we wanted to use outliers(obs = vec, x = 2) we could identify those which are 2 away!\n\n\n\n\n\n\n\n\n\n\nLook through the solutions to question B8 above, and make sure that you are comfortable with how writing a function works.\nCan you edit the outliers() function you wrote to make it work with vectors which include NAs?\n\n\n\n\n Solution \n\n\n\noutliers <- function(obs, x = 3){\n  abs(obs - mean(obs, na.rm=TRUE)) > (x * sd(obs, na.rm=TRUE))\n}\n\n\n\n\n\n\n\n\nProblem\nPossible outliers in the distractor_fix variable.\nTask\n\nReplace any values of the distractor_fix variable which are \\(>3\\) standard deviations from the mean with NA.\n\nMake a new boxplot of the variable\n\n\n If you skipped questions A8 and A9\n\n\nIf you skipped questions B8 and B9, then copy and run this code into your document. It will give you a function which takes a vector and returns TRUEs and FALSEs based on whether each entry is greater than 3 standard deviations from the mean.\n\noutliers <- function(obs, x = 3){\n  abs(obs - mean(obs, na.rm=TRUE)) > (x * sd(obs, na.rm=TRUE))\n}\n\n\n\n\n\n\n\n\n Solution \n\n\n\nblinks_full$distractor_fix[outliers(blinks_full$distractor_fix)]<- NA\n\nggplot(data = blinks_full, aes(y = distractor_fix)) +\n  geom_boxplot()+\n  scale_x_continuous(limits = c(-2,2), breaks = NULL)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary plots\nSo where are we now? We have a dataset that has one row per trial per subject, and it contains information on the number of blinks, and on the time spent looking at the distractor:\n\nhead(blinks_full)\n\n# A tibble: 6 × 6\n    sub trial_no video                     nr_blinks distractor_fix    rt\n  <dbl>    <dbl> <chr>                         <dbl>          <dbl> <dbl>\n1     1        1 /files/vids/blinks_1.mp4          1           504.  2812\n2     1        2 /files/vids/blinsk_8.mp4          8            NA   2974\n3     1        3 /files/vids/blinks_1.mp4          1           707.  2257\n4     1        4 /files/vids/blinks_5.mp4          5            NA     NA\n5     1        5 /files/vids/blinks_4.mp4          4           223.  4546\n6     1        6 /files/vids/blinks_10.mp4        10            NA     NA\n\n\nThinking way back to the top of this page, we recall that our research question is concerned with whether perceived lying (as implied by more looking at the distractor) increases with the number of blinks seen.\nYou might notice that we the observations in our dataset aren’t independent from one another - we have 20 datapoints for each subject. And if we split it by “number of blinks”, then we have roughly 45 datapoints for each value. Independence of observations is actually an assumption that is relied upon by all the tests that we cover in this course. So we can’t actually perform an analysis on this data as it is (we’ll learn how to deal with this sort of data structure next semester in the Multivariate Statistics course).\nHowever, it provides a useful example for us to try some plotting:\nthe stat_summary() function allows us to plot summarised data, rather than the data itself. If we choose to plot it as a “pointrange”, it gives us the mean and standard error for \\(y\\) across each level of \\(x\\):\n\nggplot(blinks_full, aes(x = nr_blinks, y = distractor_fix)) +\n  stat_summary(geom = \"pointrange\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Univariate Statistics and Methodology in R",
    "section": "",
    "text": "Univariate Statistics and Methodology in R (USMR) is a semester long crash-course aimed at providing Masters students in psychology with a competence in standard statistical methodologies and data analysis using R. Typically the analyses taught in this course are relevant for when there is just one source of variation - i.e. when we are interested in a single outcome measured across a set of independent observations. The first half of the course covers the fundamentals of statistical inference using a simulation-based approach, and introduces students to working with R & RStudio. The latter half of the course focuses on the general linear model, emphasising the fact that many statistical methods are simply special cases of this approach. This course introduces students to statistical modelling and empowers them with tools to analyse richer data and answer a broader set of research questions."
  }
]