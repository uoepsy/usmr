{
  "hash": "4146d10ac077c49edc15116a6321327a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercises: Intro R\"\nparams: \n    SHOW_SOLS: FALSE\n    TOGGLE: TRUE\n---\n\n\n\n\n\n\n# First things\n\nThe very first things to do are to open RStudio and get a blank script ready for writing your code!\n\n:::column-margin\nOur recommendation is that you have an R project for this course, and use a new script for each week of work. See [the tip about \"R projects\" in Section 1A](01a_R.html#the-four-rstudio-panes){target=\"_blank\"}.  \n:::\n\n# Pet Data\n\n:::frame\nWe're going to play with some data on a sample of licensed pets from the city of Seattle, USA. It can be downloaded (or read directly into R) from [https://uoepsy.github.io/data/pets_seattle.csv](https://uoepsy.github.io/data/pets_seattle.csv). It contains information on the license ID, year of issue, as well as the species, breeds and weights of each pet. You can find a data dictionary in @tbl-petdict  \n\n\n\n\n::: {#tbl-petdict .cell layout-align=\"center\" tbl-cap='Seattle Pets: Data dictionary'}\n::: {.cell-output-display}\n\n\n|Variable        |Description                      |\n|:---------------|:--------------------------------|\n|license_year    |Year in which license was issued |\n|license_number  |Unique license ID number         |\n|animals_name    |Full name of pet                 |\n|species         |Species of pet                   |\n|primary_breed   |Primary breed of pet             |\n|secondary_breed |Secondary breed of pet           |\n|weight_kg       |Weight in kilograms              |\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n\n<div class='question-begin'>Question 1</div><div class='question-body'>\n\n\nWrite a line of code that reads in the data to your R session. Then examine the dimensions of the dataset, and take a look at the first few lines.\n\n::: {.callout-tip collapse=\"true\"}\n#### Hints\nYou'll need the `read.csv()` function. Remember to assign it a name to store it in your environment.  \n[1B #basic-data-wrangling](01b_data.html#basic-data-wrangling){target=\"_blank\"} contains an example of reading in data from a URL. \nYou'll then want to play with functions like `dim()` and `head()`.  \n:::\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\n\nWe're going to call it `petdata` in our environment here. Don't forget the quotation marks around the url (otherwise R will look for an object in your environment called `https://...`, which isn't there). \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npetdata<-read.csv(\"https://uoepsy.github.io/data/pets_seattle.csv\")\ndim(petdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1956    7\n```\n\n\n:::\n:::\n\n\n\nWe can see there are 1956 rows and 7 columns.  \nAnd we can see the first few rows here:  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(petdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  license_year license_number  animals_name species         primary_breed\n1         2018      LNS150171        Norman     Dog                 Boxer\n2         2017        LN20666         Henry     Dog          Bichon Frise\n3         2018      LN8000658 Vega Williams     Dog                   Mix\n4         2018       LN730940         Molly     Dog   Australian Shepherd\n5         2016       LN964607         Gremy     Dog Chihuahua, Short Coat\n6         2018      LNS117115        Shadow     Dog   Retriever, Labrador\n  secondary_breed weight_kg\n1             Mix     29.15\n2        Havanese     23.70\n3         Unknown     21.13\n4             Mix     18.70\n5         Terrier     20.36\n6         Unknown     11.51\n```\n\n\n:::\n:::\n\n\n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n<div class='question-begin'>Question 2</div><div class='question-body'>\n\n\nWhat are the names of the 47th and the 200th animals in the dataset? (use R code to find out)   \n\n::: {.callout-tip collapse=\"true\"}\n#### Hints  \nYou'll probably want to make use of the square brackets `data[rows, columns]`.\n:::\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\nThere are lots of different ways to do this. \nWe can get out the entire rows, either individually:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npetdata[47,]\npetdata[200,]\n```\n:::\n\n\n\nOr together:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npetdata[c(47,200),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    license_year license_number animals_name species       primary_breed\n47          2018      LNS140233     Hooligan     Dog Retriever, Labrador\n200         2017       LN584186  Maple Syrup     Cat  Domestic Shorthair\n    secondary_breed weight_kg\n47          Unknown     12.27\n200         Unknown      4.66\n```\n\n\n:::\n:::\n\n\n\n\nOr we can extract the names only:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# These all do the same\npetdata[c(47,200),\"animals_name\"]\npetdata[c(47,200),3]\npetdata$animals_name[c(47,200)]\n```\n:::\n\n\n\nThe will all give us these names:  \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hooligan\"    \"Maple Syrup\"\n```\n\n\n:::\n:::\n\n\n\nIn the last one, we use the `$` to access the `animals_name` variable. In this case, we don't need to specify `[rows, columns]` inside the square brackets, because it's a single variable - there are no columns.  \n\n- `dataframe[rows, columns]`  \n- `variable[entries]`  \n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n\n<div class='question-begin'>Question 3</div><div class='question-body'>\n\n\nSubset the data to only the animals which are _dogs_, and store this subset as another named object in your environment.   \nDo the same for the _cats._ \n\n::: {.callout-tip collapse=\"true\"}\n#### Hints\nYou'll want to think about how we access data via asking for those entries that meet a specific _condition_ (see [1B #accessing-by-a-condition](01b_data.html#accessing-by-a-condition){target=\"_blank\"})  \n:::\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\n\nWe can ask \"which entries of species variable are equal to 'Dog'?\" by using `pet$species==\"Dog\"`.  \nThis will give us a TRUE for each dog, and a FALSE for each non-dog.   \nWe can then use this set of TRUEs and FALSEs to access those rows for which it is TRUE in our data:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndogdata <- petdata[petdata$species==\"Dog\", ]\ncatdata <- petdata[petdata$species==\"Cat\", ]\n```\n:::\n\n\n\n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n<div class='question-begin'>Question 4</div><div class='question-body'>\n\n\nFind the name and weight of the heaviest cat, and of the lightest dog.  \n\n::: {.callout-tip collapse=\"true\"}\n#### Hints\nYou could do this using the original data you read in from question 1, or use the subsets you created in question 3. You'll again want to supply a condition within square brackets `data[?==?]`. That condition may well have something to do with being equal to the `min()` or the `max()` of some variable.  \n:::\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\n\nWe can use `min()` and `max()` to return the minimum and maximum of a variable: \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmin(dogdata$weight_kg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.39\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(catdata$weight_kg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.48\n```\n\n\n:::\n:::\n\n\n\n\nWe could then ask for each entry \"is this cat's weight the maximum cat's weight?\" with `catdata$weight_kg == max(catdata$weight_kg)` and then use that condition to access the rows in our dataset where the `weight_kg` variable is at its maximum:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncatdata[catdata$weight_kg == max(catdata$weight_kg), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    license_year license_number animals_name species      primary_breed\n414         2018      LNS101014       Smokey     Cat Domestic Shorthair\n    secondary_breed weight_kg\n414             Mix      5.48\n```\n\n\n:::\n\n```{.r .cell-code}\ndogdata[dogdata$weight_kg == min(dogdata$weight_kg), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     license_year license_number animals_name species  primary_breed\n1126         2017      LNS139134       Claire     Dog Great Pyrenees\n     secondary_breed weight_kg\n1126         Unknown      0.39\n```\n\n\n:::\n:::\n\n\n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n<div class='question-begin'>Question 5</div><div class='question-body'>\n\n\nDoes the original dataset contain _only_ dogs and cats?  \n\n::: {.callout-tip collapse=\"true\"}\n#### Hints\nGiven what you did in question 3, you might be able to answer this by just looking at your environment.  \n:::\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\nIn the environment, we can see that the entire dataset has 1956 observations, the Dog's data frame has 1322, and the Cat's has 632.  \nSo there are 2 missing!  \n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n<div class='question-begin'>Question 6</div><div class='question-body'>\n\n\nExtract the entries of the original dataset for which the species is neither \"Dog\" nor \"Cat\"?  \nWhat are the names and species of these animals? \n\n::: {.callout-tip collapse=\"true\"}\n#### Hints\nThis is a slightly complex one. [1B #more-complex-conditions](01b_data.html#more-complex-conditions){target=\"_blank\"} might help you here.  \n:::\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\n\nAs always, there are lots of different ways.  \nHere are three:  \n\n::::panelset\n\n:::panel\n#### \"not a dog AND not a cat\"\nWe can ask if something is not a dog by using `petdata$species != \"Dog\"`. But we want the rows where the species is not a dog _and_ it's not a cat.  So it's two conditions:  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npetdata[petdata$species != \"Cat\" & petdata$species != \"Dog\", ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     license_year license_number     animals_name species primary_breed\n1505         2018      LNS147013    Billy the Kid    Goat     Miniature\n1655         2018      LNS132953 Vincent Van Goat    Goat     Miniature\n     secondary_breed weight_kg\n1505         Unknown    103.48\n1655         Unknown     73.96\n```\n\n\n:::\n:::\n\n\n\n:::\n:::panel\n#### \"not (dog OR cat)\"\nWe could also do this in other ways, such as asking for all the entries which are _either_ \"Dog\" _or_ \"Cat\", and then negating them: \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npetdata[!(petdata$species == \"Cat\" | petdata$species == \"Dog\"), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     license_year license_number     animals_name species primary_breed\n1505         2018      LNS147013    Billy the Kid    Goat     Miniature\n1655         2018      LNS132953 Vincent Van Goat    Goat     Miniature\n     secondary_breed weight_kg\n1505         Unknown    103.48\n1655         Unknown     73.96\n```\n\n\n:::\n:::\n\n\n\n:::\n:::panel\n#### \"not one of [Dog, Cat]\"\n\nAnother clever little operator is the `%in%` operator, which asks whether something is _in_ a set of things. Unfortunately, we can't use `!%in%` to mean \"not in\", so we need to put the `!` right at the start of the condition:  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npetdata[!petdata$species %in% c(\"Cat\",\"Dog\"), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     license_year license_number     animals_name species primary_breed\n1505         2018      LNS147013    Billy the Kid    Goat     Miniature\n1655         2018      LNS132953 Vincent Van Goat    Goat     Miniature\n     secondary_breed weight_kg\n1505         Unknown    103.48\n1655         Unknown     73.96\n```\n\n\n:::\n:::\n\n\n\n:::\n::::\n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n<div class='question-begin'>Question 7</div><div class='question-body'>\n\n\nCreate a new variable in the data, which contains the weights of all the animals, but rounded to the nearest kg. \n\n::: {.callout-tip collapse=\"true\"}\n#### Hints\nTry looking up the help documentation for the function `round()`. Try playing with it in the console, e.g. `round(c(3.5, 4.257, 1.1111))`. You may find it helpful to look back at [1B #adding/changing-a-variable](01b_data.html#addingchanging-a-variable){target=\"_blank\"}.  \n\n- \"to the nearest kg\" would mean we want no decimal points. Note that `round()` has a _digits_ argument. e.g. `round(22.324, digits = 2)` and `round(22.324, digits = 1)` do different things.  \n\n:::\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\n\nWe're wanting this variable as a new column in the data, so don't forget the `dataframe$newvariable <- ......` bit.  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npetdata$weight_rounded <- round(petdata$weight_kg)\n```\n:::\n\n\n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n<div class='question-begin'>Question 8</div><div class='question-body'>\n\n\nTry giving the dataset to the function `summary()`. You'll get out some information on each of the variables. It is likely that you'll get more useful information for the variables containing information on the animal's weights than for those containing their names, breeds etc because these variables are vectors of \"characters\". We'll start to look more about different types of data next week.  \n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\nEasy to do!  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(petdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  license_year  license_number     animals_name         species         \n Min.   :2015   Length:1956        Length:1956        Length:1956       \n 1st Qu.:2017   Class :character   Class :character   Class :character  \n Median :2018   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2018                                                           \n 3rd Qu.:2018                                                           \n Max.   :2018                                                           \n primary_breed      secondary_breed      weight_kg       weight_rounded \n Length:1956        Length:1956        Min.   :  0.390   Min.   :  0.0  \n Class :character   Class :character   1st Qu.:  4.707   1st Qu.:  5.0  \n Mode  :character   Mode  :character   Median : 16.630   Median : 17.0  \n                                       Mean   : 15.312   Mean   : 15.3  \n                                       3rd Qu.: 22.500   3rd Qu.: 22.0  \n                                       Max.   :103.480   Max.   :103.0  \n```\n\n\n:::\n:::\n\n\n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n<div class=\"divider div-transparent div-dot\"></div>\n\n# Simulating Dice\n\n\n\n<div class='question-begin'>Question 9</div><div class='question-body'>\n\n\nCopy the code from the lecture which creates a custom function called `dice()` (copied below).  \nBe sure to *run* the code (highlight it all with your cursor, and hit \"run\" in the top right, or press Ctrl/Cmd+Enter).  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndice <- function(num = 1) {\n  sum(sample(1:6, num, replace=TRUE))\n}\n```\n:::\n\n\n\n\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n<div style=\"border-radius: 5px; padding: 20px 20px 10px 20px; margin-top: 20px; margin-bottom: 20px; border: 1px solid #333333 !important;\">\n**What did that code do?**\n\nIn a sense, this code does *nothing*:  It won't give you any output when you run it.  What it is actually doing, though, is defining a *function* called `dice()`.  If you look at your *environment* panel (top right), you'll see `dice` appear when you run the code.\n  \nTo produce some output, we have to *call* the function `dice()` (by writing it into code:  `dice(4)`, for example).  `dice()` wants to be supplied with some information (in the *argument* `num`).  If no information is supplied, num will take a *default value* of `1`.  (So writing `dice()` is equivalent to writing `dice(1)`).\n\nWhat does `dice()` do with `num`?  It calls another function, `sample()`, with *3* arguments.  We didn't write `sample()`:  it's a function that's \"supplied with\" R.  To find out more about what `sample()` does:\n\n* click inside the brackets just after `sample()` in your R script;\n\n* press `TAB` (`⇥`), then `F1`\n\n* you should see some help appear in the bottom right-hand panel of RStudio.\n\nYou will find that \"`sample()` takes a sample ... from the elements of `x` ...\"  If you compare the code in RStudio to the code under \"Usage\" you'll see that where the help has `x`, we have `1:6`.  So what does `1:6` mean?  One way to find out is to open the **console** in RStudio (bottom left) and just type stuff in.  What happens when you type `1:6`?  What about `2:17`?  (What about `6:1`?)\n\n__Remember:__ The console is the place to \"try stuff out\" (don't worry, you can't break it). \n\nWhat you will discover is that `1:6` creates a *vector* (list of similar things, in this case numbers) of the numbers 1-6. The next bit of the `sample()` function is `size`. In the `dice()` function, the `num` passes down to the `size` of the `sample()`: Looking through the help, `size` is the number of items to choose.  So `sample(1:6, 1)` would choose one number from the numbers 1-6 at random; `sample(1:6, 3)` would choose 3, and so on.  The last argument, `replace=TRUE`, tells `sample()` what to do with a number once it's been picked:  Does it go 'back into the bag' to be picked again (`TRUE`) or not? (`FALSE`)?  \n\nAround the outside is `sum()` which simply sums the numbers on however many (`num`) dice you \"rolled\".  \n\nPutting it all together, our `dice()` function \"throws `num` dice\" by `sample()`ing from the numbers 1-6 `num` times, `replace`ing each number when it's been picked, and sums the numbers of all the dice.  \n\n</div>\n\n\n\n<div class='question-begin'>Question 10</div><div class='question-body'>\n\n\nUse the function you just made to 'roll a die' a few times. Check that it works like you expect.  \n\n\n::: {.callout-tip collapse=\"true\"}\n#### Hints\n\nYou just need to run `dice()` a few times. A single die means `num = 1`, which is the default.  \n\n:::\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndice()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\ndice()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\ndice()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\ndice()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n\n<div class='question-begin'>Question 11</div><div class='question-body'>\n\n\nLook up the function `replicate()`. We can use it to do something in R lots of times! For instance, `replicate(20, 1+1)` will evaluate `1+1` twenty times.  \n\nUse `replicate()` to simulate 20 rolls of a single die, and store the results in an object in your environment. Give it an easily identifiable name.  \nWhat does each value in this object represent?  \n\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrolls20 <- replicate(20, dice(num = 1))\nrolls20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 3 2 4 4 4 4 4 1 1 4 5 3 2 4 4 3 6 6 1 3\n```\n\n\n:::\n:::\n\n\n\nEach value in `rolls20` represents the simulated roll of a single die. We roll our die, and get a 3, we roll it again and get 2, the third roll we get 4, and so on.. \n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n<div class='question-begin'>Question 12</div><div class='question-body'>\n\n\nCreate a barplot showing the frequency with which each number was landed on in the 20 rolls.\n\n::: {.callout-tip collapse=\"true\"}\n#### Hints\nThe functions `table()` and `barplot()` were used to do this in the lecture.  \n:::\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\nYour plots will look slightly different to these, because all of our dice are random!\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# We can get the frequency table using table()\ntable(rolls20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nrolls20\n1 2 3 4 5 6 \n3 2 4 8 1 2 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Which we can then pass to the barplot() function:\nbarplot(table(rolls20))\n```\n\n::: {.cell-output-display}\n![](01_ex_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n<div class='question-begin'>Question 13</div><div class='question-body'>\n\n\nDo the same for 100 rolls, and then for 1,000. What do you notice?   \n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmorerolls <- replicate(100, dice(1))\nbarplot(table(morerolls))\n```\n\n::: {.cell-output-display}\n![](01_ex_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=80%}\n:::\n\n```{.r .cell-code}\nmorerolls2 <- replicate(1000, dice(1))\nbarplot(table(morerolls2))\n```\n\n::: {.cell-output-display}\n![](01_ex_files/figure-html/unnamed-chunk-20-2.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nThe more rolls we do of the dice, the flatter the graph becomes. This is because there is an equal probability of the die landing on any of the responses - there is a uniform probability.  \n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n\n<div class='question-begin'>Question 14</div><div class='question-body'>\n\n\nCopy the code below into your script and run it. It creates a new function called `wdice()` which simulates the rolling of `num` dice which are slightly weighted.  \n  \nRoll a single weighted die 20 times and plot the frequency distribution. Do the same for 100 and 1,000 rolls of a single die. Does a pattern emerge? At how many rolls?  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwdice <- function(num = 1){\n    sum(sample(1:6, num, replace=TRUE, prob = c(0.15,0.15,0.15,0.15,0.15,0.25)))\n}\n```\n:::\n\n\n\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwdice <- function(num = 1){\n    sum(sample(1:6, num, replace=TRUE, prob = c(0.15,0.15,0.15,0.15,0.15,0.25)))\n}\n\nwd <- replicate(20, wdice(1))\nbarplot(table(wd))\n```\n\n::: {.cell-output-display}\n![](01_ex_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=80%}\n:::\n\n```{.r .cell-code}\nwd <- replicate(1000, wdice(1))\nbarplot(table(wd))\n```\n\n::: {.cell-output-display}\n![](01_ex_files/figure-html/unnamed-chunk-22-2.png){fig-align='center' width=80%}\n:::\n\n```{.r .cell-code}\nwd <- replicate(10000, wdice(1))\nbarplot(table(wd))\n```\n\n::: {.cell-output-display}\n![](01_ex_files/figure-html/unnamed-chunk-22-3.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nThe die is clearly weighted towards landing on 6. \nHowever, is 20 rolls enough to reliably observe this? In _our_ 20 rolls above, it landed on 3 quite a bit too (yours will be different)! The pattern becomes clearer after 1000 rolls.  \n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n<div class='question-begin'>Question 15</div><div class='question-body'>\n\n\nRemember, `wdice()` and `dice()` are really just relying on different functions, like `sample()`. Try playing around with `sample()` in the console again - what does the `prob = c(....)` bit do?   \n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\nThe prob bit is defining the probabilities of observing each outcome - i.e. there is a 25% chance of rolling a 6.  \n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n<div class='question-begin'>Question 16</div><div class='question-body'>\n\n\nLet's try to modify the `wdice()` function. Edit the code for `wdice()` so that 50% of the time it lands on number 6.  \n\n::: {.callout-tip collapse=\"true\"}\n#### Hints \n\n- To test out your modified function, you will need to re-run the code which defines the function. When we use `wdice()` we use the function which is in our environment. If we want to edit the function, we need to then overwrite (or \"replace\"/\"reassign\") the object in our environment.  \n- We need to be careful to remember that the probability of different outcomes should sum to 1 (i.e., it's not possible to \"50% of the time land on 6\" as well as \"70% of the time land on 5\"!). \n\n:::\n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwdice <- function(num = 1){\n    sum(sample(1:6, num, replace=TRUE, prob = c(0.1,0.1,0.1,0.1,0.1,0.5)))\n}\n```\n:::\n\n\n\n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n\n\n<div class='question-begin'>Question 17</div><div class='question-body'>\n\n\nCan you observe the weighting in your new die (the one which 50% of the time lands on number 6) in only 20 rolls?  \n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwd <- replicate(20, wdice(1))\nbarplot(table(wd))\n```\n\n::: {.cell-output-display}\n![](01_ex_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nThe die is very clearly weighted to land on 6. We can see this in just 20 rolls. Presumably it will become even clearer if we increased how many times we roll it.  \n\n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n  \n\n\n<div class='question-begin'>Question 18</div><div class='question-body'>\n\n\nConceptually, what can we learn from this toy example?    \n\n\n</div><p class=\"question-end\"></p>\n\n\n\n\n<div style=\"display:none;\">\n\n\nThe more highly weighted a die is, the less we have to roll it in order to observe that weighting.  \n\n\n</div><p class=\"solution-end\"></p>\n\n\n\n\n<div class=\"tocify-extend-page\" data-unique=\"tocify-extend-page\" style=\"height: 0;\"></div>\n\n\n\n\n\n\n\n",
    "supporting": [
      "01_ex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/panelset-0.3.0/panelset.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/panelset-0.3.0/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}