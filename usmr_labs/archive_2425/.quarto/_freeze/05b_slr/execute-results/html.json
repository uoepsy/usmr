{
  "hash": "d2cdaa17c8ffb98ead236c97844eb538",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"5B: Simple Linear Regression\"\nparams: \n    SHOW_SOLS: FALSE\n    TOGGLE: TRUE\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n\n:::lo\nThis reading:  \n\n- Modelling an outcome variable as a linear function of an explanatory variable (correlation as an intercept and a slope).  \n- Testing the parameters that define our model.  \n- Simple statistical tests as linear models.  \n\n:::\n\n# The Linear Model\n\n\n\n\n\n\n\n\n\nIn its simplest form, linear regression is a way to make a model of the relationship between two variables. When both variables are continuous, it is nice and intuitive to envisage this as the 'line of best fit' on a scatterplot. For instance, in @fig-lmintro we see two variables `y` and `x`, and our linear regression model is the blue line.  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![y regressed onto x.](05b_slr_files/figure-html/fig-lmintro-1.png){#fig-lmintro fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nWe're going to use the data in this plot for the remainder of the reading. If you wish to play around with it yourself, it is available at [https://uoepsy.github.io/data/usmr_slr.csv](https://uoepsy.github.io/data/usmr_slr.csv), and contains a sample of 100 observations on variables `x` and `y`.   \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nmy_data <- read_csv(\"https://uoepsy.github.io/data/usmr_slr.csv\")\nhead(my_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 2\n      x     y\n  <dbl> <dbl>\n1  3.19  4.42\n2  2.57  4.48\n3  3.91  2.72\n4  4.79  5.39\n5  4.00  3.85\n6  4.11  4.42\n```\n\n\n:::\n:::\n\n\n\n\n@fig-lmintro, above, highlights a linear relationship, where the data points are scattered around an underlying linear pattern with a roughly-constant spread as we move along `x`.  \n\nIn [5A: Covariance & Correlation](05a_covcor.html){target=\"_blank\"} we have already talked about one way to describe this relationship, by calculating either the covariance or the correlation between `x` and `y`. However, as we will see in the coming weeks, the linear model provides us with the scope to extend our analysis to many more situations - it is the building block of many more complex analytical methods.  \n\nThe simple linear regression model takes the form:  \n\n$$\n\\begin{align}\n& y = b_0 + b_1 \\cdot x + \\varepsilon \\quad \\\\\n\\end{align}\n$$\n\n:::column-margin\nYou will see a variety of different ways of specifying the linear model form in different resources, some use $\\beta$, some use $b$. Sometimes you will see $\\alpha$ instead of $b_0$.\n:::\n\nWe typically refer to the outcome ('dependent') variable with the letter $y$ and to our predictor ('explanatory'/'independent') variables with the letter $x$. When we construct a linear model we are trying to re-express our outcome variable $y$ with some linear transformation of our predictor variable $x$.  \n\nYou can think of this in broader terms as: \n$$\n\\begin{align}\n& \\color{red}{Outcome}\\color{} = \\color{blue}{Model}\\color{black}{} + Error\\\\\n\\end{align}\n$$\n\n\n## The Model \n\nWhen we fit a simple regression model, the bit we refer to as the 'model' is the line that is defined by two numbers, an 'intercept' and a 'slope' (see @fig-slr):\n\n- the __intercept__, denoted $b_0$, is the point at which the line hits the y-axis (i.e. where $x=0$)\n- the __slope__, denoted $b_1$, is the angle of the line. It is the amount which the line increases for every 1 increase in $x$.  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Simple linear regression model, with the systematic part of the model in blue](05b_slr_files/figure-html/fig-slr-1.png){#fig-slr fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nThis line implies some _predicted_ values for our observed $x$ values. For instance, we can see that when $x=3$, the model (the blue line) will predict that $y$ is approximately 4. If we take each of our datapoints, and project them up/down to the line, then we get our fitted values (@fig-slrfit). We often denote these as $\\hat y$ (or \"y hat\"), with the hat indicating that they are the model-estimated values of $y$. \n\n$$\n\\begin{align}\n\\color{red}{Outcome}\\color{black} \\qquad=\\qquad & \\color{blue}{Model}\\color{black}{} & +\\qquad Error\\\\\n\\color{red}{y}\\color{black} \\qquad = \\qquad & \\color{blue}{\\hat y}\\color{black} & +\\qquad \\varepsilon \\quad \\\\\n\\color{red}{y}\\color{black} \\qquad = \\qquad & \\color{blue}{b_0 + b_1 \\cdot x}\\color{black} & +\\qquad \\varepsilon \\quad \\\\\n\\end{align}\n$$\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Simple linear regression model, fitted values in blue](05b_slr_files/figure-html/fig-slrfit-1.png){#fig-slrfit fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n::: {.callout-caution collapse=\"true\"}\n#### optional: Regression Slope vs Covariance  \n\nWith simple linear regression, the fitted line we are describing is actually a scaled version of our covariance.  \n\nRemember that covariance is the average of the products of $(x_{i}-\\bar{x})(y_{i}-\\bar{y})$, which is a bit like the average area of the rectangles in @fig-covsq. If we think about what the average __width__ of these rectangles is, it is the average of $(x_{i}-\\bar{x})$, which is actually just the variance of $x$! \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Covariance](05b_slr_files/figure-html/fig-covsq-1.png){#fig-covsq fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nWe can divide the area of the average rectangle ($cov(x, y)$) by its width ($var(x)$), thereby scaling it so that the width is 1. What we're getting from our coefficient is the area of this new rectangle which has width = 1. Because width = 1, the area is also the height ($\\text{area} = \\text{width} \\times \\text{height} = 1 \\times \\text{height}$). So what we get is the amount that $y$ increases (the height) as $x$ increases by 1 (the width).  \n\nWe can see this working: \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncov(my_data$x, my_data$y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6877738\n```\n\n\n:::\n\n```{.r .cell-code}\nvar(my_data$x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8823097\n```\n\n\n:::\n:::\n\n\n\nThis calculation gives us the same linear regression slope of 0.78 that we see when we fit the model using `lm()`.  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncov(my_data$x, my_data$y)/var(my_data$x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7795152\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n## The Error \n\nOur model is not perfect. It is a _model_ - i.e. it is a _simplification_ of the world, and so is inherently going to be inaccurate for individuals. This inaccuracy can be seen in our plots so far - some points are higher than the model predicts, some lower. These deviations from the model (shown by the black dotted lines in @fig-slr2) from the model are the random error component $\\hat \\varepsilon$, or \"residuals\".  \n\n$$\n\\begin{align}\nError &= \\color{red}{Outcome}\\color{black}-\\color{blue}{Model} \\\\\n\\hat{\\varepsilon} &= \\color{red}{y}\\color{black}- \\color{blue}{\\hat{y}}\n\\end{align}\n$$\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Simple linear regression model, with the systematic part of the model in blue, and residuals in red](05b_slr_files/figure-html/fig-slr2-1.png){#fig-slr2 fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nIn full, we should really write our linear regression model out as: \n\n$$\n\\begin{align}\n& y = b_0 + b_1 \\cdot x + \\varepsilon \\quad \\\\\n& \\text{where} \\\\\n& \\varepsilon \\sim N(0, \\sigma) \\text{ independently}\n\\end{align}\n$$\n\nThe new bit here: \"$\\varepsilon \\sim N(0, \\sigma) \\text{ independently}$\" means that the errors around the line have mean zero and constant spread as x varies (we'll read more about what this means later on when we discuss the assumptions underlying regression). You can think of $\\sim N(0, \\sigma)$ as meaning \"normally distributed with a mean of zero and a standard deviation of $\\sigma$\".  \n\nThe standard deviation of the errors, denoted by $\\sigma$, is an important quantity that our model estimates. It measures how much individual data points tend to deviate above and below the regression line. A small $\\sigma$ indicates that the points hug the line closely and we should expect fairly accurate predictions, while a large $\\sigma$ suggests that, even if we estimate the line perfectly, we can expect individual values to deviate from it by substantial amounts.\n\n$\\sigma$ is estimated by essentially averaging squared residuals (giving the variance) and taking the square-root:  \n$$\n\\begin{align}\n& \\hat \\sigma = \\sqrt{\\frac{SS_{Residual}}{n - 2}} \\\\\n\\qquad \\\\\n& \\text{where} \\\\\n& SS_{Residual} = \\textrm{Sum of Squared Residuals} = \\sum_{i=1}^n{(\\varepsilon_i)^2}\n\\end{align}\n$$\n\n<div class=\"divider div-transparent div-dot\"></div>\n\n# Fitting Linear Models in R\n\n## lm()\n\nIn R it is very easy to fit linear models, we just need to use the `lm()` function.  \n\nThe syntax of the `lm()` function is:  \n\n```\nmodel_name <- lm(outcome ~ 1 + predictor, data = dataframe)\n```\n\nWe don't _have_ to include the `1 + ` when we specify the model, as this will be included by default, so we can also simply write: \n\n```\nmodel_name <- lm(outcome ~ predictor, data = dataframe)\n```\n\n::: {.callout-note collapse=\"true\"}\n#### What is the ~1 + doing?  \n\nThe fitted model can be written as\n$$\n\\hat y = \\hat b_0 + \\hat b_1 \\cdot x\n$$\nThe predicted values for the outcome are equal to our intercept, $\\hat b_0$, plus our slope $\\hat b_1$ multiplied by the value on our explanatory variable $x$.  \nThe intercept is a _constant_. That is, we could write it as multiplied by 1:\n$$\n\\hat y = \\color{blue}{\\hat b_0}\\color{black}{}\\cdot\\color{orange}{1}\\color{blue}{ + \\hat b_1 }\\color{black}{}\\cdot\\color{orange}{x}\\color{black}{}\n$$\n\nWhen we specify the linear model in R, we include after the tilde sign `~` all the things which appear to the right of each of the $\\hat b$s (the bits in green in the equation above). That's why the 1 is included. It is just saying \"we want the intercept, $b_0$, to be estimated\".   \n\n:::\n\n## Model Summary\n\nWe can then view lots of information by giving our model to the `summary()` function:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_model <- lm(y ~ x, data = my_data)\nsummary(my_model)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Output of lm() for a simple regression in R](images/slr/slr1.png){#fig-lmoutput fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nThe __intercept__ $b_0$ is the point at which the line hits the y-axis (i.e. where $x=0$), and the __slope__ $b_1$ is the amount which the line increases for every 1 increase in $x$. We can see the estimated values of these in @fig-lmoutput, and these provide us with our fitted lin:  \n$$\n\\begin{align}\ny =& 1.54 + 0.78 \\cdot x + \\varepsilon \\\\\n\\end{align}\n$$\nWe also see that the standard deviation of the residuals, $\\sigma$, is 0.93, which means we consider the actual observed values of Y to vary randomly around this line with a standard deviation of 0.93.  \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Simple linear regression model, estimated intercept and slope included](05b_slr_files/figure-html/fig-slrest-1.png){#fig-slrest fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n\n\n## Model Predictions\n\nWe can get out the model predicted values for $y$, the \"y hats\" ($\\hat y$), using functions such as:  \n\n- `predict(my_model)`\n- `fitted(my_model)`\n- `fitted.values(my_model)`\n- `my_model$fitted.values`\n\nA nice package which will come in handy is the __broom__ package. It allows us to use the function `augment()`, which gives us out lots of information, such as the model predicted values, the residuals, and many more:  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(broom)\naugment(my_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 Ã— 8\n       y     x .fitted .resid   .hat .sigma  .cooksd .std.resid\n   <dbl> <dbl>   <dbl>  <dbl>  <dbl>  <dbl>    <dbl>      <dbl>\n 1  4.42  3.19    4.03  0.388 0.0102  0.935 0.000903      0.420\n 2  4.48  2.57    3.54  0.941 0.0130  0.931 0.00681       1.02 \n 3  2.72  3.91    4.59 -1.87  0.0180  0.916 0.0378       -2.03 \n 4  5.39  4.79    5.28  0.107 0.0438  0.935 0.000319      0.118\n 5  3.85  4.00    4.66 -0.809 0.0197  0.932 0.00776      -0.878\n 6  4.42  4.11    4.74 -0.327 0.0222  0.935 0.00143      -0.355\n 7  4.30  2.72    3.66  0.638 0.0114  0.933 0.00274       0.689\n 8  5.94  4.02    4.68  1.26  0.0202  0.927 0.0193        1.37 \n 9  1.70  3.05    3.92 -2.22  0.0100  0.908 0.0291       -2.40 \n10  4.79  4.58    5.11 -0.318 0.0358  0.935 0.00224      -0.348\n# â„¹ 90 more rows\n```\n\n\n:::\n:::\n\n\n\n\nWe can also compute model-predicted values for other (unobserved) data. For instance, what about for an observation where $x=10$, or $20$?  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# make a dataframe with values for the predictor:\nsome_newdata <- data.frame(x=c(10, 20))\n# model predicted values of y, for the values of x inside the 'some_newdata' object:\npredict(my_model, newdata = some_newdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       1        2 \n 9.33792 17.13307 \n```\n\n\n:::\n:::\n\n\n\n\nGiven that our fitted model takes the form below, we can work this out ourselves as well: \n\n$$\n\\begin{align}\ny &= 1.54 + 0.78\\cdot x \\\\\ny &= 1.54 + 0.78\\cdot 10 \\\\\ny &= 1.54 + 7.80\\\\\ny &= 9.34 \\\\\n\\end{align}\n$$\n\n\n<div class=\"divider div-transparent div-dot\"></div>\n\n# Tests of regression coefficients  \n\nNow that we have fitted a linear model, and we know how we interpret our coefficient estimates, we would like to be able to make a statement on whether these relationships are likely to hold in the population.  \nOur coefficients accurately describe the relationship between $y$ (outcome) and $x$ (predictor) in our sample, but we are yet to perform a statistical test. A test will enable us to discuss how likely it is that we would see this relationship in our sample, if the relationship doesn't hold for the population.  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Estimates without inference](images/slr/conv1a.png){#fig-sillyfig fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nMuch like our discussion of sample means and intervals in [2B: Sampling & Curves](02b_sampling.html){target=\"_blank\"}, we have our coefficients: \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncoef(my_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)           x \n  1.5427681   0.7795152 \n```\n\n\n:::\n:::\n\n\n\n\nand to quantify the amount of uncertainty in each estimated coefficient that is due to sampling variability, we use the standard error (SE)^[Recall that a standard error gives a numerical answer to the question of how variable a statistic will be because of random sampling.] of the coefficient.\n\nThe standard errors are found in the column \"Std. Error\" of the `summary()` of a model:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(my_model)$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             Estimate Std. Error  t value     Pr(>|t|)\n(Intercept) 1.5427681 0.32004944 4.820406 5.239619e-06\nx           0.7795152 0.09959062 7.827194 5.917849e-12\n```\n\n\n:::\n:::\n\n\n\n\nIn this example the slope, 0.78, has a standard error of 0.10. One way to envision this is as a distribution. Our best guess (mean) for the slope parameter is 0.78. The standard deviation of this distribution is 0.10, which indicates the precision (uncertainty) of our estimate.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Sampling distribution of the slope coefficient. The distribution is approximately bell-shaped with a mean of 0.78 and a standard error of 0.10.](05b_slr_files/figure-html/fig-sampbeta-1.png){#fig-sampbeta fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nWe can perform a test against the null hypothesis that the estimate is zero. The reference distribution in this case is a t-distribution with $n-2$ degrees of freedom^[Why $n-2$? The most intuitive answer is that we have already used up 2 pieces of information in estimating the intercept and the slope. Once these things are fixed, $n-2$ of the datapoints could be wherever they like around that line, but the remaining 2 must be placed in such a way that results in that line], where $n$ is the sample size, and our test statistic is:  \n\n$$\nt = \\frac{\\hat b_1 - 0}{SE(\\hat b_1)}\n$$\n\nThis allows us to test the hypothesis that the population slope is zero --- that is, that there is no linear association between income and education level in the population.  \n\nWe don't actually have to **do** anything for this, it's all provided for us in the `summary()` of the model! The information is contained in the row corresponding to the variable \"education\" in the output of `summary()`, which reports the t-statistic under `t value` and the p-value under `Pr(>|t|)`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(my_model)$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             Estimate Std. Error  t value     Pr(>|t|)\n(Intercept) 1.5427681 0.32004944 4.820406 5.239619e-06\nx           0.7795152 0.09959062 7.827194 5.917849e-12\n```\n\n\n:::\n:::\n\n\n\n\n:::int\nA significant association was found between x and y ($b = 0.78$, $SE = 0.10$, $t(98)=7.83$, $p<.001$).\n:::\n:::column-margin\nRecall that the p-value `5.92-e12` in the `Pr(>|t|)` column simply means $5.92 \\times 10^{-12}$. This is a very small value, hence we will report it as <.001 following the APA guidelines.\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Conversations with statisticians](images/slr/conv2a.png){#fig-sillyfig2 fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n\n<div class=\"divider div-transparent div-dot\"></div>\n\n# Binary Predictors\n\nLet's suppose that instead of having measured $x$ so accurately, we simply had information on whether $x>3$ or not. Our predictor variable would be binary categorical (think back to our discussion of types of data in [2A: Measurement](02a_measurement.html){target=\"_blank\"}) - it would have 2 levels:    \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_data <- \n  my_data |> \n  mutate(\n    x_cat = ifelse(x < 3, \"level1\",\"level2\")\n  )\n```\n:::\n\n\n\n\nWe may then plot our relationship as a boxplot. If you want to see the individual points, you could always \"jitter\" them (right-hand plot below)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(my_data, aes(x = x_cat, y = y)) + \n  geom_boxplot() +\nggplot(my_data, aes(x = x_cat, y = y)) + \n  geom_jitter(height=0, width=.05)\n```\n\n::: {.cell-output-display}\n![](05b_slr_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n\nWe can include categorical predictors such as this in a linear regression, but the interpretation of the coefficients is very specific.  \n\nUp to now we have talked about coefficients being interpreted as \"the change in $y$ associated with a 1-unit increase in $x$\". For categorical explanatory variables, our coefficients can be considered to examine differences in group means. However, they are actually doing exactly the same thing - the model is simply translating the levels (like \"Level1\"/\"Level2\", or \"Yes\"/\"No\", or \"High\"/\"Low\") in to 0s and 1s! While we may have in our dataframe a categorical predictor like the middle column \"x_cat\", below, what is inputted into our model is more like the third column, \"isLevel2\". \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 Ã— 3\n       y x_cat  isLevel2\n   <dbl> <chr>     <dbl>\n 1  5.90 level2        1\n 2  4.82 level2        1\n 3  5.70 level2        1\n 4  4.81 level2        1\n 5  2.42 level1        0\n 6  3.82 level1        0\n 7  3.88 level1        0\n 8  5.57 level2        1\n 9  6.25 level2        1\n10  3.51 level2        1\n# â„¹ 90 more rows\n```\n\n\n:::\n:::\n\n\n\n\nOur coefficients are actually following the same logic as for a continuous predictor. The intercept is the estimated average outcome _when our predictor equals zero_, and the slope is the change in our outcome variable associated with a _1-unit change in our predictor._    \nIt's just that \"zero\" for this predictor variable now corresponds to a whole group. This is known as the \"reference group\" or \"reference level\". So the intercept is the estimated mean of $y$ when `x_cat == \"level1\"` (it will default to alphabetical, so \"level1\" will be treated as zero). Accordingly, the 1-unit change in our predictor (the move from 0 to 1) corresponds to the estimated change in mean of $y$ when moving from \"level1\" to \"level2\" (i.e. the difference between the two levels). \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05b_slr_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n\n<div class=\"divider div-transparent div-dot\"></div>\n\n# A first look at linear model assumptions\n\nAll our work here is in aim of making **models of the world**.  \n\n- Models are models. They are simplifications. They are therefore wrong.  \n- Our residuals ( $y - \\hat{y}$ ) reflect everything that we **don't** account for in our model.  \n- In an ideal world, our model accounts for _all_ the systematic relationships. The leftovers (our residuals) are just random noise.  \n- If our model is mis-specified, or we don't measure some systematic relationship, then our residuals will reflect this.  \nWe check by examining how much \"like randomness\" the residuals appear to be (zero mean, normally distributed, constant variance, i.i.d (\"independent and identically distributed\"). These ideas tend to get referred to as our __\"assumptions\".__  \n- While we will **never** know whether our residuals contain only randomness (we can never observe everything), our ability to generalise from the model we fit on sample data to the wider population relies on these assumptions.  \n\n:::statbox\n__Assumptions in a nutshell__   \n\nIn using linear regression, we have assumptions about our model in that we assume that modelling the outcome variable as a **linear** combination of the explanatory variables is an appropriate thing to do.  \nWe also make certain assumptions about what we have _left out_ of our model - the **errors** component.    \n<!-- $$ -->\n<!-- \\color{red}{y} = \\color{blue}{\\underbrace{\\beta_0 \\cdot{} 1 + \\beta_1 \\cdot{} x_1 + ... + \\beta_k \\cdot x_k}_{X \\boldsymbol \\beta}} + \\varepsilon -->\n<!-- $$ -->\n\nSpecifically, we assume that our errors have __\"zero mean and constant variance\"__.  \n\n- mean of the residuals = zero across the predicted values on the linear predictor.  \n- spread of residuals is normally distributed and constant across the predicted values on the linear predictor.  \n\n\n::: {.callout-note collapse=\"true\"}\n#### What does it look like?  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05b_slr_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n#### What does it <b>not</b> look like?   \n\nThings look a bit wrong (like there is something systematic that we haven't accounted for), when our residuals do not have mean zero:  \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05b_slr_files/figure-html/unnamed-chunk-27-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nOr do not have constant variance: \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05b_slr_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n:::\n\n:::\n\n:::rtip\n__Assumptions in R__  \n\nWe can get a lot of plots for this kind of thing by using __plot(model)__\n\nHere's what it looks like for a nice neat model:  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(my_model)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05b_slr_files/figure-html/unnamed-chunk-31-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n- Top Left: For the __Residuals vs Fitted__ plot, we want the red line to be horizontal at close to zero across the plot. We don't want the residuals (the points) to be fanning in/out.  \n- Top Right: For the __Normal Q-Q__ plot, we want the residuals (the points) to follow closely to the diagonal line, indicating that they are relatively normally distributed _(QQplots plot the values against the associated percentiles of the normal distribution. So if we had ten values, it would order them lowest to highest, then plot them on the y against the 10th, 20th, 30th.. and so on percentiles of the standard normal distribution (mean 0, SD 1))_.\n- Bottom Left: For the __Scale-Location__ plot, we want the red line to be horizontal across the plot. These plots allow us to examine the extent to which the variance of the residuals changes accross the fitted values. If it is angled, we are likely to see fanning in/out of the points in the residuals vs fitted plot.\n- Bottom Right: The __Residuals vs Leverage__ plot indicates points that might be of individual interest as they may be unduly influencing the model. There are funnel-shaped lines that will appear on this plot for messier data (not visible above as the data is too neat!), ideally, the further the residual is to the right, the closer to the 0 we want it to be. We'll look at this in more depth in a future reading. \n\n:::\n\n<div class=\"divider div-transparent div-dot\"></div>\n\n\n# Example\n\n:::frame\n> **Research Question:** Is perceptual speed associated with age?  \n\nThe data for this example contains a sample of 130 participants all of whom are over the age of 65, with ages ranging from 67 to 88. All participants completed a short task measuring Perceptual Speed and Accuracy that scores from 0 to 50.  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\nThe data are accessible at [https://uoepsy.github.io/data/usmr_percept1.csv](https://uoepsy.github.io/data/usmr_percept1.csv).  \n\n:::\n\n:::panelset\n\n:::panel\n#### Exploring \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npercdat <- read_csv(\"https://uoepsy.github.io/data/usmr_percept1.csv\")\n```\n:::\n\n\n\n\nSome visualisations:  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt1 <- \n  ggplot(percdat, aes(x = percept)) + \n  geom_density() +\n  geom_boxplot(width = 1/300)\n\nplt2 <- \n  ggplot(percdat, aes(x = age)) + \n  geom_density() +\n  geom_boxplot(width = 1/80)\n\nplt3 <- ggplot(percdat, aes(x = age, y = percept)) + \n  geom_point()\n\nlibrary(patchwork)\n(plt1 + plt2) / plt3\n```\n\n::: {.cell-output-display}\n![](05b_slr_files/figure-html/unnamed-chunk-34-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n:::\n:::panel\n#### Fitting  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_model <- lm(percept ~ age, data = percdat)\nsummary(p_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = percept ~ age, data = percdat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-23.771  -7.665   1.076   6.857  25.619 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  77.2111    21.8240   3.538 0.000563 ***\nage          -0.6951     0.2820  -2.465 0.015017 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 10.93 on 128 degrees of freedom\nMultiple R-squared:  0.04533,\tAdjusted R-squared:  0.03787 \nF-statistic: 6.077 on 1 and 128 DF,  p-value: 0.01502\n```\n\n\n:::\n:::\n\n\n\n\n:::\n:::panel\n#### Checking\n\nThese plots don't look too bad to me. The Residuals vs Fitted plot looks like a random cloud of points (which is good). The residuals look relatively normally distributed (see the QQ plot), and apart from at the lower end of the fitted values, the variance is fairly constant across (see the Scale-Location plot) - this may be due to scarcity of data from younger people. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(p_model)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05b_slr_files/figure-html/unnamed-chunk-37-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n\n:::\n:::panel\n#### Interpreting\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncoef(p_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)         age \n 77.2111245  -0.6951299 \n```\n\n\n:::\n:::\n\n\n\n\n- `(Intercept)`: For someone of age zero, the estimated average score on the Perceptual Speed task is 77.2  \n- `age`: For each additional year of age, the estimated average score on the task is -0.695 points lower. \n\nNote the intercept isn't very useful here at all. It estimates the score for a newborn (who wouldn't be able to complete the task anyway). Furthermore, it estimates a score of 77, when the task only scores up to 50. This is because these models are _linear_, so the lines just keep on going outside of the range.  \n\n\n<!-- ```{r} -->\n<!-- summary(p_model)$r.squared -->\n<!-- ``` -->\n\n<!-- - age explains approximately 4.5% of the variance in scores of the perceptual speed task.  -->\n\n:::\n:::panel\n#### Visualising\n\nFor a simple linear regression model (with just one predictor like we have here), then the easiest way to plot this model is to use `geom_smooth()`. When we add `geom_smooth(method=lm)` to a ggplot, it will take the variable on the y-axis and \"regresses it on to\" the variable on the x-axis:  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(percdat, aes(x = age, y = percept)) + \n  geom_point() +\n  geom_smooth(method=lm)\n```\n\n::: {.cell-output-display}\n![](05b_slr_files/figure-html/unnamed-chunk-39-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nThe line here represents our model - the slope is the estimated slope coefficient, and if we extended it all the way back to where age = 0, the height of it would be the intercept! The grey bands represent the 95% confidence interval bands.  \n\n::: {.callout-caution collapse=\"true\"}\n#### optional: if we want to do it manually  \n\nTo do it manually, we need to first get the model predicted values, and then add the confidence bounds above and below it. To do that we need the standard error, multiplied by whatever t-value would capture 95% of the distribution:  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npercdat |> \n  mutate(\n    # get the fitted values\n    fit = predict(p_model),\n    # get the SE at each level of fitted values\n    se = predict(p_model, se = TRUE)$se.fit,\n    # create confidence intervals\n    # df = 128 because we have 130 observations\n    c.lwr = fit - qt(.975, df = 128) * se,\n    c.upr = fit + qt(.975, df = 128) * se\n  ) |>\n  # plot!\n  ggplot(aes(x = age, y = percept))+\n  geom_point()+\n  geom_ribbon(aes(ymin = c.lwr, ymax = c.upr), alpha = .2) + \n  geom_line(aes(y = fit))\n```\n\n::: {.cell-output-display}\n![](05b_slr_files/figure-html/unnamed-chunk-40-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n:::\n\n:::\n:::panel\n#### Tabulating\n\nThe same package (**sjPlot**) provides some nice quick ways to create regression tables (a bit like what we get from `summary(model)`, only presented a lot more nicely!)  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(sjPlot)\ntab_model(p_model)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"border-collapse:collapse; border:none;\">\n<tr>\n<th style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm;  text-align:left; \">&nbsp;</th>\n<th colspan=\"3\" style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm; \">percept</th>\n</tr>\n<tr>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  text-align:left; \">Predictors</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">Estimates</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">CI</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">p</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">(Intercept)</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">77.21</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">34.03&nbsp;&ndash;&nbsp;120.39</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>0.001</strong></td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">age</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">&#45;0.70</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">&#45;1.25&nbsp;&ndash;&nbsp;-0.14</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>0.015</strong></td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm; border-top:1px solid;\">Observations</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left; border-top:1px solid;\" colspan=\"3\">130</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;\">R<sup>2</sup> / R<sup>2</sup> adjusted</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;\" colspan=\"3\">0.045 / 0.038</td>\n</tr>\n\n</table>\n\n`````\n:::\n:::\n\n\n\n\n:::\n:::panel\n#### Writing up\n\nA total of 130 participants were included in the analysis, with ages ranging from 67 to 88 (Mean = 77.3, sd = 3.4). On average, participants scored 23.5 (SD = 11.1) on the perceptual speed task. \n\nA simple linear regression model was fitted, with scores on the perceptual speed task regressed on to age. A significant association was found, with scores on the task decreasing by -0.7 with every year of age ($b = -0.695$, $SE = 0.28$, $t(128)=-2.47$, $p = 0.015$), suggesting that perception may get worse in older age.   \n\n:::\n\n:::\n\n\n<div class=\"divider div-transparent div-dot\"></div>\n\n# Simple Statistical Tests as Regression Models\n\nThe simple linear regression model with a single predictor `lm(y ~ x1)` is a useful introduction to the idea of model-based thinking. In fact, it is another way of framing the same simple statistical tests that we have already been doing in the previous weeks:  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n|outcome (y) |predictor (x) |regression |equivalent to                     |\n|:-----------|:-------------|:----------|:---------------------------------|\n|continuous  |continuous    |lm(y ~ x)  |cor.test(x, y) and cor.test(y, x) |\n|continuous  |binary        |lm(y ~ x)  |t.test(y ~ x)                     |\n\n\n:::\n:::\n\n\n\n\n\n\n\n::: {.callout-caution collapse=\"true\"}\n#### optional: correlation = regression\n\nRemember, the covariance is a measure of the shared variance in two variables (i.e., how one variable varies with the other). However, it is hard to interpret because it is dependent on the units of the variables. Correlation is a _standardised_ way of expressing this. \n\nOne way to think about this is to remember that we can __standardise__ our variables (subtract each value from the mean and divide by the standard deviation (See, e.g. [2B #the-standard-normal-distribution](02b_sampling.html#the-standard-normal-distribution){target=\"_blank\"})), which transforms our set of numbers so that they have a mean of zero and a standard deviation of one. If we standardise both variable $x$ and variable $y$, the covariance of $x_{standardised}$ and $y_{standardised}$ is the same as the correlation between $x$ and $y$ (see [5A #correlation](05a_covcor.html#correlation){target=\"_blank\"}).  \n\nIf you've been reading these \"optional dropdowns\", you may remember that the regression coefficient from `lm(y ~ x)` is _also_ the covariance between $x$ and $y$, simply rescaled to be the amount of change in $y$ when $x$ changes by 1 (see the optional dropdown in [#the-model](#the-model)).  \n\nSo actually, all these metrics are pretty much the same thing, only scaled in different ways. And whether we perform a test of the relationship (e.g. test the correlation using `cor.test()`, or test of the regression slope from `lm(y~x)`), we're actually testing the same thing.  \n\nNote that the $t$-statistics and $p$-values are identical:  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncor.test(df$x_cont, df$y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPearson's product-moment correlation\n\ndata:  df$x_cont and df$y\nt = 3.5282, df = 98, p-value = 0.0006388\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.1491293 0.4992136\nsample estimates:\n      cor \n0.3357138 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(lm(y ~ x_cont, data = df))$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              Estimate Std. Error   t value     Pr(>|t|)\n(Intercept) -0.6838938  0.5621419 -1.216586 0.2266837999\nx_cont       1.9322184  0.5476566  3.528157 0.0006387745\n```\n\n\n:::\n:::\n\n\n\n\nIn fact, the __\"correlation coefficient\"__ $r$ is equivalent to the __standardised__ regression slope of $y_{standardised} \\sim b_0 + b_1 \\cdot x_{standardised}$. \n\n:::\n::: {.callout-caution collapse=\"true\"}\n#### optional: t.test = regression  \n\nWe saw last week about when we have a linear regression model with one binary predictor, we interpret the regression coefficient as the difference in mean $y$ between the two levels of our predictor (see [#binary-predictors above](#binary-predictors)).  \n\nWe've actually seen this idea before. [3B #two-sample-t-test](03b_inference2.html#two-sample-t-test){target=\"_blank\"} saw how we can use a $t$-test to test whether the mean of some variable is different between two groups.  \n\nThese are actually just different expressions of the same thing. The $t$-statistics and $p$-values are identical:  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nt.test(df$y ~ df$x_cat, var.equal = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tTwo Sample t-test\n\ndata:  df$y by df$x_cat\nt = -3.2848, df = 98, p-value = 0.001416\nalternative hypothesis: true difference in means between group 0 and group 1 is not equal to 0\n95 percent confidence interval:\n -6.102816 -1.506025\nsample estimates:\nmean in group 0 mean in group 1 \n     -3.1488840       0.6555365 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(lm(y ~ x_cat, data = df))$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             Estimate Std. Error   t value     Pr(>|t|)\n(Intercept) -3.148884  0.9045774 -3.481055 0.0007473914\nx_cat1       3.804421  1.1581927  3.284791 0.0014162481\n```\n\n\n:::\n:::\n\n\n\n\n__Note:__ The `t.test()` function allows us to perform a Welch t-test, which means we can relax the assumption of equal variance in the two groups. Simple linear regression does not allow us to do this, so if our research question is straightforward enough to be simply \"is the mean of $y$ different between these two groups\", then a Welch t-test _may_ be preferable. \n\n:::\n\n\n\n\n<div class=\"tocify-extend-page\" data-unique=\"tocify-extend-page\" style=\"height: 0;\"></div>\n",
    "supporting": [
      "05b_slr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/panelset-0.3.0/panelset.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/panelset-0.3.0/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}