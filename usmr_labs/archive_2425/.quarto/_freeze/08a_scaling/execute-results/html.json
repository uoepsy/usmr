{
  "hash": "a2f957781b6e3d369bbf5ada09431c67",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"8A: Centering and Scaling\"\nparams: \n    SHOW_SOLS: TRUE\n    TOGGLE: TRUE\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n\n\n\nFor this section we're going to play with some random data looking at whether peoples' resting heart rates depend on how much sleep they get.   \n\nOur data contains 70 people, for which we have a variety of measures. The only ones we are going to concern ourselves with are heart rate (`HR`) and hours slept (`hrs_sleep`), but there are plenty of other ones for you to play around with if you like  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhrdat <- read_csv(\"https://uoepsy.github.io/data/usmr_hrsleep.csv\")\nhead(hrdat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  name        age height shoe_size hrs_sleep ampm  smoke    HR\n  <chr>     <dbl>  <dbl>     <dbl>     <dbl> <chr> <chr> <dbl>\n1 Biancha      42   151.        39      14   pm    n        46\n2 Werner       71   160.        39       6.3 pm    n        73\n3 Martin       NA   182         43       9.5 pm    n        62\n4 Danika       60   181.        35       9.1 am    n        66\n5 Thuy Minh    25   178         42      11.3 am    n        44\n6 Jena         22   169.        44      11.5 pm    n        53\n```\n\n\n:::\n:::\n\n\n\n\n\n# Centering/Scaling/Standardising\n\nThere are many transformations we can do to a continuous variable, but far and away the most common ones are _centering_ and _scaling._ \n\n:::sticky\n__Centering__  \n\nCentering simply means moving the entire distribution to be centered on some new value. We achieve this by subtracting our desired center from each value of a variable. \n\n__Mean-centering__  \n\nA common option is to _mean center_ (i.e. to subtract the mean from each value). This makes our new values all relative to the mean.  \n\n:::\n\n\nIn our heart-rates data, the average hours of sleep is 8.8. If we subtract that from each person's hours of sleep, we get the mean-centered hours slept (the `hrs_sleepC` column below). You can see that the first person in our data (Biancha) sleeps 14 hours a night, which is (according to the `hrs_sleepC` variable) 5.2 hours more than average.  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhrdat |>\n  mutate(\n    hrs_sleepC = hrs_sleep - mean(hrs_sleep), \n      .after = hrs_sleep # put new column after the hrs_sleep variable\n  ) |> head(5L) # just show the first 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 9\n  name        age height shoe_size hrs_sleep hrs_sleepC ampm  smoke    HR\n  <chr>     <dbl>  <dbl>     <dbl>     <dbl>      <dbl> <chr> <chr> <dbl>\n1 Biancha      42   151.        39      14        5.23  pm    n        46\n2 Werner       71   160.        39       6.3     -2.47  pm    n        73\n3 Martin       NA   182         43       9.5      0.726 pm    n        62\n4 Danika       60   181.        35       9.1      0.326 am    n        66\n5 Thuy Minh    25   178         42      11.3      2.53  am    n        44\n```\n\n\n:::\n:::\n\n\n\n\nWe can center a variable on other things, such as the minimum or maximum value of the scale we are using, or some judiciously chosen value of interest.  \n\n\n:::sticky\n__Scaling__\n\nScaling changes the _units_ of the variable, and we do this by dividing the observations by some value. E.g., moving from \"36 months\" to \"3 years\" involves multiplying (scaling) the value by 1/12.  \n\n__Standardising__  \n\nFar and away the most common transformation that involves scaling is called 'standardisation'. This involves subtracting the mean and then dividing by the standard deviation. So standardisation centers on the sample mean **and** scales by the sample standard deviation.   \n\n$$\n\\text{standardised }x_i = \\frac{x_i - \\bar x}{s_x}\n$$\n\n:::\n\nThe process of standardisation (subtracting the mean and dividing by the standard deviation) will make it so that all our values are expressed in terms of \"how many standard deviations above/below the mean\". This can be useful because it puts variables on the same conceptual scale (units of standard deviation).   \n\n\n::: {.callout-note collapse=\"true\"}\n#### Martin's height\n\n:::: {.columns}\n::: {.column width=\"70%\"}\nConsider Martin. He goes on a lot about people's heights. He is 182cm tall, and he has size 43 feet (in EU sizes). Is Martin's height more unusual than the size of his feet? If we standardise both variables, we can see that he is 1.2 standard deviations above average height, but only .56 standard deviations above average in shoe size.  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhrdat |> \n  mutate(\n    Zheight = (height-mean(height))/sd(height), \n    Zshoe = (shoe_size-mean(shoe_size))/sd(shoe_size), \n      .after = shoe_size\n  ) |> head(5L) # just show the first 5\n```\n:::\n\n\n\n:::\n::: {.column width=\"30%\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/playmo_mc.jpg){fig-align='center' width=80%}\n:::\n:::\n\n\n\n:::\n::::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n  name        age height shoe_size Zheight  Zshoe hrs_sleep ampm  smoke    HR\n  <chr>     <dbl>  <dbl>     <dbl>   <dbl>  <dbl>     <dbl> <chr> <chr> <dbl>\n1 Biancha      42   151.        39  -1.52  -0.802      14   pm    n        46\n2 Werner       71   160.        39  -0.688 -0.802       6.3 pm    n        73\n3 Martin       NA   182         43   1.19   0.559       9.5 pm    n        62\n4 Danika       60   181.        35   1.08  -2.16        9.1 am    n        66\n5 Thuy Minh    25   178         42   0.843  0.219      11.3 am    n        44\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n:::\n\n\n\n\n:::rtip\n__handy functions__  \n\nWe can easily center and scale in R by just performing those calculations using something like `(var - mean(var)) / sd(var)`, but there is a handy function that can do it quickly for us:  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhrdat |> mutate(\n  hrs_sleepC = scale(hrs_sleep, scale = FALSE), # mean centered\n  hrs_sleepZ = scale(hrs_sleep), # standardised\n)\n```\n:::\n\n\n\n\nWe can actually use these _inside_ the call to the `lm()` function, e.g.  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlm(HR ~ scale(hrs_sleep), data = hrdat)\n```\n:::\n\n\n\n\n\n:::\n\n\n# Centering and Scaling Predictors\n\nWe know that we can transform our variables in lots of ways, but how does this choice affect the models we are fitting? In short, it doesn't affect our model, but it _does_ change what we get out of it.  \n\nIf we re-center a predictor on some new value (such as the mean), then all this does is change what \"zero\" means in our variable. This means that if we re-center a predictor in our linear model, the only thing that changes is our intercept. This is because the intercept is \"when all predictors are zero\". And we are changing what \"zero\" represents!  \n\nWhen we scale a predictor, this will change the slope. Why? Because it changes what \"moving 1\" represents. So if we standardise a variable, it changes both the intercept and the slope. However, note that the significance of the slope remains _exactly the same_, we are only changing the *units* that we are using to expressing that slope.\n\nFor the remainder of this reading, we're going to start with the model `lm(HR ~ hrs_sleep)`, and then explore how different transformations to our variables change what we get out of the model. Because we are applying transformations to individual variables, all of the logic we're about to see holds in multiple regression models too (i.e. it doesn't matter how many independent predictors we have, all of the below stays the same).  \n\nIn @fig-scalexlm you can see our original model (top left), and then various transformations applied to our predictor. Note how these transformations don't affect the model itself - the large blue point shows how we are changing where our intercept is estimated, but the slope of the line (and our uncertainty in slope) is the same in all four plots. These models are also shown below, along with a comparison to show that they are all identical in terms of model fit.   \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Centering and scaling predictors in linear regression models](08a_scaling_files/figure-html/fig-scalexlm-1.png){#fig-scalexlm fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n::::panelset\n:::panel\n#### Original\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmod_orig <- lm(HR ~ hrs_sleep, data = hrdat)\nsummary(mod_orig)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = HR ~ hrs_sleep, data = hrdat)\n...\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  95.0552     3.2998   28.81  < 2e-16 ***\nhrs_sleep    -3.5035     0.3631   -9.65  2.3e-14 ***\n```\n\n\n:::\n:::\n\n\n\n\n- `(Intercept)`: estimated heart rate (HR) for someone who didn't sleep at all\n- `hrs_sleep`: estimated change in HR for every 1 additional hour of sleep.\n\n:::\n:::panel\n#### Mean centered X\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmod_mc <- lm(HR ~ scale(hrs_sleep, scale=FALSE), data = hrdat)\nsummary(mod_mc)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = HR ~ scale(hrs_sleep, scale = FALSE), data = hrdat)\n...\nCoefficients:\n                                Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                      64.3143     0.8605   74.74  < 2e-16 ***\nscale(hrs_sleep, scale = FALSE)  -3.5035     0.3631   -9.65  2.3e-14 ***\n```\n\n\n:::\n:::\n\n\n\n\n- `(Intercept)`: estimated heart rate (HR) for someone who **slept an average number of hours**\n- `hrs_sleep`: estimated change in HR for every 1 additional hour of sleep.\n\n:::\n:::panel\n#### Standardised X\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmod_z <- lm(HR ~ scale(hrs_sleep), data = hrdat)\nsummary(mod_z)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = HR ~ scale(hrs_sleep), data = hrdat)\n...\nCoefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)       64.3143     0.8605   74.74  < 2e-16 ***\nscale(hrs_sleep)  -8.3636     0.8667   -9.65  2.3e-14 ***\n```\n\n\n:::\n:::\n\n\n\n\n- `(Intercept)`: estimated heart rate (HR) for someone who **slept an average number of hours**\n- `hrs_sleep`: estimated change in HR for every 1 additional **standard deviation of sleep time**\n\n:::\n:::panel\n#### X Centered on 8\n\nThe function `I()` can be used to isolate a computation. The `+` and `-` symbols in linear models _mean_ something (they are how we add predictors), so we can use `I()` here to just tell R to do the computation of `hrs_sleep-8` on its own. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmod_8 <- lm(HR ~ I(hrs_sleep-8), data = hrdat)\nsummary(mod_8)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = HR ~ I(hrs_sleep - 8), data = hrdat)\n...\nCoefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)       67.0270     0.9052   74.04  < 2e-16 ***\nI(hrs_sleep - 8)  -3.5035     0.3631   -9.65  2.3e-14 ***\n```\n\n\n:::\n:::\n\n\n\n\n- `(Intercept)`: estimated heart rate (HR) for someone who **slept 8 hours**\n- `hrs_sleep`: estimated change in HR for every 1 additional hour of sleep.\n\n:::\n:::panel\n#### Comparison\n\nNormally, if models have different sets of predictors which are not nested (one model containing all of the predictors of the other model), then we can't compare them with an F test.  \nHowever, in this case, the `hrs_sleep` variable is in every model (just transformed in some way), so we can do a comparison.  \n\nNote that the residual sums of squares for these models is identical - no model is explaining more variance than the other, because underlyingly they are all just the same model!  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmod_orig <- lm(HR ~ hrs_sleep, data = hrdat)\nmod_mc <- lm(HR ~ scale(hrs_sleep, scale=FALSE), data = hrdat)\nmod_z <- lm(HR ~ scale(hrs_sleep), data = hrdat)\nmod_8 <- lm(HR ~ I(hrs_sleep-8), data = hrdat)\n\nanova(mod_orig, mod_mc, mod_z, mod_8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nModel 1: HR ~ hrs_sleep\nModel 2: HR ~ scale(hrs_sleep, scale = FALSE)\nModel 3: HR ~ scale(hrs_sleep)\nModel 4: HR ~ I(hrs_sleep - 8)\n  Res.Df    RSS Df   Sum of Sq F Pr(>F)\n1     68 3524.5                        \n2     68 3524.5  0 -4.5475e-13         \n3     68 3524.5  0  0.0000e+00         \n4     68 3524.5  0  0.0000e+00         \n```\n\n\n:::\n:::\n\n\n\n\n:::\n::::\n\n## Transformations, pre/post  \n\nWhen we apply these transformations we can do so either _during_ the process of fitting the model (e.g. by using `scale()` inside the `lm()` function as we have just seen). We can also do this _prior_ to fitting the model, by creating a new variable using code like `hrs_sleepZ = scale(hrs_sleep)`, and then using that variable in the model. \n\nIt is also possible to work out the slope for transformed variables _after_ we've just fitted our original model. This is because when we scale a predictor, all that happens to our coefficient is that it gets scaled accordingly. Consider the example in @fig-hrsmin, where we change from using _hours_ to _minutes_. To do this we can just multiply our `hrs_sleep` variable by 60 (so that, e.g., 1.5 hours becomes 90 minutes).  \n\nThe coefficient from the model changes from  \n\n\"change in HR for every 1 hour of sleep\"  \nto  \n\"change in HR for every 1 minute of sleep\"  \n\nbut we can actually do that calculation ourselves, because 1 minute is 1/60th of an hour. So we already know that $\\frac{\\text{change in HR for every 1 hour of sleep}}{60}$ is the same thing as \"change in HR for every 1 minute of sleep\".  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Changing from hours_slept to minutes_slept will make our coefficient 1/60th of the size](08a_scaling_files/figure-html/fig-hrsmin-1.png){#fig-hrsmin fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nThe same applies when we standardise a predictor. Since standardising involves dividing a variable by its standard deviation, the coefficient for the standardised variable will be the original coefficient multiplied by the variable's standard deviation.  \n\n:::: {.columns}\n::: {.column width=\"45%\"}\nOriginal coefficients  \n`lm(HR ~ hrs_sleep, data = hrdat)`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncoef(mod_orig)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)   hrs_sleep \n  95.055220   -3.503526 \n```\n\n\n:::\n:::\n\n\n\n\n:::\n::: {.column width=\"2.5%\"}\n:::\n::: {.column width=\"45%\"}\nStandardised coefficients  \n`lm(HR ~ scale(hrs_sleep), data = hrdat)`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncoef(mod_z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     (Intercept) scale(hrs_sleep) \n       64.314286        -8.363635 \n```\n\n\n:::\n:::\n\n\n\n\n:::\n::::\n\nThe standard deviation of `hrs_sleep` we can calculate:  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsd(hrdat$hrs_sleep) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.387205\n```\n\n\n:::\n:::\n\n\n\n\nAnd we can move from the original coefficient to the standardised one!  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# original coefficient multiplied by sd of hrs sleep\ncoef(mod_orig)[2] * sd(hrdat$hrs_sleep)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nhrs_sleep \n-8.363635 \n```\n\n\n:::\n:::\n\n\n\n\n# Scaling the outcome  \n\nWe've seen what happens when we scale our _predictors_ in a linear regression model, but what happens when we scale our _outcome_ variable? If we tie it to our plots, all that happens is that the numbers on the y-axis will change (see @fig-scaley).  \n\nThe model again is unchanged, but our coefficient will no longer be the \"estimated change in beats per minute\" but will be \"the estimated change in standard deviations of heart rates\".   \n\nOur original coefficient was interpreted as heart rate decreasing by -3.5 beats per minute for every additional hour slept. By standardising the outcome (heart rates), then we just re-express that -3.5 in terms of \"how many standard deviations?\". \nThe standard deviation of heart rates in our data is 11, so the slope in terms of standard deviations should be $\\frac{-3.5}{11} = -0.32$. The interpretation of this number is simply that heart rates decrease by 0.32 **standard deviations** for every additional hour slept.  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Scaling the outcome variable](08a_scaling_files/figure-html/fig-scaley-1.png){#fig-scaley fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n::::panelset\n:::panel\n#### Original\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmod_orig <- lm(HR ~ hrs_sleep, data = hrdat)\nsummary(mod_orig)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = HR ~ hrs_sleep, data = hrdat)\n...\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  95.0552     3.2998   28.81  < 2e-16 ***\nhrs_sleep    -3.5035     0.3631   -9.65  2.3e-14 ***\n```\n\n\n:::\n:::\n\n\n\n\n- `(Intercept)`: estimated heart rate (HR) for someone who didn't sleep at all\n- `hrs_sleep`: estimated change in HR for every 1 additional hour of sleep.\n\n:::\n:::panel\n#### Standardised Y\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmod_yz <- lm(scale(HR) ~ hrs_sleep, data = hrdat)\nsummary(mod_yz)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = scale(HR) ~ hrs_sleep, data = hrdat)\n...\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   2.7943     0.2999   9.316  9.1e-14 ***\nhrs_sleep    -0.3185     0.0330  -9.650  2.3e-14 ***\n```\n\n\n:::\n:::\n\n\n\n\n- `(Intercept)`: estimated **number of standard deviations above average heart rate (HR)** for someone who didn't sleep at all\n- `hrs_sleep`: estimated change in **standard deviations of** HR for every 1 additional hour of sleep.\n\n:::\n::::\n\n\n# Standardised Coefficients\n\nWhen we standardise variables in a regression model, it means we can talk about all our coefficients in terms of \"standard deviation units\". To the extent that it is possible to do so, this puts our coefficients on scales of the similar magnitude, making qualititative comparisons between the sizes of effects a *little* more easy.  \n\nWe tend to refer to coefficients using standardised variables as (unsurprisingly), \"standardised coefficients\", and we denote them with a $\\beta$^[some people use $\\beta$ for a normal coefficient, and $\\beta^*$ for a standardised coefficient].  \n\nThere are two main ways that people construct standardised coefficients. One of which standardises just the predictor, and the other of which standardises both predictor and outcome.  \n\n| predictor    | outcome      | in lm                     | coefficient                    | interpretation                               |\n| ------------ | ------------ | ------------------------- | --------------------------------- | -------------------------------------------- |\n| standardised | raw          | `y ~ scale(x)`        | $\\beta = b \\cdot s_x$             | \"change in Y for a 1 SD increase in X\"       |\n| standardised | standardised | `scale(y) ~ scale(x)` | $\\beta = b \\cdot \\frac{s_x}{s_y}$ | \"change in SD of Y for a 1 SD increase in X\" |\n\n\n\n## apples and oranges\n\nVery often, people will consider a standardised coefficient to be a unitless measure of \"size of effect\" that they can go and happily compare with other results (be it from another coefficient from the model, or a coefficient from a different study altogether, perhaps even on a different population!).  \n\nHowever, a **very** important thing to remember is that standardised coefficients are *dependent upon the sample standard deviations*. \n\nThis means that any comarisons between standardised coefficients comparisons could be due to an actual difference in magnitude of the underlying relationship, but it could just as easily be due to differences in the standard deviations of the variables. \n\nAs a toy example, I have two datasets, each of 100 people. The first has people aged 18 to 40. The second has people aged 18 to 80. Both datasets have been taken from a population where the underlying linear relationship between age and vocabulary is $vocab_i = 10 + 1 \\cdot age_i$. So the \"association between age and vocabulary\" should be more or less the same for both datasets (as seen in @fig-2hyp).    \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Two hypothetical studies, with different age ranges of participants](08a_scaling_files/figure-html/fig-2hyp-1.png){#fig-2hyp fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nBut the standardised coefficients for the second dataset will always be bigger, because the variance in the `age` variable is bigger.  \n\nThis is plainly clear from when we remember that the standardised coefficient is simply the original raw `age` coefficient multiplied by the standard deviation of `age` (either $b \\cdot s_{age}$ or $b \\cdot \\frac{s_{age}}{s_{vocab}}$). In the 2nd study, $s_{age}$ is bigger, but (as clearly evident in the plot above) we don't want to be saying that age has a bigger effect on vocabulary in study 2.. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"kdndzjfzkh\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#kdndzjfzkh table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#kdndzjfzkh thead, #kdndzjfzkh tbody, #kdndzjfzkh tfoot, #kdndzjfzkh tr, #kdndzjfzkh td, #kdndzjfzkh th {\n  border-style: none;\n}\n\n#kdndzjfzkh p {\n  margin: 0;\n  padding: 0;\n}\n\n#kdndzjfzkh .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#kdndzjfzkh .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#kdndzjfzkh .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#kdndzjfzkh .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#kdndzjfzkh .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kdndzjfzkh .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kdndzjfzkh .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kdndzjfzkh .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#kdndzjfzkh .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#kdndzjfzkh .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#kdndzjfzkh .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#kdndzjfzkh .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#kdndzjfzkh .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#kdndzjfzkh .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#kdndzjfzkh .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#kdndzjfzkh .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#kdndzjfzkh .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#kdndzjfzkh .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#kdndzjfzkh .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kdndzjfzkh .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#kdndzjfzkh .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#kdndzjfzkh .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#kdndzjfzkh .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kdndzjfzkh .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#kdndzjfzkh .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#kdndzjfzkh .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kdndzjfzkh .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kdndzjfzkh .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#kdndzjfzkh .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kdndzjfzkh .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#kdndzjfzkh .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kdndzjfzkh .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kdndzjfzkh .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kdndzjfzkh .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kdndzjfzkh .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kdndzjfzkh .gt_left {\n  text-align: left;\n}\n\n#kdndzjfzkh .gt_center {\n  text-align: center;\n}\n\n#kdndzjfzkh .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#kdndzjfzkh .gt_font_normal {\n  font-weight: normal;\n}\n\n#kdndzjfzkh .gt_font_bold {\n  font-weight: bold;\n}\n\n#kdndzjfzkh .gt_font_italic {\n  font-style: italic;\n}\n\n#kdndzjfzkh .gt_super {\n  font-size: 65%;\n}\n\n#kdndzjfzkh .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#kdndzjfzkh .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#kdndzjfzkh .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#kdndzjfzkh .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#kdndzjfzkh .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#kdndzjfzkh .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#kdndzjfzkh .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#kdndzjfzkh .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#kdndzjfzkh div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"estimate\">estimate</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"study-1,-ages-18-40\">study 1, ages 18-40</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"study-2,-ages-18-80\">study 2, ages 18-80</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"estimate\" class=\"gt_row gt_left\">sd(age)</td>\n<td headers=\"study 1, ages 18-40\" class=\"gt_row gt_right\">6.03</td>\n<td headers=\"study 2, ages 18-80\" class=\"gt_row gt_right\">16.53</td></tr>\n    <tr><td headers=\"estimate\" class=\"gt_row gt_left\">vocab ~ age</td>\n<td headers=\"study 1, ages 18-40\" class=\"gt_row gt_right\">1.08</td>\n<td headers=\"study 2, ages 18-80\" class=\"gt_row gt_right\">1.02</td></tr>\n    <tr><td headers=\"estimate\" class=\"gt_row gt_left\">vocab ~ scale(age)</td>\n<td headers=\"study 1, ages 18-40\" class=\"gt_row gt_right\">6.50</td>\n<td headers=\"study 2, ages 18-80\" class=\"gt_row gt_right\">16.82</td></tr>\n    <tr><td headers=\"estimate\" class=\"gt_row gt_left\">scale(vocab) ~ scale(age)</td>\n<td headers=\"study 1, ages 18-40\" class=\"gt_row gt_right\">0.91</td>\n<td headers=\"study 2, ages 18-80\" class=\"gt_row gt_right\">0.99</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\nThe take-home of this is that sometimes we just can't compare apples and oranges. And sometimes we can't even compare apples to other apples! Choosing whether or not to standardise coefficients is going to depend on many things, and sometimes the easiest thing is simply to report both raw and standardised coefficients.  \n\n",
    "supporting": [
      "08a_scaling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/panelset-0.3.0/panelset.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/panelset-0.3.0/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}