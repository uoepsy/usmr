---
title: "Measurement and Distributions"
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false

library(tidyverse)
source('_theme/theme_quarto.R')
```

# Measurement


## The problem with measurement

- when we measure something, we want to identify its **true measurement** (the **ground truth**)

:::: {.columns}

::: {.column width="50%"}
- we don't have any way of measuring accurately enough

- our measurements are likely to be _close to_ the truth

- they might vary, if we measure more than once
:::

::: {.column width="50%"}
![](img/playmo2.jpg)
:::

::::


## Measurement
- we might _expect_ values close to the "true" measurement to be more frequent

:::: {.columns}

::: {.column width="40%"}
![](img/playmo_proft.svg){width=60% .center-img}
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| fig-width: 4
#| fig-asp: .7

set.seed(8423398)
pm <- data.frame(x=rnorm(70,7.5,.05))
pm %>% ggplot(aes(x=x)) +
  geom_density() + scale_y_continuous(breaks=NULL) +
  geom_vline(xintercept=7.5,colour="red") +
  annotate(geom="text",colour="red",x=7.5,y=3,label="TRUE MEASURE",size=3) +
  xlab('height (cm)') + ylab("")
```

:::

::::

::: notes
- so let's do a thought experiment and imagine what things
would look like if lots and lots of people tried to measure
the "true" distance of the notch from the end of the stick.

- most of them would be quite competent, and we would expect
the majority of the measurements to be close to the "true" value.

- every now and again, someone would overshoot or undershoot by rather
more.

- _theoretically_ they might be completely off-beam, although the chances of being way off get vanishingly small quite quickly.
:::

## Something quite familiar


```{r}
#| fig-asp: .55
#| echo: false

t <- data.frame(x=c(7.35,7.65))
t %>% ggplot(aes(x)) +
  stat_function(fun = dnorm, n =151, args=list(mean=7.5,sd=.05),size=2) +
  ylab("") +
  geom_vline(xintercept = 7.5,colour="red",size=2) +
  scale_y_continuous(breaks=NULL) +
  xlab("measurement")
```


::: notes
- if we think a bit more about our thought experiment, we've actually described
something quite familiar:  A bell curve

- but what is a "bell curve"?

- to answer that question, let's start back where we were last week, with dice.
:::

## Dice again


```{r dice, echo=FALSE,fig.asp=.6}
set.seed(13)
dice <- function(num=1) {
  sum(sample(1:6,num,replace = T))
}
t <- data.frame(x=replicate(1000,dice(2)))
t %>% ggplot(aes(x)) + geom_bar() +
  scale_x_continuous(breaks=2:12,name = 'sum of dice',limits = c(1,13)) +
  ggtitle('1000 throws of 2 dice')

```


- the heights of the bars represent the numbers of times we obtain each value

- but why are the bars not touching each other?


## Dice throws aren't really numbers


:::: {.columns}

::: {.column width="50%"}
- **A** = ![](img/A1.svg){width=20%}

- **B** = ![](img/B1.svg){width=20%} or ![](img/B2.svg){width=20%}

- **C** = ![](img/C1.svg){width=20%} or ![](img/C2.svg){width=20%} or ![](img/C3.svg){width=20%}
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig-asp: .5
t %>% ggplot(aes(x)) + geom_bar() +
  scale_x_continuous(breaks=2:12,labels = c('A','B','C','D','E','F','G','H','I','J','K'),
  name = 'outcome type',limits = c(1,13)) +
  ggtitle('1000 throws of 2 dice')
```
:::

::::

- bar plot ("bar chart") always has gaps between bars
- represents frequencies of _discrete categories_ (`factors`)

::: notes
- I could just label the possible outcomes of throwing two dice arbitrarily

- if you think about it, there are only 11 possible values that the sum
  of two dice can take.

- and if the dice didn't have actual numbers on their faces, you could still
  enumerate the outcomes

- so the outcomes are _discrete_ (you can never throw a value between 3 and 4, or between "B and C")
- and the bars on a bar plot have gaps between them to show this.
:::

## Back to playmobil

:::: {.columns}

::: {.column width="40%"}
![](img/playmo2.jpg)
:::

::: {.column width="60%"}
- **height** is a Ratio variable
- there will be limits to our precision, coventionally indicated by number of digits

::: fragment

| written | ⊢ min | ⊢ max |
|----|---|---|
| 7.5 | ≥ 7.450 | < 7.550 |
| 7.50 | ≥ 7.495 | < 7.505 |

: **height of figure (cm)**
:::

:::
::::

## Histograms    

:::: {.columns}

::: {.column width="40%"}
- we can represent all the measurements with a **histogram**

- the bars are touching because this represents _continuous_ data

:::

::: {.column width="60%"}

```{r}
#| echo: false
#| fig-asp: .6

minx <- round(min(pm$x - .02),2)
maxx <- round(max(pm$x + .02),2)
p <- pm %>% ggplot(aes(x=x)) + geom_histogram(binwidth=0.01) +
  scale_x_continuous(limits=c(minx,maxx)) + xlab('height (cm)')
layD <- layer_data(p) %>% filter(x>=7.495 & x<=7.505)
barHt <- layD$y
p
```

:::
::::

## Histograms {visibility="uncounted"}

:::: {.columns}

::: {.column width="40%"}
- we can represent all the measurements with a **histogram**

- the bars are touching because this represents _continuous_ data

:::

::: {.column width="60%"}

```{r}
#| echo: false
#| fig-asp: .6

p + geom_rect(xmin=layD$xmin,xmax=layD$xmax,ymin=0,ymax=barHt,fill="red")
```

:::

::::

- we know that there were `r barHt` measurements of about `r .rround(layD$x,2)` cm
  + strictly, ≥ `r .rround(layD$xmin,3)` and < `r .rround(layD$xmax,3)` cm

## Histograms (2)

:::: {.columns}

::: {.column width="40%"}
- note that the _bin width_ of the histogram matters

- these histograms all show the same data
:::

::: {.column width="60%"}

:::: r-stack

::: {#1}
```{r}
#| echo: false
#| fig-asp: .6
p
```
:::

::: {.fragment}

```{r}
#| echo: false
#| fig-asp: .6
pm %>% ggplot(aes(x=x)) + geom_histogram(binwidth=0.025) +
  scale_x_continuous(limits=c(minx,maxx)) + xlab('height (cm)')
```
:::

::: {.fragment}
```{r}
#| echo: false
#| fig-asp: .6
pm |> ggplot(aes(x=x)) + geom_histogram(binwidth=0.05) +
  scale_x_continuous(limits=c(minx,maxx)) + xlab('height (cm)')
```
:::

::::

:::

::::

## Histograms in R
```{r}
#| include: false

heights <- pm$x
```

:::: {.columns}

::: {.column width="30%"}
```{r}
head(heights)
```

```{r}
#| label: histy
#| output: false
#| fig-asp: .6

hist(heights)
```

:::

::: {.column width="70%"}

![](`r knitr::fig_chunk('histy','svg')`)

:::

::::




::: aside
you can make prettier graphs using `ggplot()`, but `hist()` is useful for exploring data
:::

# The Normal Distribution

## Histograms

:::: {.columns}

::: {.column width="50%"}
**the good**

- way to examine the _distribution_ of data

- easy to interpret ( $y$ axis = counts )

- [sometimes helpful in spotting weird data]{.fragment .highlight-red}
:::

::: {.column width="50%"}
**the bad**

- changing bin width can completely change graph

  + can lack precision if bins too wide

  + can appear sparse if bins too narrow
:::

::::

## Histograms

```{r}
#| echo: false
#| fig-asp: .6

pm2 <- rbind(pm,data.frame(x=c(10.2,10.2)))
p <- pm2 |> ggplot(aes(x)) + geom_histogram(binwidth=0.05) +
  scale_x_continuous() + xlab('height (cm)')
layD <- layer_data(p) |> filter(x>=10.2)
p + geom_rect(xmin=layD$xmin,xmax=layD$xmax,ymin=0,ymax=layD$y,fill="red")
```

## Density Plots


```{r}
#| echo: false
#| fig-asp: .6
p <- pm |> ggplot(aes(x=x)) + geom_density(size=2) +
  xlab("height (cm)")
p
```


## Density Plots {visibility="uncounted"}

```{r}
#| echo: false
#| fig-asp: .6
p + geom_rug()
```


